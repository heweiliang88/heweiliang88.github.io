<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(syntax)vite</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vite.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vite.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><blockquote><p><a href="https://cn.vitejs.dev/guide/why.html">Vite 官方中文文档</a></p></blockquote><blockquote><ul><li>安装<ul><li>vue create =&gt; npm create vite</li><li><code>npm create vite@latest</code></li><li><code>pnpm create vite my-vue-app --template vue</code></li><li><code>pnpm create vite my-vue-app --template vue-ts</code></li></ul></li><li>配置syntax<ul><li>vite<a href="https://cn.vitejs.dev/config/">配置 Vite | Vite 官方中文文档</a></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()]<br>})<br></code></pre></td></tr></tbody></table></figure></blockquote><ul><li><p>web开发构建工具</p><ul><li>一个开发服务器 基于原生ES模块 模块热更新(HMR)</li><li>一套构建指令 Rollup打包 预配置的 输出用于生产环境的高度优化过的静态资源</li></ul></li><li><p>现实问题：缓慢的服务器启动[将应用中的模块区分为 **依赖** <a href="https://esbuild.github.io/">esbuild</a> <a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html">预构建依赖</a>。和 <strong>源码</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ESM</a> {ES Module} 两类，改进了开发服务器启动时间] 缓慢的更新(打包器支持了动态模块热替换（HMR）)</p></li></ul><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest  // npm init vite-app &lt;project-name&gt;<br>yarn create vite  // yarn create vite-app &lt;project-name&gt;<br>pnpm create vite<br><span class="hljs-comment"># npm 6.x</span><br>npm create vite@latest my-vue-app --template vue<br><span class="hljs-comment"># npm 7+, extra double-dash is needed:</span><br>npm create vite@latest my-vue-app -- --template vue<br><br>npm create vite my-vue-app -- --template vue // 多一个--<br>npm/yarn/pnpm create vite my-vue-app --template vue<br><br>// 上面vue替代 vanilla，vanilla-ts，vue，vue-ts，react，react-ts，preact，preact-ts，lit，lit-ts，svelte，svelte-ts<br>// 社区模板<br>npx degit user/project my-project<br><br>npx vite // npx vite build<br><span class="hljs-string">"scripts"</span>: {<br>    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"vite"</span>, // 启动开发服务器，别名：`vite dev`，`vite serve`<br>    <span class="hljs-string">"build"</span>: <span class="hljs-string">"vite build"</span>, // 为生产环境构建产物<br>    <span class="hljs-string">"preview"</span>: <span class="hljs-string">"vite preview"</span> // 本地预览生产构建产物<br>}<br></code></pre></td></tr></tbody></table></figure><p>vite.config.js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineConfig, loadEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(<span class="hljs-function">(<span class="hljs-params">{ command, mode }</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 根据当前工作目录中的 `mode` 加载 .env 文件</span><br>  <span class="hljs-comment">// 设置第三个参数为 '' 来加载所有环境变量，而不管是否有 `VITE_` 前缀。</span><br>  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">loadEnv</span>(mode, process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">''</span>)<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-comment">// vite 配置</span><br>    <span class="hljs-attr">define</span>: {<br>      <span class="hljs-attr">__APP_ENV__</span>: env.<span class="hljs-property">APP_ENV</span><br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)vue-cli</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vue-cli.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vue-cli.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://cli.vuejs.org/zh/guide/">介绍 | Vue CLI</a></p></blockquote><blockquote><p>@vue/cli两部分组成</p><ul><li>vue-cli 安装 <ul><li><code>npm install -g @vue/cli </code></li><li><code> vue create &lt;project-name&gt;</code></li></ul></li><li>Preset + 插件(第三方包)<ul><li>preset 预设 <code>vim ~/.vuerc</code>  远程/本地 Preset  <code>vue create --preset username/repo my-project</code></li><li>插件 内建 <code>vue add vuex</code> 社区<code>npm i vuex --save-dev</code><ul><li>区别  @vue/cli-plugin-vuex包 vs vuex包</li><li>vue add 会生成文件</li></ul></li></ul></li><li>vue.config.js 文件  <a href="https://cli.vuejs.org/zh/config/">配置参考 | Vue CLI</a></li></ul></blockquote><p>概念</p><ul><li>Vue CLI 是一个基于<code>Vue.js 进行快速开发的完整系统</code>(脚手架工具)</li><li>@vue/cli(新版本) 和 vue-cli(旧版本)</li><li><code>三个系统的组件（部分）组成  CLI 、CLI 服务、CLI 插件</code><ul><li>CLI：   (@vue/cli)   全局安装npm包  <code>提供vue命令</code></li><li>CLI 服务：（@vue/cli-service ） 一个<code>开发环境依赖</code>   一个npm包  局部安装在每个<code>@vue/cli</code><ul><li>@vue/cli-service-global 快速开发的原型 单独运行vue文件 <code>@vue/cli</code> + <code>@vue/cli-service-global</code></li></ul></li><li>CLI 插件：（插件就是安装的第三方包npm 如axios elementUI这些） 向你的 Vue 项目提供可选功能的 npm 包   <code>npm依赖包</code><ul><li><code>@vue/cli-plugin-</code> (内建插件 官方)</li><li><code>vue-cli-plugin-</code> (社区插件 第三方)</li></ul></li></ul></li><li><code>@vue/cli</code> 的全局配置，例如你惯用的包管理器和你本地保存的 preset <code>.vuerc</code> 的 JSON 文件 vue config 可复用的 preset</li></ul><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 创建项目<br>vue create my-project <br>vue ui<br>vue init webpack my-project<br>vue creat --<span class="hljs-built_in">help</span><br><br><br>// 安装vue/cli脚手架<br>npm i -g @vue/cli  // npm install -g @vue/cli@next<br>yarn global add @vue/cli  // yarn global add @vue/cli@next<br>// vue/cli脚手架版本<br>vue -version<br>// 更新vue-cli<br>npm update -g @vue/cli<br>yarn global upgrade --latest @vue/cli<br><br>// 快速原型开发<br>npm install -g @vue/cli-service-global<br>vue serve -h -o -c -p 8081 *.vue   //  vue serve开发环境 npm run serve  <br>vue serve MyComponent.vue<br>yarn serve<br>npx vue-cli-service serve<br>vue -d dist *.vue   // vue build npm run build  <br>vue build -t -n -d -h  <br>vue build MyComponent.vue // MyJavaScript.js<br>vue inspect<br><br>npx vue-cli-service <span class="hljs-built_in">help</span><br>// 插件 @vue/cli-plugin-<br>vue add eslint<br>npm i eslint<br>npm i -g elint 全局环境<br>// Preset 一个 Vue CLI preset 是一个包含创建新项目所需预定义选项和插件的 JSON 对象，让用户无需在命令提示中选择它们。<br>// CLI 服务<br><br>npm install vuex --save  // 生产环境(`dependencies`)   npm install vuex<br>npm install scss-loader --save-dev  // 开发环境 (`devDependencies`)  <br></code></pre></td></tr></tbody></table></figure><p>package.json</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">{<br>  <span class="hljs-string">"vuePlugins"</span>: { }<br>}<br></code></pre></td></tr></tbody></table></figure><p>vue.config.js 配置文件  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module.export={ }</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span> = {<br>  <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">'production'</span> ? <span class="hljs-string">'/public/'</span> : <span class="hljs-string">'./'</span>,<br> <span class="hljs-attr">outputDir</span>: <span class="hljs-string">'dist'</span>,<br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">"assets"</span>,<br>    <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br> <span class="hljs-attr">pages</span>: {  <br>        <span class="hljs-attr">index</span>: {<br>            <span class="hljs-attr">entry</span>: <span class="hljs-string">'src/index/main.js'</span>,    <br>            <span class="hljs-attr">template</span>: <span class="hljs-string">'public/index.html'</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.html'</span>,       <br>            <span class="hljs-attr">title</span>: <span class="hljs-string">'Index Page'</span>,   <br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">'chunk-vendors'</span>, <span class="hljs-string">'chunk-common'</span>, <span class="hljs-string">'index'</span>]<br>        }, <br>     <span class="hljs-attr">subpage</span>: <span class="hljs-string">'src/subpage/main.js'</span><br>    },<br>    <span class="hljs-attr">devServer</span>: {<br>          <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>,<br>          <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>          <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">hotOnly</span>: <span class="hljs-literal">false</span>, <br>          <span class="hljs-attr">proxy</span>: { <br>              [process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: {<br>                  <span class="hljs-attr">target</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_URL</span>,<br>                  <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>                  <span class="hljs-attr">pathRewrite</span>: {<br>                    [<span class="hljs-string">"^"</span> + process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: <span class="hljs-string">""</span><br>                  }<br>               }<br>              <span class="hljs-string">'/api'</span>: {<br>                  <span class="hljs-attr">target</span>: <span class="hljs-string">'http://47.100.47.3/'</span>,  <br>                  <span class="hljs-attr">ws</span>:<span class="hljs-literal">true</span>,<br>                  <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <br>              },<br>              <span class="hljs-string">'/foo'</span>:{<br>                  <span class="hljs-attr">target</span>:<span class="hljs-string">'&lt;other_url&gt;'</span><br>              }<br>          },<br>      }<br>}<br><span class="hljs-comment">// defineConfig({ })</span><br><span class="hljs-keyword">const</span> { defineConfig } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@vue/cli-service'</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-comment">// 选项</span><br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// const port = 8080; // 端口号</span><br><span class="hljs-comment">// const IS_PRODUCTION = process.env.NODE_ENV == "production"; // 正式环境</span><br><span class="hljs-comment">// const CompressionPlugin = require("compression-webpack-plugin");</span><br><span class="hljs-comment">// const UglifyJsWebpackPlugin = require("uglifyjs-webpack-plugin");</span><br><span class="hljs-comment">/** key 是import 的包名，value 是CDN 为我们提供的全局变量名 */</span><br><span class="hljs-comment">// const externals = {</span><br><span class="hljs-comment">//  "ali-oss": "OSS"</span><br><span class="hljs-comment">// };</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span> = {<br>    <span class="hljs-comment">// 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath</span><br>    <span class="hljs-comment">// baseUrl: process.env.NODE_ENV === 'production' ? './' : '/'</span><br>    <span class="hljs-comment">// 项目中的public目录一般是部署在域名的根部，如果要用到public目录下的资源，需要配置publicPath。</span><br>    <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">'production'</span> ? <span class="hljs-string">'/public/'</span> : <span class="hljs-string">'./'</span>,<br>    <span class="hljs-comment">// 输出文件目录：在npm run build时，生成文件的目录名称  生产环境构建文件的目录</span><br>    <span class="hljs-attr">outputDir</span>: <span class="hljs-string">'dist'</span>,<br>    <span class="hljs-comment">// 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br>    <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">"assets"</span>,<br>    <span class="hljs-comment">// indexPath: 'test/home.html', // build之后生成的index.html的路径</span><br>    <span class="hljs-comment">// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度</span><br>    <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存，你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span><br>    <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 代码保存时进行eslint检测</span><br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// webpack-dev-server 相关配置</span><br>    <span class="hljs-comment">//在 multi-page 模式下构建应用。每个“page”应该有一个对应的 JavaScript 入口文件。其值应该是一个对象，对象的 key 是入口的名字，value 是：</span><br>     <span class="hljs-attr">pages</span>: {  <span class="hljs-comment">// 构建多页应用</span><br>        <span class="hljs-attr">index</span>: {<br>            <span class="hljs-comment">// page 的入口</span><br>            <span class="hljs-attr">entry</span>: <span class="hljs-string">'src/index/main.js'</span>,<br>            <span class="hljs-comment">// 模板来源</span><br>            <span class="hljs-attr">template</span>: <span class="hljs-string">'public/index.html'</span>,<br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.html'</span>,<br>            <span class="hljs-comment">// 当使用 title 选项时，</span><br>            <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>            <span class="hljs-attr">title</span>: <span class="hljs-string">'Index Page'</span>,<br>            <span class="hljs-comment">// 在这个页面中包含的块，默认情况下会包含</span><br>            <span class="hljs-comment">// 提取出来的通用 chunk 和 vendor chunk。</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">'chunk-vendors'</span>, <span class="hljs-string">'chunk-common'</span>, <span class="hljs-string">'index'</span>]<br>        },<br>        <span class="hljs-comment">// 当使用只有入口的字符串格式时，</span><br>        <span class="hljs-comment">// 模板会被推导为 `public/subpage.html`</span><br>        <span class="hljs-comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span><br>        <span class="hljs-comment">// 输出文件名会被推导为 `subpage.html`。</span><br>        <span class="hljs-attr">subpage</span>: <span class="hljs-string">'src/subpage/main.js'</span><br>    },<br>    <span class="hljs-attr">devServer</span>: {<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<span class="hljs-comment">// 端口</span><br>        <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">hotOnly</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 热更新   </span><br>        <span class="hljs-attr">proxy</span>: {  <span class="hljs-comment">// 使用代理 解决跨域问题</span><br>            [process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: {<br>                <span class="hljs-attr">target</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_URL</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">pathRewrite</span>: {<br>                  [<span class="hljs-string">"^"</span> + process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: <span class="hljs-string">""</span><br>                }<br>             }<br>            <span class="hljs-string">'/api'</span>: {<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">'http://47.100.47.3/'</span>,  <span class="hljs-comment">// 目标代理服务器地址</span><br>                <span class="hljs-attr">ws</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启代理，本地创建一个虚拟服务器 允许跨域</span><br>            },<br>            <span class="hljs-string">'/foo'</span>:{<br>                <span class="hljs-attr">target</span>:<span class="hljs-string">'&lt;other_url&gt;'</span><br>            }<br>        },<br>    },<br>}<br></code></pre></td></tr></tbody></table></figure><p>vue文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">// vue文件 组件使用三步 使用组件 导入组件 组件注册<br>&lt;template&gt;<br>  &lt;h2 class="red"&gt;Hello {{ msg }}&lt;/h2&gt;<br>&lt;hello&gt;&lt;/hello&gt; // 使用组件<br>&lt;/template&gt;<br>&lt;script&gt;<br>import hello from './componets/HelloWorld.vue'  // 导入组件<br>export default{<br>    name: 'World',<br>  components:{<br>      HelloWorld // 注册组件<br>    }, <br>    props:{  // props 参数 和 data 参数 <br>        msg:{<br>            type: String,  // 数据类型 String 是大写的<br>            default: "test msg"  //默认值<br>        }<br>    },<br>    methods:{<br>    },<br>    data(){<br>       return{<br>          msg:'test msg'<br>      }<br>    },<br>  watch:{},<br>  computed:{}<br>}<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)vuex</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vuex.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vuex.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><blockquote><ul><li><p>vuex 状态管理 也可以说是全局数据管理，就是把每个页面或者组件的data抽离处理挂载到store上，方便统一管理、组件之间的通信、多个状态变更</p></li><li><p>五大块：store (仓库、容器) state(数据、状态)、getters(全局计算属性)、mutaions(同步变更 commit)、action(异步变更 mutations)、moudle(抽离成模块)</p><ul><li>state(mapState) getters(mapGetters) mutations(mapMutations || commit )/mutation-type.js  actions(mapAction || context || { commit } || dispath)</li></ul></li><li><p>mapXxx([]/{}) 辅助函数：<code>全局$store</code>传递到组件的参数   获取多个的操作</p></li><li><p>mapXxx的使用位置 computed:{ mapState\mapGetters } methods:{ mapState\mapGetters }</p></li><li><p>store vs state vs mutations vs action vs getters ：</p><ul><li>store是一个仓库 {} 对象 挂载到全局<code>$store</code> </li><li>state是数据源也是全局的data  </li><li>getters可以理解为全局的计算属性(有缓存)  vs mutaions的区别是 (计算属性和方法的区别)</li><li>mutations和action可以理解为(全局的方法) 其中mutaions处理同步变更、action有两种功能处理异步变更、也可以处理多步mutations变更。其中 使用mutation的方法是commit()方法改变、 action是dispatch()触发</li></ul></li></ul></blockquote><h3 id="VuexAPI"><a href="#VuexAPI" class="headerlink" title="VuexAPI"></a><em>Vuex</em>API</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i vuex --save-dev<br>yarn add vuex<br></code></pre></td></tr></tbody></table></figure><blockquote><ul><li>state（状态）：存放状态(驱动应用的数据源)<ul><li>定义：<code>state:{}</code></li><li>使用：<ul><li>全局：==this.$store.state.xxx==</li><li>局部：==this.state.xxx== + <code>mapState 获取多个状态</code>  <ul><li><code>computed:mapState({}//[]) computed:( ...mapState({}//[]))</code> {} 别名 [] 多值</li></ul></li></ul></li></ul></li><li>getters 加工state成员给外界 计算属性  computer 计算属性<ul><li>定义:<code>getter:{ 值(state){  }}</code></li><li>使用：<ul><li>全局：==this.$store.getters.xxx==</li><li>局部：==this.getters.xxx== + <code>mapGetters </code></li></ul></li><li>this.getter</li></ul></li><li>mutations（变更） ：state 成员操作   ==&gt; Vuex  [commit方法]提交更改 (更改 Vuex state 的唯一方法,同步操作)<ul><li>定义:<code>mutations:{ [XXX](){} }</code></li><li>使用:<ul><li>全局：==this.$store.commit(‘xxx’)==</li><li>局部：==this.commit(‘xxx’)== + <code>mapMutations</code></li></ul></li></ul></li><li>actions（动作） ：状态变化 (异步操作) (异步操作处理方法,提交 mutation 来更改 state,而不是直接变更)<ul><li>定义<ul><li>处理muations: <code>actions:{ xxx//xxx为mutaions方法({commit}){ commit('xxx') } }</code></li><li>异步：<code>incrementAsync({commit}){setTimeout(()=&gt;{},3000) }</code></li></ul></li><li>使用:<ul><li>全局：==this.$store.dispatch(‘xxx’)==</li><li>局部：==this.dispatch(‘xxx’)== + ``mapActions`</li></ul></li></ul></li><li>工程化<ul><li>模块划分：modules（模块） ：模块化状态管理</li><li>文件划分：五文件划分</li></ul></li></ul></blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理（设计模式）模式</code>。它采用<code>集中式存储管理应用的所有组件的状态</code>，并以<code>相应的规则保证状态以一种可预测的方式发生变化</code>。(把组件中的data(状态)提取为全局变量 让每一个组件都能访问到  VueX是全局的变量)</p><ul><li>store 集中存储多个组件的状态（data）[整个应用所需的信息]</li><li>各个组件获取store组件内存储的数据</li></ul><p>单向数据流（State + Actions + View ）  ==&gt;   简单的store 模式   ==&gt;  状态管理模式  (State + Actions +Mutations)</p><p>view ：将 state映射到视图  ==&gt; 单向数据流</p><p>页面data从组件中分离出来方便状态之间共享 通过commit方式进行数据的变更方便追踪数据流</p><p><code>store.state</code> 来获取状态对象，以及通过 <code>store.commit</code> 方法触发状态变更</p><h3 id="State状态"><a href="#State状态" class="headerlink" title="State状态"></a>State状态</h3><p>vuex3(vue2)</p><ul><li>定义注册 main.js + store.js<ul><li>export default new Vuex.Store({ state:{ xxx } }) <code>导出Vuex.Store</code></li><li>import(./store) + new Vue({ store }) <code>导入 + 注册Vue</code></li></ul></li><li>使用：任何地方<ul><li>this.$store.state.xxx</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  store, <span class="hljs-comment">// 注册</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">h</span>) { <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>) }<br>}).$mount(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>({<br>  <span class="hljs-attr">state</span>: { <span class="hljs-comment">// 状态 存储全局data数据 == data</span><br>    <span class="hljs-attr">count</span>:<span class="hljs-number">100</span><br>  }<br>})<br><br><span class="hljs-comment">// 调用 </span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>  <br></code></pre></td></tr></tbody></table></figure><p>vuex4(vue3)</p><ul><li>import{createStore} +  export default createStore({ state })  <code>导出createStore</code></li><li>import{createApp} + import(store) + createApp(app).use(store).mount(‘#app’) <code>导入 createApp(App).use()</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>) <span class="hljs-comment">// 注册</span><br><br><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>({<br><span class="hljs-comment">// state getters mutations actions modules :{ }</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>组件使用state的方法</p><ul><li><p>state vs mapState({})  组件获取state的方法</p><ul><li><p>this.$store.state.count/state.count  获取单个state</p></li><li><p>mapState({}) 获取多个state mapState({ }) 获取多个状态的计算属性 函数返回一个对象 将他与局部计算属性混合使用 </p><ul><li><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p></li><li><p><code>mapState</code> 辅助函数帮助我们生成计算属性 映射 this.count 为 store.state.count 传递多个值到组件</p></li></ul></li></ul></li></ul><p>mapState()两种写法 computed：mapState() vs computed：{ …mapState() } 参数[]或{}</p><ul><li><code>computed：mapState({}//[])</code><ul><li>对象：<code>computed：mapState({ num: (state) =&gt; state.count, })</code></li><li>数组：<code>computed: mapState(['num1','num2']) 计算属性的名称与 state 的子节点名称相同时，我们也可以给 </code>mapState<code> 传一个字符串数组</code></li></ul></li><li><code>computed:{...mapState({}/[])}</code><ul><li>对象展开符：<code>computed:{ ...mapState(['num1','num2'])}</code>   更同一组件传递多个state</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">creatStore</span>({<br>  <span class="hljs-attr">state</span>:{<br>    <span class="hljs-attr">firstCount</span>:<span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">secondCount</span>:<span class="hljs-number">2000</span>,<br>    <span class="hljs-attr">secondCount</span>:<span class="hljs-number">3000</span><br>  }<br>})<br><br><br>&lt;h1&gt;xxx&lt;/h1&gt;<br><span class="hljs-comment">// ? 单个组件获取多个state 通过mapState</span><br><span class="hljs-comment">// xxx.vue</span><br><span class="hljs-keyword">import</span> { mapState } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{<br>  <span class="hljs-attr">computed</span>:{ <br>  <span class="hljs-title function_">xxx</span>(<span class="hljs-params"></span>){<br>      <span class="hljs-keyword">return</span> xxx<br>    }<br>  },<br>  <span class="hljs-attr">computed</span>:<span class="hljs-title function_">mapState</span>([<span class="hljs-string">'firstCount'</span>,<span class="hljs-string">'secondCount'</span>,<span class="hljs-string">'secondCount'</span>])<br>  <span class="hljs-attr">computed</span>:<span class="hljs-title function_">mapState</span>({<br>      <span class="hljs-attr">count</span>:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>  <span class="hljs-comment">//count:function(state){ return state.count  }</span><br>      <span class="hljs-attr">countAlias</span>:<span class="hljs-string">'count'</span>, <span class="hljs-comment">// 别名</span><br>      <span class="hljs-title function_">countPlusLocalState</span>(<span class="hljs-params">state</span>){  <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">countAlias</span>  }<br>  })<br>}<br><br><span class="hljs-comment">// 对象展开运算符</span><br><span class="hljs-attr">computed</span>:{<br>  <span class="hljs-title function_">localComputed</span>(<span class="hljs-params"></span>){ },<br>  ...<span class="hljs-title function_">mapState</span>({})<br>  ...<span class="hljs-title function_">mapState</span>([])<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="Getters计算属性"><a href="#Getters计算属性" class="headerlink" title="Getters计算属性"></a>Getters计算属性</h3><ul><li>getter  在 store 中定义“getter”（可以认为是 store 的计算属性 或者是公共的计算属性）。就像计算属性一样，getter 的返回值会根据<code>它的依赖被缓存起来</code>，且只有当它的依赖值发生了改变才会被重新计算 公共的计算属性 全局计算属性</li><li>定义<ul><li><code>getters:{ xxx: (state)=&gt; { return state.count }}</code></li><li><code>getters:{ xxx: (state,getters)=&gt; { return getters.length }}</code></li></ul></li><li>使用 <ul><li>this.$store.getters.xxx 全局store上的计算属性</li><li>getters.xxx mapGetters传递到组件</li></ul></li><li>传递<ul><li>mapGetters <code>传递</code> 辅助函数 将 store中的getter映射到局部计算属性<ul><li><code>computed:mapGetters({}//['xxx']) </code></li><li><code>computed:{ ...mapGetters({}//[]) }</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-attr">state</span>:{<br><span class="hljs-attr">todos</span>:[<br>     { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'...'</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> },<br>      { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'...'</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> }<br>]<br>},<br><span class="hljs-attr">getters</span>:{<br><span class="hljs-comment">// doneTodos 方法</span><br><span class="hljs-attr">doneTodos</span>:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> {  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)<br>}<br>}<br><span class="hljs-comment">// 接受其他 getter 作为第二个参数</span><br><span class="hljs-attr">getters</span>:{<br>doneTodosCount：(state,getters) =&gt; {<br><span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span><br>}<br>}<br><span class="hljs-comment">// 通过属性访问 </span><br>store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosX</span><br><br><span class="hljs-comment">// vue组件使用</span><br>computed：{  <span class="hljs-comment">// 使用</span><br><span class="hljs-title function_">doneTodosCount</span>(<span class="hljs-params"></span>){<br>        <span class="hljs-comment">// return this.$store.state.todos</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span> <span class="hljs-comment">// 所以用名和getter名一致</span><br>}<br>}<br><br><span class="hljs-comment">// 通过方法使用</span><br><span class="hljs-attr">getters</span>: {<br>  <span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> {<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)<br>  }<br>}  <br><span class="hljs-comment">// 通过方法访问时，每次都会去进行调用，而不会缓存结果</span><br>store.<span class="hljs-property">getters</span>.<span class="hljs-title function_">getTodoById</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// -&gt; { id: 2, text: '...', done: false }</span><br><br><span class="hljs-comment">// 使用多个计算属性</span><br><span class="hljs-keyword">import</span> { mapGetters } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{<br>    <span class="hljs-attr">computed</span>:{<br>        <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>        ...<span class="hljs-title function_">mapGetters</span>([ <span class="hljs-comment">// 下面没有试镜</span><br>        <span class="hljs-string">'doneTodosCount'</span>,  <span class="hljs-comment">// getters</span><br>        <span class="hljs-string">'anotherGetter'</span>,  <span class="hljs-comment">// getters</span><br>            <span class="hljs-comment">// 将一个 getter 属性另取一个名字，使用对象形式</span><br>            <span class="hljs-attr">donceCount</span>:<span class="hljs-string">'doneTodosCount'</span><br>        ])<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="mutations同步变更"><a href="#mutations同步变更" class="headerlink" title="mutations同步变更"></a>mutations同步变更</h3><ul><li>变更commit变更状态  同步函数</li></ul><p>定义</p><ul><li>SOME_MUTATTION(state,payload){  return xxx  } </li><li>SOME_MUTATTION:(state,payload) =&gt;{ return }</li><li><code>[SOME_MUTATTION](state,payload){ }</code>   常量名名加[]</li></ul><p>使用 methods:{ xxx(){ } }</p><ul><li><code>this.$store.commit('xxx')</code> 全局使用</li><li>``this.commit(‘xxx’,100)//({ type:xxx })//(‘xxx’,{})` 搭配mapMutaion局部使用</li></ul><p>传参</p><ul><li><p>mapMutaion </p><ul><li>使用多个值 使用mapMutations 辅助函数将组件中的methods 映射为 <code>store.commit</code> 调用（需要在根节点注入store）</li><li><code>methods:mapMutation(['','']) </code></li><li><code>methods:{ ...mapMutation([add:'increment']) }</code><ul><li>提交载荷（Payload）载荷（<code>传入额外的参数</code>） 载荷 == 参数</li></ul></li></ul></li><li><p>常量代替<code>Mutation 事件类型</code> <code>mutation-type.js</code>文件</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = {<br><span class="hljs-attr">increment</span>:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>++<br>  <span class="hljs-attr">increment</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>){ }<br>  <span class="hljs-attr">decrement</span>:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>--<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>({<br>  mutations<br>})<br></code></pre></td></tr></tbody></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 载荷是数值</span><br>store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">"commit"</span>,<span class="hljs-number">100</span>) <br><br><span class="hljs-comment">// 使用  载荷是对象 对象风格的提交方式有两种</span><br><span class="hljs-comment">// commit 样式一</span><br>store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">'increment'</span>,{<br><span class="hljs-attr">amount</span>:<span class="hljs-number">10</span><br>})<br><br><span class="hljs-comment">// 提交 mutation 的另一种方式是直接使用包含 `type` 属性的对象</span><br>store.<span class="hljs-title function_">commit</span>({<br><span class="hljs-attr">type</span>:<span class="hljs-string">'increment'</span>,<br><span class="hljs-attr">amount</span>:<span class="hljs-number">10</span><br>})<br></code></pre></td></tr></tbody></table></figure><ul><li>载荷（第二个参数）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 大多数情况下，载荷（参数）应该是一个对象，这样可以包含多个字段并且记录mutation会更易读</span><br><span class="hljs-attr">mutations</span>:{<br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state,payload</span>){<br>state.<span class="hljs-property">count</span> += payload.<span class="hljs-property">amount</span><br>}<br>}<br><span class="hljs-comment">// commit 样式一</span><br>store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">'increment'</span>,{<br><span class="hljs-attr">amount</span>:<span class="hljs-number">10</span><br>})<br><br><span class="hljs-attr">mutations</span>:{<br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state,n</span>){<br>state.<span class="hljs-property">count</span> += n<br>}<br>}<br>store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">"increment"</span>,<span class="hljs-number">10</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li>mapMutaion（传递多个Mutaion）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// mapMutations</span><br><span class="hljs-keyword">import</span> { mapMutations } <span class="hljs-keyword">from</span> <span class="hljs-string">'Vuex'</span><br><br><span class="hljs-attr">methods</span>:{<br>  ...<span class="hljs-title function_">mapMutations</span>([ <br>    <span class="hljs-string">'increment'</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span><br>    <span class="hljs-comment">// `mapMutations` 也支持载荷：</span><br>    <span class="hljs-string">'incrementBy'</span> <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span><br>  ]),<br>    ...<span class="hljs-title function_">mapMUtations</span>([<br>    <span class="hljs-attr">add</span>:<span class="hljs-string">'increment'</span> <span class="hljs-comment">//  b别名 将 `this.add()` 映射为 `this.$store.commit('increment')`</span><br>  ])<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>mutation-type 把mutation中的常量抽离出来</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// mutation-type.js 抽离常量</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SOME_MUTATTION</span> = <span class="hljs-string">'SOME_MUTATION'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ADD</span> = <span class="hljs-string">'ADD'</span><br><br><span class="hljs-comment">// mutation.js</span><br><span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">SOME_MUTATION</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'./mutation-type'</span> <span class="hljs-comment">// 导入常量</span><br><span class="hljs-attr">mutations</span>:{<br>  <span class="hljs-comment">// 使用 三种方式</span><br>  <span class="hljs-title function_">SOME_MUTATTION</span>(<span class="hljs-params">state,payload</span>){  <span class="hljs-keyword">return</span> xxx  } <br>  <span class="hljs-attr">SOME_MUTATTION</span>:<span class="hljs-function">(<span class="hljs-params">state,payload</span>) =&gt;</span>{ <span class="hljs-keyword">return</span> }<br>  [<span class="hljs-variable constant_">SOME_MUTATTION</span>](state,payload){ } 使用<span class="hljs-title class_">ES2015</span>风格的计算属性命名功能来使用一个常量作为函数名<br>  <span class="hljs-comment">// state.count = 1000</span><br>  [<span class="hljs-variable constant_">ADD</span>](state){ <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-number">100</span> }<br>}<br><br><span class="hljs-comment">// xxx.vue 使用</span><br><span class="hljs-keyword">import</span> { mapMutations } <span class="hljs-keyword">from</span> <span class="hljs-string">'Vuex'</span><br><br><span class="hljs-attr">method</span>:{<br>  <span class="hljs-comment">// 传递多个值</span><br>  ...<span class="hljs-title function_">mapMuations</span>({ <span class="hljs-attr">xxx</span>:<span class="hljs-string">'SOME_MUTATTION'</span><span class="hljs-comment">//别名,add:'ADD'  }/['SOME_MUTATTION']),</span><br>  <span class="hljs-attr">clickFuc</span>:<span class="hljs-function">()=&gt;</span> {  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(add)   }               <br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="Actions变更Mutaions异步"><a href="#Actions变更Mutaions异步" class="headerlink" title="Actions变更Mutaions异步"></a>Actions变更Mutaions异步</h3><p>Action的作用 提交mutations </p><p>Action 类似 mutation 不同在于</p><ul><li><code>Action提交的是mutation</code>而不是直接变更状态 变更mutaions  解决 mutation是同步函数的缺陷 </li><li>Action可以包含任意异步操作</li></ul><p>定义</p><ul><li><code>mutation:[increment](state){ return state.count++ }</code></li><li>action<ul><li>处理多步mutations<ul><li>context：<code>action:{ increment(context){ context.commit('increment') } }</code> context.commit 结构赋值</li><li>推荐：{commit}：<code>actions:{ increment:({ commit }){ commit('increment') } }</code></li></ul></li><li>处理异步操作<ul><li><code>incrementAsync({commit}){setTimeout(()=&gt;{},3000) }</code></li></ul></li></ul></li></ul><p>使用</p><ul><li><code>this.$store.dispatch('xxx')</code> 全局使用</li><li><code>this.dispatch.xxx()</code> 搭配mapActions局部使用</li></ul><p>传参</p><ul><li>mapActions<ul><li>Actions 支持同样的载荷方式和对象方式进行分发：</li><li><code>methods:{ ...mapActions({ }//[]) }  methods:mapActions({ }//[]) }</code></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>({<br><span class="hljs-attr">state</span>:{<br><span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>},<br><span class="hljs-attr">mutations</span>:{<br>[increment](state){  <br>state.<span class="hljs-property">count</span>++<br>}<br>},<br>  <br><span class="hljs-comment">// Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 `context.commit` 提交一个 mutation，或者通过 `context.state` 和 `context.getters` 来获取 state 和 getters  </span><br><span class="hljs-comment">// context</span><br><span class="hljs-attr">actions</span>:{<br><span class="hljs-title function_">increment</span>(<span class="hljs-params">context</span>){<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">'increment'</span>)<br>      <span class="hljs-comment">// mutation $store.commit('increment')</span><br>      <span class="hljs-comment">// action context.commit('increment')</span><br>}<br>}<br><span class="hljs-comment">// es2015</span><br>  <span class="hljs-attr">actions</span>:{<br>  <span class="hljs-attr">increment</span>:({ commit }){<br>  <span class="hljs-title function_">commit</span>(<span class="hljs-string">'increment'</span>)<br>}<br>}<br>})<br><br><span class="hljs-comment">// 分发Action  通过`store.dispath方法触发</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">'increment'</span>)<br><br><span class="hljs-comment">// `store.dispatch` 可以处理被触发的 action 的处理函数返回的 Promise，并且 `store.dispatch` 仍旧返回 Promise</span><br><span class="hljs-attr">action</span>:{ <span class="hljs-comment">// action 异步操作</span><br><span class="hljs-title function_">incrementAsync</span>(<span class="hljs-params">{commit}</span>){<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<br><span class="hljs-title function_">commit</span>(<span class="hljs-string">'increment'</span>)<br>},<span class="hljs-number">1000</span>)<br>}<br>}<br><br><span class="hljs-comment">// xxx.vue</span><br><span class="hljs-keyword">import</span> { mapActions } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{<br><span class="hljs-attr">methods</span>:{<br> ...<span class="hljs-attr">mapActions</span>:({<br>   <span class="hljs-string">'increment'</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span><br> }),<br>}<br>}<span class="hljs-string">`</span><br></code></pre></td></tr></tbody></table></figure><h3 id="vuex工程化"><a href="#vuex工程化" class="headerlink" title="vuex工程化"></a>vuex工程化</h3><h4 id="Module模块划分"><a href="#Module模块划分" class="headerlink" title="Module模块划分"></a>Module模块划分</h4><p>类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const moduleA = {<br>  state:() =&gt; ({...}),<br>  mutations:{...},<br>    actions:{ ... },<br>    getters:{ ... }<br>}<br>const store = new Vuex.Store({<br>    modules:{<br>        a: moduleA,<br>        b: moduleB<br>    }<br>})<br>store.state.a  --&gt; moduleA 的状态<br>store.state.b  --&gt; moduleB 的状态<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>({<br>  <span class="hljs-attr">strict</span>:<span class="hljs-literal">true</span><br><span class="hljs-attr">strict</span>:process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENE</span> !== <span class="hljs-string">'production'</span><br>})<br></code></pre></td></tr></tbody></table></figure><h4 id="五文件划分"><a href="#五文件划分" class="headerlink" title="五文件划分"></a>五文件划分</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">store/<br>--index.js<br>--getters.js<br>--actions.js<br>--mutations.js<br>--muations_type.js  // 该项为存放mutaions方法常量的文件<br>// 更复杂 功能模块划分<br>--module<br>----cart.js<br>----products.js<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mutaions 和 actions 层 负责将getter 的 计算属性 变更到 state 上<br>- 方法名(state,值){}<br>- `state.goods.totalPrice = this.getters.totalPrice`<br>- `this.commit(‘result’,’msg’)`<br>- state ==&gt; mutations 、actions  ==&gt;  getter<br></code></pre></td></tr></tbody></table></figure><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><h4 id="父子"><a href="#父子" class="headerlink" title="父子"></a>父子</h4><ul><li><code> 父子 子props父标签属性  子 props:["xxx"]  父 &lt;son :xxx="100"&gt;&lt;son&gt;</code></li></ul><h4 id="子父"><a href="#子父" class="headerlink" title="子父"></a>子父</h4>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过时的jquery，也能焕发光彩</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/jquery.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/jquery.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><ul><li>$.fn.jquery</li><li>$(function(){ }) window.onload = function(){ }</li><li><code>$("* # . tag &gt; ul li this")</code></li><li><code>$(this) 当前html元素</code></li><li>end(修复断链)</li><li>bind on delegate 绑定事件 用on<ul><li>bind(事件绑定 不推荐)[ <code>$().bind({ "click":function(){},"dbclick":function(){} }) $("#btn").bind("click moverover",function(){})</code> ]、<ul><li>unbind() 解绑事件</li></ul></li><li>delegate（”子级元素”，”事件类型”，事件处理函数 绑定事件 不推荐）<code>$("#dv").delegate("p",click,function(){</code><ul><li>undelegate() 解绑事件</li></ul></li><li>on(“事件类型”，”子级元素”，事件处理函数)<code>$().on("click",function(){ } $("").on("click","p",function(){</code><ul><li>off() 解绑事件</li></ul></li></ul></li><li>trigger triggerHandler 触发事件<ul><li>trigger 触发事件 <code>$("").trigger("click")</code> 会触发浏览器的默认行为，并执行事件</li><li>triggerHandler() 不会触发浏览器的默认行为，但是会执行事件</li></ul></li><li>事件对象<ul><li>event.delegateTarget 代码绑定的对象</li><li>event.currentTarget 绑定事件的对象</li><li>event.target 真正触发事件的对象</li></ul></li><li>each(fun(index,ele){}) 遍历</li><li>$.noConflict() 多库共存</li><li>取消事件冒泡+取消默认事件<ul><li>e.stoPropagation()  取消默认事件</li><li>event.preventDefault()  取消事件冒泡</li><li>事件冒泡：元素中有元素，这些元素都有相同的事件，一旦最里面的元素的事件触发 了，外面的所有的元素的相同的事件都会被触发 例如 元素A中有一个元素B，A和B都有点击事件，B点击事件触发，A点击事件自动触发</li><li>取消事件冒泡 JS 最里面的元素设置 return false; 俩种作用 取消事件冒泡+取消默认事件</li></ul></li></ul><p>Event</p><ul><li><code>$().click(function(){ })</code></li><li>click、dbclick、mouseenter(leave,down,up)、hover</li><li>keypress(down,up)、e.keyCore</li><li>sumbit、change、focus、blur</li><li>load(元素已加载) resize scroll/scrollTop/scrolLeft、ready</li><li>offset</li></ul><p>Animate</p><ul><li>hide(slow/normal/fast)/hide(time,func(){ })、show、toggle(切换)</li><li>fadeIn/Out出/Toggle(speed,callback)、fadeTo(spead,opacity透明度,callback) 淡入</li><li>slideDown向下滑动元素/Up上/Toggle(speed,callback)  滑动</li><li>animate({params},speed,calback)、</li><li>stop(stopAll,goToEnd) 停止动画</li></ul><p>Element</p><ul><li>text、html、val(表单字段)、attr(键:值/键自定义DOM属性)、prop(固有属性)</li><li>ap/pre + pend(尾)、prepend(头)（元素内）</li><li>after、before（元素外）</li><li>父.remove(移除自身 早上 子)、empty(清空元素中的子元素)</li></ul><p>CSS</p><ul><li>add/remove/toggleClass、hasClass</li><li><code>css({"":"","":""})，css("","")</code></li></ul><p>Size</p><ul><li>width/height、innerWidth/Height(包含padding)、outerWidth/Height(包含padding和border)</li></ul><p>Each</p><ul><li>parent(直接父)、parents(所有父)、parentsUntil 父</li><li>children(所有子)、find（被选元素的后代元素，一路向下直到最后一个后代） 子</li><li>siblings （所有兄弟）</li><li>next、nextAll、nextUnit 之后</li><li>prev、prevAll、prevUntil(之间)  之前</li><li>first、last、eq(等于)、gt(大于)、lt(小于)、filter、not方法与 filter() 相反、index、even/odd</li></ul><p>AJAX</p><ul><li>load(从服务器加载数据，并把返回的数据放入被选元素)、$.get、post、<code>$.getJsonp</code></li></ul><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p><a href="https://www.jquery123.com/">jQuery API 中文文档 | jQuery 中文网</a></p><p><a href="http://www.w3school.me/jquery/jquery-ref-selectors.html">jQuery 参考手册</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$.fn.jquery<br>$(this) == this<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td><code>click</code></td><td><code>keypress 键被按下</code></td><td><code>submit 提交</code></td><td><code>load 指定的元素已加载</code></td></tr><tr><td><code>dbclick</code></td><td><code>keydown 按下的过程</code></td><td><code>change 元素的值改变,仅适用于表单字段</code></td><td><code>resize 调整浏览器窗口大小</code></td></tr><tr><td><code>mouseenter 鼠标进入</code></td><td><code>keyup 键被松开</code></td><td><code>focus 获得焦点</code></td><td><code>scroll 滚动指定的元素</code></td></tr><tr><td><code>mouseleave 鼠标离开</code></td><td></td><td><code>blur 失去焦点</code></td><td><code>unload 方法在 jQuery 版本 1.8 中被废弃，在 3.0 版本被移除。</code></td></tr><tr><td><code>mousedown 鼠标按下</code></td><td></td><td></td><td></td></tr><tr><td><code>mouseup 鼠标松开</code></td><td></td><td></td><td></td></tr><tr><td><code>hover</code></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>显示、隐藏</th><th>作用</th></tr></thead><tbody><tr><td><code>hide(slow) / hide(time)</code></td><td>隐藏</td></tr><tr><td><code>show</code></td><td>显示</td></tr><tr><td><code>toggle</code></td><td>切换hide()和show()</td></tr></tbody></table><table><thead><tr><th>淡入淡出 fade in out toggle</th><th>作用</th></tr></thead><tbody><tr><td><code>fadeIn(speed,callback)</code></td><td>淡入已隐藏的元素</td></tr><tr><td><code>fadeOut(speed,callback)</code></td><td>淡出可见元素</td></tr><tr><td><code>fadeToggle(speed,callback)</code></td><td>fadeIn() 与 fadeOut() 方法之间进行切换</td></tr><tr><td><code>fadeTo(speed,opacity,callback)</code></td><td>“slow”、”fast” 或毫秒，允许渐变为给定的不透明度（值介于 0 与 1 之间）</td></tr></tbody></table><table><thead><tr><th>滑动元素 slide down up toggle</th><th>作用</th></tr></thead><tbody><tr><td><code>slideDown(speed,callback)</code></td><td>向下滑动元素</td></tr><tr><td><code>slideUp(speed,callback)</code></td><td>向上滑动元素</td></tr><tr><td><code>slideToggle(speed,callback)</code></td><td>slideDown() 与 slideUp() 方法之间进行切换</td></tr></tbody></table><table><thead><tr><th>动画</th><th>作用</th></tr></thead><tbody><tr><td><code>animate({params},speed,calback)</code></td><td>动画效果（可以操作多个属性，使用相对值，使用预定义的值，使用队列功能）</td></tr><tr><td><code>stop(stopAll,goToEnd)</code></td><td>停止动画</td></tr></tbody></table><table><thead><tr><th>修改文本</th><th>作用</th></tr></thead><tbody><tr><td><code>text()</code></td><td>设置或返回所选元素的文本内容</td></tr><tr><td><code>html()</code></td><td>设置或返回所选元素的内容</td></tr><tr><td><code>val()</code></td><td>设置或返回表单字段的值</td></tr><tr><td><code>attr()</code></td><td>HTML 元素我们自己自定义的 DOM 属性</td></tr><tr><td><code>prop()</code></td><td>HTML 元素本身就带有的固有属性</td></tr></tbody></table><table><thead><tr><th>插入内容</th><th>作用</th></tr></thead><tbody><tr><td><code>append()</code></td><td>结尾插入内容</td></tr><tr><td><code>prepend()</code></td><td>元素开头插入内容</td></tr><tr><td><code>after()</code></td><td>被选元素之后插入内容</td></tr><tr><td><code>before()</code></td><td>被选元素之前插入内容</td></tr></tbody></table><ul><li>append/prepend 是在选择元素内部嵌入。</li><li>after/before 是在元素外面追加。</li></ul><table><thead><tr><th>删除元素</th><th>作用</th></tr></thead><tbody><tr><td><code>remove()</code></td><td>删除被选元素（及其子元素）</td></tr><tr><td><code>empty()</code></td><td>从被选元素中删除子元素</td></tr></tbody></table><table><thead><tr><th>操作css</th><th>作用</th></tr></thead><tbody><tr><td><code>addClass()</code></td><td>向被选元素添加一个或多个类</td></tr><tr><td><code>removeClass()</code></td><td>从被选元素删除一个或多个类</td></tr><tr><td><code>toggleClass()</code></td><td>对被选元素进行添加/删除类的切换操作</td></tr><tr><td><code>css({"":"","":""})，css("","")</code></td><td>设置或返回样式属性</td></tr></tbody></table><img src="https://www.runoob.com/images/img_jquerydim.gif" alt="jQuery Dimensions" style="zoom:67%;"><table><thead><tr><th>尺寸</th><th>作用</th></tr></thead><tbody><tr><td>width()</td><td>设置或返回元素的宽度（不包括内边距、边框或外边距</td></tr><tr><td>height()</td><td>设置或返回元素的高度（不包括内边距、边框或外边距</td></tr><tr><td>innerWidth()</td><td>返回元素的宽度（包括内边距） +  padding</td></tr><tr><td>innerHeight()</td><td>返回元素的高度（包括内边距）</td></tr><tr><td>outerWidth()</td><td>返回元素的宽度（包括内边距和边框）+ padding + border</td></tr><tr><td>outerHeight()</td><td>返回元素的宽度（包括内边距和边框）</td></tr></tbody></table><table><thead><tr><th>遍历</th><th>作用</th></tr></thead><tbody><tr><td>向上遍历</td><td>parent()</td></tr><tr><td>parent()</td><td>方法返回被选元素的直接父元素</td></tr><tr><td>parents()</td><td>方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 <code>(&lt;html&gt;)</code></td></tr><tr><td>parentsUntil()</td><td>方法返回介于两个给定元素之间的所有祖先元素<code>$("span").parentsUntil("div");</code></td></tr><tr><td>向下遍历</td><td></td></tr><tr><td>children()</td><td>方法返回被选元素的所有直接子元素</td></tr><tr><td>find()</td><td>方法返回被选元素的后代元素，一路向下直到最后一个后代。</td></tr><tr><td>同胞</td><td></td></tr><tr><td>之前</td><td></td></tr><tr><td>siblings()</td><td>返回被选元素的所有同胞元素</td></tr><tr><td>next()</td><td>返回被选元素的下一个同胞元素</td></tr><tr><td>nextAll()</td><td>返回元素的所有跟随的同胞元素</td></tr><tr><td>nextUnit()</td><td>返回介于两个给定参数之间的所有跟随的同胞元素</td></tr><tr><td>之后</td><td></td></tr><tr><td>prev()</td><td>返回前面的同胞元素</td></tr><tr><td>prevAll()</td><td>返回前面所有的同胞元素</td></tr><tr><td>prevUntil()</td><td>返回介于两个给定参数之间的所有跟随的同胞元素</td></tr></tbody></table><table><thead><tr><th>过滤</th><th></th></tr></thead><tbody><tr><td>first()</td><td>首个元素</td></tr><tr><td>last()</td><td>最后一个元素</td></tr><tr><td>eq()</td><td>返回被选元素中带有指定索引号的元素</td></tr><tr><td>filter()</td><td>允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回</td></tr><tr><td>not()</td><td>返回不匹配标准的所有元素。</td></tr></tbody></table><table><thead><tr><th>Ajax</th><th></th></tr></thead><tbody><tr><td>load()</td><td></td></tr><tr><td>get()</td><td>从服务器获得（取回）数据，从指定的资源请求数据</td></tr><tr><td>post()</td><td>也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据，向指定的资源提交要处理的数据，<code>向服务器提交数据</code></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 解决问题 在当前 页面下发送 指定网站的请求 </span><br><span class="hljs-comment">// 发起ajax请求 load</span><br>$(<span class="hljs-string">'#content &gt; div:nth-child(14) &gt; div'</span>).<span class="hljs-title function_">load</span>(<span class="hljs-string">'http://120.78.149.188:3000/search?keywords=%E6%B5%B7%E9%98%94%E5%A4%A9%E7%A9%BA'</span>)<br><br><span class="hljs-comment">//  $.get(URL,callback);</span><br><span class="hljs-comment">//  $.post(URL,data,callback);</span><br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">"http://120.78.149.188:3000/search?keywords=%E6%B5%B7%E9%98%94%E5%A4%A9%E7%A9%BA"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data,status</span>){<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>})<br><br>$.<span class="hljs-title function_">post</span>(<span class="hljs-string">"http://120.78.149.188:3000/search"</span>,{ keywords : <span class="hljs-string">"你的名字"</span> },<span class="hljs-keyword">function</span>(<span class="hljs-params">data,status</span>){<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>})<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>noConflict()</td><td>jQuery 使用 $ 符号作为 jQuery 的简写</td></tr></tbody></table><table><thead><tr><th>JSONP</th><th></th></tr></thead><tbody><tr><td>JSONP</td><td>Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需要服务器端配合</span><br>$.<span class="hljs-title function_">getJSOP</span>(<span class="hljs-string">'https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?'</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>){<br><br>});<br></code></pre></td></tr></tbody></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><a href="https://code.jquery.com/">jQuery CDN</a></p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>jQuery是一个轻量级的”写的少，做的多”的JavaScript库</li></ul><h3 id="常见的js库"><a href="#常见的js库" class="headerlink" title="常见的js库"></a>常见的js库</h3><ul><li>Prototype、YUI（网络反响一般）、Dojo、ExtJS、jQuery等</li><li>这些库对JavaScript进行了封装，简化了开发。</li></ul><h3 id="为什么要学习JQuery"><a href="#为什么要学习JQuery" class="headerlink" title="为什么要学习JQuery"></a>为什么要学习JQuery</h3><ul><li>DOM中一个简单的功能需要大量的代码、兼容的问题很多、代码的容错性很差、window.onload也只能有一个。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>写的少，做的多</li><li>很好的解决了不同浏览器的兼容问题（IE 6.0+，FF 2+，Safari 3.0+，Opera 9.0+，Chrome）css还是有问题的对于不同控件具有统–的操作方式</li><li>体积小（几十KB）、使用简单方便</li><li>链式编程<code>$("#div1").draggble().show().hide().fly()</code></li><li>隐式迭代</li><li>插件丰富、开源、免费</li><li>jQuery兼容于所有主流浏览器, 包括Internet Explorer 6!</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ul><li>普通版 开发环境</li><li>压缩版 min.js 生产环境<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js"</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure>查看jquery版本<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($.fn.<span class="hljs-property">jquery</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install jquery<br></code></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jq = <span class="hljs-built_in">require</span>(<span class="hljs-string">'jquery'</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jq);<br></code></pre></td></tr></tbody></table></figure><h3 id="顶级对象"><a href="#顶级对象" class="headerlink" title="顶级对象"></a>顶级对象</h3><ul><li>DOM中的顶级对象：docuemnt—页面中的顶级对象 (docuemnt中的属性和方法)</li><li>BOM中的顶级对象：window—浏览器中的项级对象 (window是浏览器中的属性和方法)  window.document </li><li>jQuery的项级对象：jQuery—  ($点出来的是jQuery中的方法 )<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Javascript</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) { }<br>jQuery的代码---和<span class="hljs-variable constant_">DOM</span>中的<span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>事件相同的<br><span class="hljs-comment">//页面中所有的内容加载完毕后才触发，标签，图片文字内容....</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">load</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"123"</span>);<br>});<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">load</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"456 "</span>);<br>});<br><span class="hljs-comment">//第二种页面加载的事件的写法---都是方法了</span><br><span class="hljs-comment">//页面中的基本的标签加载完毕后就可以触发了</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-property">ready</span> == $<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"456"</span>);<br>});<br><br><span class="hljs-title function_">jQuery</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>})<br><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>})<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="Jquery对象和DOM对象互转"><a href="#Jquery对象和DOM对象互转" class="headerlink" title="Jquery对象和DOM对象互转"></a>Jquery对象和DOM对象互转</h3><p>DOM对象转jQuery对象操作方便，毕竟JQuery中方法都是封装好了的，而且兼容问题解决的很好，代码少，方便。Jquery对象转DOM对象，因为JQuery中文件–直在更新，很多东西都是随着使用而进行封装和升级，不太可能把所有dom中用到的进行封装，还有很多未知的兼容问题没有封装进去，所以，有的时候JQuery中不能解决的问题，还需要原生的js代码来解决，所以，jquery对象有的时候需要转成dom对象来进行操作</p><ul><li>DOM对象转jQuery对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// $（DOM的对象）----&gt;jQuery对象</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'btn'</span>);<br>    $(btnObj).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        <span class="hljs-comment">// $(this)</span><br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"red"</span>);<br>    });<br>};<br></code></pre></td></tr></tbody></table></figure><ul><li>jQuery对象转DOM对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//$（"#btn"）[0]---&gt;DOM对象</span><br><span class="hljs-comment">//$（"#btn"）.get（0）---DOM对象</span><br><span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'btn'</span>); <span class="hljs-comment">//DOM对象</span><br><span class="hljs-keyword">var</span> obj = $(btnObj).<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">//DOM对象</span><br><span class="hljs-keyword">var</span> obj = $(btnObj)[<span class="hljs-number">0</span>] <span class="hljs-comment">//DOM对象</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    $(<span class="hljs-string">"#btn"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"yellow"</span>);<br>    });<br>});<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    $(<span class="hljs-string">"#btn"</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">onclick</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"yellow"</span>);<br>    });<br>});<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// window.onload = function () {</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'btn'</span>);<br><span class="hljs-comment">//     btn.onclick = function () {</span><br><span class="hljs-comment">//         this.style.backgroundColor = "red";</span><br><span class="hljs-comment">//     }</span><br><span class="hljs-comment">// }</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    $(<span class="hljs-string">'#btn'</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"red"</span>);<br>    });<br>});<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">// Js</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'btn'</span>)<br>    btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        <span class="hljs-keyword">if</span> (btn.<span class="hljs-property">value</span> == <span class="hljs-string">"关灯"</span>) {<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">"black"</span><br>            btn.<span class="hljs-property">value</span> = <span class="hljs-string">"开灯"</span><br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">"white"</span><br>            btn.<span class="hljs-property">value</span> = <span class="hljs-string">"关灯"</span><br>        }<br>    }<br>}<br>&lt;script&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    $(<span class="hljs-string">"#btn"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>() == <span class="hljs-string">"关灯"</span>) {<br>            $(<span class="hljs-string">"body"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"black"</span>)<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">"开灯"</span>)<br>        } <span class="hljs-keyword">else</span> {<br>            $(<span class="hljs-string">"body"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>, <span class="hljs-string">"white"</span>)<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">"关灯"</span>)<br>        }<br>    });<br>});<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p><strong>document.body.style.backgroundColor = “white”</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">val</span>()方法---&gt;获取按钮的value属性的值<br>.<span class="hljs-title function_">val</span>(<span class="hljs-string">"内容"</span>); 是设置按钮的value属性的值<br>$(<span class="hljs-variable language_">this</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="JavaScript选择器"><a href="#JavaScript选择器" class="headerlink" title="JavaScript选择器"></a>JavaScript选择器</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据id获取元素</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"id的值"</span>);<br><span class="hljs-comment">// 根据标签的名字获取元素多个</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(“标签的名字”);<br><span class="hljs-comment">// 根据name属性的值获取元素</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(“name属性的值<span class="hljs-string">");</span><br><span class="hljs-string">// 根据的是类样式的名字来获取元素，                           </span><br><span class="hljs-string">document.getElementsByClassName("</span>类样式的名字<span class="hljs-string">")，</span><br></code></pre></td></tr></tbody></table></figure><h3 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h3><table><thead><tr><th align="center">符号</th><th align="center">选择器</th></tr></thead><tbody><tr><td align="center"><code>$("*")</code></td><td align="center">选取所有元素</td></tr><tr><td align="center"><code>$(".class")</code></td><td align="center">类选择器</td></tr><tr><td align="center"><code>$("#id")</code></td><td align="center">id选择器</td></tr><tr><td align="center"><code>$("tag")</code></td><td align="center">标签选择器</td></tr><tr><td align="center"><code>$(li.cls)、$("p.intro")</code></td><td align="center">标签+类选择器(选取 class 为 intro 的 <p> 元素)</p></td></tr><tr><td align="center"><code>$(span,li,div)</code></td><td align="center">多条件选择器</td></tr><tr><td align="center"><code>$("#dv li") 或者$("ul li ")</code></td><td align="center">层次选择器：后代选择器（子元素中元素子，仔仔，孙）.</td></tr><tr><td align="center"><code>$("#ul&gt;li") 或者$("div&gt;span") 或者$(".cls&gt;li")</code></td><td align="center">子代选择器（直接的所有子元素，儿子）.</td></tr><tr><td align="center"><code>$(this)</code></td><td align="center">选取当前 HTML 元素</td></tr><tr><td align="center"><code>eq() 等于索引</code>、<code>gt() 大于索引</code>、<code>lt() 小于索引</code></td><td align="center">索引选择器<code>索引值从0开始算</code></td></tr><tr><td align="center"><code>index()</code></td><td align="center">获取索引值</td></tr><tr><td align="center"><code>:even()</code>、<code>:odd()</code></td><td align="center">奇数、偶数</td></tr></tbody></table><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="遍历DOM"><a href="#遍历DOM" class="headerlink" title="遍历DOM"></a>遍历DOM</h3><p>jQuery 遍历，用于根据其相对于其他元素的关系来查找（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。<br>jquery 提供了多种遍历DOM方法</p><ul><li>遍历方法中最大的种类是树遍历<code>tree-traversal</code></li></ul><h3 id="祖先：向上遍历DOM树"><a href="#祖先：向上遍历DOM树" class="headerlink" title="祖先：向上遍历DOM树"></a>祖先：向上遍历DOM树</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>parent()</code></td><td>返回被选元素的直接父元素</td></tr><tr><td><code>parents()</code></td><td>方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素<code>(&lt;html&gt;)</code></td></tr><tr><td><code>parentUntil()</code></td><td>返回介于两个给定元素之间的所有祖先元素</td></tr><tr><td><code>parents()</code>使用可选参数对过滤祖先元素的搜索</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"span"</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">"ul"</span>) <span class="hljs-comment">// 返回所有&lt;span&gt;元素的祖先，并且它是&lt;ul&gt;父元素 </span><br><span class="hljs-comment">// 选中ul的父元素</span><br></code></pre></td></tr></tbody></table></figure><p><code>parentUntil()</code>方法返回介于两个给定元素之间的所有祖先元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"span"</span>).<span class="hljs-title function_">parentUntil</span>(<span class="hljs-string">"div"</span>) <span class="hljs-comment">// &lt;span&gt; 与 &lt;div&gt;之间的所有祖先元素</span><br></code></pre></td></tr></tbody></table></figure><h3 id="后代：向下遍历DOM树"><a href="#后代：向下遍历DOM树" class="headerlink" title="后代：向下遍历DOM树"></a>后代：向下遍历DOM树</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>children()</code></td><td>返回被选元素的所有<code>直接子元素(一个)</code></td></tr><tr><td><code>find()</code></td><td>返回被选元素的<code>后代元素</code>，一路向下直到最后一个后代</td></tr><tr><td><code>children()</code>使用可选参数来过滤对子元素的搜索</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">"p.1"</span>)<br></code></pre></td></tr></tbody></table></figure><p><code>find()</code>找所有的后代元素<br>返回后代的指定元素<code>span</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">"span"</span>)<br></code></pre></td></tr></tbody></table></figure><p>返回后代的所有元素<code>*</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">"*"</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="兄弟：遍历同级元素"><a href="#兄弟：遍历同级元素" class="headerlink" title="兄弟：遍历同级元素"></a>兄弟：遍历同级元素</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>siblings()</code></td><td>当前元素的所有兄弟元素</td></tr><tr><td>之后</td><td></td></tr><tr><td><code>next()</code></td><td>当前元素之后的紧邻着的第一个兄弟元素（下一个兄弟元素）</td></tr><tr><td><code>nextAll()</code></td><td>当前元素之后的所有兄弟元素</td></tr><tr><td><code>nextUntil()</code></td><td>返回介于两个给定参数之间的所有跟随的同胞元素。</td></tr><tr><td>之前</td><td></td></tr><tr><td><code>prev()</code></td><td>当前元素之前的紧邻着的兄弟元素（上一个兄弟元素）</td></tr><tr><td><code>prevAll()</code></td><td>当前元素之前的所有兄弟元素</td></tr><tr><td><code>PrevUntil()</code></td><td>返回介于两个给定参数之间的所有跟随的同胞元素。</td></tr><tr><td><code>silbings()</code>可以使用可选参数来过滤对兄弟元素的搜索</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"> $(<span class="hljs-string">"h2"</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">"p"</span>);<br><span class="hljs-comment">// 返回属于 &lt;h2&gt; 的同胞元素的所有 &lt;p&gt; 元素</span><br></code></pre></td></tr></tbody></table></figure><p><code>nextUntil()</code> 方法返回介于两个给定参数之间的所有跟随的同胞元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"h2"</span>).<span class="hljs-title function_">nextUntil</span>(<span class="hljs-string">"h6"</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="过滤：遍历过滤DOM树元素"><a href="#过滤：遍历过滤DOM树元素" class="headerlink" title="过滤：遍历过滤DOM树元素"></a>过滤：遍历过滤DOM树元素</h3><ul><li>not() 方法与 filter() 相反</li><li>eq() <code>索引编号从0开始</code><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>first()</code></td><td>首个元素</td></tr><tr><td><code>last()</code></td><td>最后一个元素</td></tr><tr><td><code>eq()</code></td><td>返回被选元素中带有指定索引号的元素<code>索引编号从0开始</code></td></tr><tr><td><code>filter()</code></td><td>方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</td></tr><tr><td><code>not()</code></td><td>返回不匹配标准的所有元素</td></tr></tbody></table></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th align="center">方法名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>.text()</code></td><td align="left">获取这个元素中的文字内容.text(“内容”) 设置值<br>相当于DOM中的innerText相当于DOM中的innerText或者是textContent</td></tr><tr><td align="center"><code>.html()</code></td><td align="left">设置标签中间显示其他标签及内容，类似于innerHTML</td></tr><tr><td align="center"><code>val()</code></td><td align="left">设置input标签中value的值，类似于value</td></tr><tr><td align="center"><code>.css()</code></td><td align="left">设置元素的样式，类似于style里面可以直接写键值对的方式</td></tr><tr><td align="center"><code>show()</code></td><td align="left">显示</td></tr><tr><td align="center"><code>hide()</code></td><td align="left">隐藏</td></tr><tr><td align="center"><code>toggle()</code></td><td align="left">切换 hide() 和 show() 方法</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">css</span>({<span class="hljs-string">"width"</span>:<span class="hljs-string">"300px"</span>,<span class="hljs-string">"height"</span>:<span class="hljs-string">"200px"</span>,})<br></code></pre></td></tr></tbody></table></figure><ul><li>隐藏/显示</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).<span class="hljs-property">hide</span>/show/<span class="hljs-title function_">toggle</span>(speed,callback);<br><span class="hljs-comment">// speed 参数规定隐藏/显示的速度,(slow 、fast、毫秒)</span><br></code></pre></td></tr></tbody></table></figure><h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><h3 id="获取内容和属性"><a href="#获取内容和属性" class="headerlink" title="获取内容和属性"></a>获取内容和属性</h3><h4 id="获得内容-text-、html-以及-val"><a href="#获得内容-text-、html-以及-val" class="headerlink" title="获得内容 - text()、html() 以及 val()"></a>获得内容 - text()、html() 以及 val()</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>text()</code></td><td><code>文本内容</code></td></tr><tr><td><code>html()</code></td><td><code>HTML标签</code></td></tr><tr><td><code>val()</code></td><td><code>表单字段</code></td></tr></tbody></table><h4 id="设置属性获取属性-attr-和-prop"><a href="#设置属性获取属性-attr-和-prop" class="headerlink" title="设置属性获取属性 - attr() 和 prop()"></a>设置属性获取属性 - attr() 和 prop()</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>attr()</code></td><td>属性值(元素自定义的 DOM 属性)</td></tr><tr><td><code>prop()</code></td><td>(元素本身就带有的固有属性)</td></tr><tr><td><code>attr() vs prop()</code></td><td></td></tr></tbody></table><ul><li><code>prop()</code>HTML 元素本身就带有的固有属性( IDE 里能够智能提示出的属性，这些就叫做固有属性。)，使用 <strong>prop</strong> 方法。<ul><li>如果有相应的属性，返回指定属性值。</li><li>如果没有相应的属性，返回值是空字符串。</li></ul></li><li><code>attr() </code>HTML 元素自定义的 DOM 属性，使用 <strong>attr</strong> 方法。<ul><li>如果有相应的属性，返回指定属性值。</li><li>如果没有相应的属性，返回值是 undefined。</li></ul></li><li>具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#id"</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">"href"</span>)<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="设置内容和属性"><a href="#设置内容和属性" class="headerlink" title="设置内容和属性"></a>设置内容和属性</h3><h4 id="设置内容"><a href="#设置内容" class="headerlink" title="设置内容"></a>设置内容</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>text()</code></td><td>设置或返回所选元素的<code>文本内容</code></td></tr><tr><td><code>html()</code></td><td>设置或返回所选<code>元素的内容（包括 HTML 标记）</code></td></tr><tr><td><code>val()</code></td><td>设置或返回<code>表单字段</code>的值</td></tr></tbody></table><h4 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h4><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>attr()</code></td><td>设置/改变属性值</td></tr><tr><td><code>text()、html()、val()的回调函数</code></td><td></td></tr><tr><td>回调函数有两个参数：</td><td></td></tr></tbody></table><ul><li>被选元素列表中当前元素的下标，</li><li>原始（旧的）值。然后以函数新值返回您希望使用的字符串。<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#test1"</span>).<span class="hljs-property">text</span>/html/val (<span class="hljs-keyword">function</span>(<span class="hljs-params">i,origText</span>){<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">"旧文本: "</span> + origText + <span class="hljs-string">" 新文本: Hello world! (index: "</span> + i + <span class="hljs-string">")"</span>; <br>});<br></code></pre></td></tr></tbody></table></figure><code>attr()</code> 允许您同时设置多个属性<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"button"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    $(<span class="hljs-string">"#app"</span>).<span class="hljs-title function_">attr</span>({<br>        <span class="hljs-string">"href"</span> : <span class="hljs-string">"http://www.baidu.com/jquery"</span>,<br>        <span class="hljs-string">"title"</span> : <span class="hljs-string">"jQuery 教程"</span><br>    });<br>});<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>元素内 <code>ap/pre-pend</code></td><td>当前元素内(标签内)</td></tr><tr><td><code>append()</code></td><td>在被选元素的结尾插入内容</td></tr><tr><td><code>prepend()</code></td><td>在被选元素的开头插入内容</td></tr><tr><td>元素外</td><td>当前元素外(标签外)</td></tr><tr><td><code>after()</code></td><td>在被选元素之后插入内容</td></tr><tr><td><code>before()</code></td><td>在被选元素之前插入内容</td></tr><tr><td>通过<code>append() 和 prepend()</code>添加多个HTML元素</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> txt1 = <span class="hljs-string">"&lt;p&gt;文本一&lt;/p&gt;"</span><br><span class="hljs-comment">// jQuery 创建HTML</span><br><span class="hljs-keyword">var</span> txt2 = $(<span class="hljs-string">"&lt;p&gt;&lt;/p&gt;"</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">"文本二"</span>)<br><span class="hljs-comment">// javascript 创建HTML</span><br><span class="hljs-keyword">var</span> txt3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"p"</span>);<br>txt3.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">"文本三"</span><br>$(<span class="hljs-string">"body"</span>).<span class="hljs-property">append</span>/<span class="hljs-title function_">prepend</span>(txt1,txt2,txt3)<br></code></pre></td></tr></tbody></table></figure><p>通过 <code>after() </code>和`` before() `方法添加若干新元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> txt1 = <span class="hljs-string">"&lt;p&gt;文本一&lt;/p&gt;"</span><br><span class="hljs-comment">// jQuery 创建HTML</span><br><span class="hljs-keyword">var</span> txt2 = $(<span class="hljs-string">"&lt;p&gt;&lt;/p&gt;"</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">"文本二"</span>)<br><span class="hljs-comment">// javascript 创建HTML</span><br><span class="hljs-keyword">var</span> txt3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"p"</span>);<br>txt3.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">"文本三"</span><br>$(<span class="hljs-string">"body"</span>).<span class="hljs-property">ap</span>/<span class="hljs-title function_">prepend</span>(txt1,txt2,txt3)<br></code></pre></td></tr></tbody></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>remove()</code></td><td>删除被选元素（及其子元素）</td></tr><tr><td><code>empty()</code></td><td>从被选元素中删除子元素（删除当前元素下的所有子元素）</td></tr><tr><td><code>remove()</code> 方法也可接受一个参数，允许您对被删元素进行过滤。</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">'p'</span>).<span class="hljs-title function_">remove</span>(<span class="hljs-string">".italic"</span>)<br><span class="hljs-comment">// 删除p元素下的子元素 .italic </span><br></code></pre></td></tr></tbody></table></figure><p>jQuery中创建元素及追加元素</p><p>DOM中可以动态创建元素：document.createElement（”标签的名字”）；</p><p>jQuery中同样可以创建元素标签并且返回的就是jQuery对象，可以直接调用方法进行使用</p><p>append方法用来在元素的<strong>末尾追加元素</strong>（最后一 个子节点）。增加元素末尾（儿子)</p><p>prepend，<strong>在元素的开始添加元素（第一个子节点）。增加元素开始儿子）</strong></p><p>after，在元素之后添加元素（添加兄弟）增加元素后面兄弟before：在元素之前添加元素（添加兄弟）增加元素前面兄弟）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DOM</span>中创建元素：<br>doucument.<span class="hljs-title function_">write</span>(<span class="hljs-string">"标签代码"</span>);<br>缺陷：页面加载后创建元素，把页面中原有的内容全部的干掉<br>innerHTML <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"标签的名字"</span>)<br><span class="hljs-title class_">JQuery</span>中创建元素的方式<br>$(<span class="hljs-string">"标签的代码"</span>)<br>对象.<span class="hljs-title function_">html</span>(<span class="hljs-string">"标签的代码"</span>)<br><span class="hljs-comment">// 当前元素的里面（子元素）</span><br><span class="hljs-title function_">append</span>(obj)<br>用来在元素的末尾追加元素(最后一个子节点)。增加<br><span class="hljs-title function_">appendTo</span>()<br>把pObj对象主动的加到div中<br><span class="hljs-title function_">append</span>()与<span class="hljs-title function_">appendTo</span>()的区别<br>$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">append</span>(pObj);<br>pObj.<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">"#dv"</span>));<br><span class="hljs-title function_">prepend</span>()<br><span class="hljs-title function_">after</span>()<br>把元素添加到当前元素的后面(兄弟元素来添加)<br><span class="hljs-title function_">before</span>()<br>把元素添加到当前元素的前面(兄弟元素来添加)<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pObj = $(<span class="hljs-string">"&lt;p&gt;&lt;/p&gt;"</span>);<br>pObj.<span class="hljs-title function_">text</span>(<span class="hljs-string">"文字"</span>);<br>.<span class="hljs-title function_">html</span>()<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = [{ <span class="hljs-attr">name</span>: <span class="hljs-string">"123"</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">"18"</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">"男"</span> }, { <span class="hljs-attr">name</span>: <span class="hljs-string">""</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">"28"</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">"男"</span> }, { <span class="hljs-attr">name</span>: <span class="hljs-string">""</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">"34"</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">"男"</span> }];<br>       $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>           $(<span class="hljs-string">"input"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; obj.<span class="hljs-property">length</span>; i++) {<br>                   <span class="hljs-keyword">var</span> arr = [];<br>                   <span class="hljs-keyword">var</span> objs = obj[i];<br>                   arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;"</span> + objs.<span class="hljs-property">name</span> + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span> + objs.<span class="hljs-property">age</span> + <span class="hljs-string">"&lt;/td&gt;&lt;td&gt;"</span> + objs.<span class="hljs-property">sex</span> + <span class="hljs-string">"&lt;/td&gt;&lt;/tr&gt;"</span>);<br>               }<br>               $(<span class="hljs-string">"tbody"</span>).<span class="hljs-title function_">html</span>(arr);<br>           });<br>       })<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 清空内容</span><br>$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">""</span>) 空 <span class="hljs-comment">//清空元素的内容</span><br>$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">emtry</span>() 清空元素中的内容<br>$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">remove</span>(); 移除元素自身 --自杀<br><span class="hljs-comment">// 克隆</span><br><span class="hljs-title function_">clone</span>()<br></code></pre></td></tr></tbody></table></figure><p>表单元素的属性<br>设置和获取表单的value<br>input标签：文本框，radio,select,textarea(文本域)。checkbox…..常见的表单标签<br>都可以通过val方法获取和设置value值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取文本域的内容</span><br><span class="hljs-title function_">text</span>()方法<br><span class="hljs-title function_">val</span>()方法<br><span class="hljs-title function_">val</span>(选中值)<br><span class="hljs-comment">// 可以改变某一项选中</span><br> $(<span class="hljs-string">"#bu"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>                $(<span class="hljs-string">"#selectBox"</span>).<span class="hljs-title function_">val</span>(<span class="hljs-number">3</span>);<br>            });<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectBox"</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"4"</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"5"</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>设置和获取系统属性值或者自定义属性<br>attr()方法：可以设置属性值，两个参数：1；属性名字，2 属性值<br>attr()方法：可以获取属性值，一个参数1；属性名字</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#dv:checkbox"</span>)<br><span class="hljs-attr">type</span>:checkbox<br></code></pre></td></tr></tbody></table></figure><p>设置复选框中（attr设置checkbox的选中问题） prop()与attr用法一样</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#dv:checkbox"</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">"checked"</span>,<span class="hljs-string">"true"</span>);<br><span class="hljs-title function_">prop</span>(<span class="hljs-string">"checked"</span>,<span class="hljs-string">"false"</span>);<br></code></pre></td></tr></tbody></table></figure><p>设置元素和获取元素的宽高</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">css</span>(<span class="hljs-string">"width"</span>);<br>.<span class="hljs-title function_">css</span>(<span class="hljs-string">"height"</span>);<br><span class="hljs-keyword">var</span> width = <span class="hljs-built_in">parseInt</span>($(<span class="hljs-string">"dv"</span>)).<span class="hljs-title function_">css</span>(<span class="hljs-string">"width"</span>);<br>$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">width</span>();<br>$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">height</span>();<br></code></pre></td></tr></tbody></table></figure><p>位置操作</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">offset</span>()<br><span class="hljs-comment">// 设置的时候会有pos:relative</span><br><span class="hljs-comment">// 获取left和top的值 都是数字类型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">offset</span>().<span class="hljs-property">left</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>);<br><span class="hljs-title function_">offset</span>(<span class="hljs-string">"left"</span>:<span class="hljs-number">100</span>,<span class="hljs-string">"top"</span>:<span class="hljs-number">100</span>);<br>设置的时候没有px<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">scrollLeft</span>()和<span class="hljs-title function_">scrollTop</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollLeft</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>());<br><span class="hljs-comment">// 用法和之前的offset方法类似</span><br><span class="hljs-comment">// 获取的是数字</span><br><span class="hljs-comment">// 设置可以在括号中添加值即可</span><br><span class="hljs-comment">// 滚动事件</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>});<br></code></pre></td></tr></tbody></table></figure><h2 id="操作CSS"><a href="#操作CSS" class="headerlink" title="操作CSS"></a>操作CSS</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><table><thead><tr><th>方法</th><th></th></tr></thead><tbody><tr><td><code>addClass()</code></td><td>向被选元素添加一个或多个类</td></tr><tr><td><code>removeClass()</code></td><td>从被选元素删除一个或多个类</td></tr><tr><td><code>toggleClass()</code></td><td>对被选元素进行添加/删除类的切换操作</td></tr><tr><td><code>css()</code></td><td>设置或返回样式属性</td></tr><tr><td><code>addClass()、removerClass()、toggleClass()</code></td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"div"</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">"blue"</span>)<br></code></pre></td></tr></tbody></table></figure><p><code>css()</code><br>返回css属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">css</span>(<span class="hljs-string">"propertyname"</span>);<br></code></pre></td></tr></tbody></table></figure><p>设置css属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 键,值</span><br><span class="hljs-title function_">css</span>(<span class="hljs-string">"propertyname"</span>,<span class="hljs-string">"value"</span>);<br></code></pre></td></tr></tbody></table></figure><p>设置多个css属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// {"键":"值","键":"值"}</span><br>$(<span class="hljs-string">'p'</span>).<span class="hljs-title function_">css</span>({<br><span class="hljs-string">"background-color"</span>:<span class="hljs-string">"blue"</span>,<br>    <span class="hljs-string">"font-size"</span>:<span class="hljs-string">"30px"</span><br>})<br></code></pre></td></tr></tbody></table></figure><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>处理元素和浏览<br><img src="https://www.runoob.com/images/img_jquerydim.gif" alt="jQuery Dimensions" style="zoom: 67%;"></p><table><thead><tr><th>器窗口的尺寸</th><th></th></tr></thead><tbody><tr><td><code>width()</code>、<code>height()</code></td><td></td></tr><tr><td><code>innerWidth()</code>、<code>innerHeight()</code></td><td>包括padding</td></tr><tr><td><code>outerWidth()</code>、<code>outerHeight()</code></td><td>包括padding 和 border</td></tr><tr><td>设置元素样式</td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">css</span>（<span class="hljs-string">"属性"</span>，<span class="hljs-string">"属性值"</span>）；<br>.<span class="hljs-property">css</span>（<span class="hljs-string">"属性"</span>，<span class="hljs-string">"属性值"</span>）.<span class="hljs-property">css</span>（<span class="hljs-string">"属性"</span>，<span class="hljs-string">"属性值"</span>）；<br>.<span class="hljs-property">css</span>（{<span class="hljs-string">"属性"</span>：<span class="hljs-string">"属性值"</span>，<span class="hljs-string">"属性"</span>：<span class="hljs-string">"属性值"</span>}）；<br><span class="hljs-comment">// { }</span><br><span class="hljs-comment">// 第一种写法</span><br>$(<span class="hljs-string">"ul li"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"background-color"</span>,<span class="hljs-string">"red"</span>);<br>$(<span class="hljs-string">"ul li"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"background"</span>,<span class="hljs-string">"red"</span>);<br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">var</span> style = {<br><span class="hljs-string">"backgroudColor"</span> : <span class="hljs-string">"red"</span>,<br><span class="hljs-string">"fontSize"</span>:<span class="hljs-string">"30px"</span><br>}<br>$(<span class="hljs-string">"ul&gt;li"</span>).<span class="hljs-title function_">css</span>(style);<br><span class="hljs-comment">// 第三种写法</span><br>$(<span class="hljs-string">"ul&gt;li"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"red"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"fontSize"</span>,<span class="hljs-string">"30px"</span>);<br>获取属性的值,写一个参数即可<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">"#ul&gt;li"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>));<br></code></pre></td></tr></tbody></table></figure><p>添加和移除类设置元素样式</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">hasClass</span>(<span class="hljs-string">"cls"</span>)<br><span class="hljs-comment">// 检测元素是否应用某个类样式</span><br><span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">"cls"</span>) <br><span class="hljs-comment">// 切换类样式</span><br><span class="hljs-title function_">addClass</span>();<br><span class="hljs-comment">// 参数：类样式名字，添加样式的同时不会消除原有的样式</span><br><span class="hljs-title function_">addClass</span>(<span class="hljs-string">"cls"</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">"cls2"</span>);<br><span class="hljs-title function_">addClass</span>(<span class="hljs-string">"cls cls2"</span>);<br><span class="hljs-title function_">removeClass</span>();<br><span class="hljs-comment">// 不写参数移除所有的类样式</span><br><span class="hljs-title function_">removeClass</span>(<span class="hljs-string">"cls"</span>)<br><span class="hljs-comment">// 移除指定的一一个类样式，类样式名字不用点</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">val</span>() 可以获取input值<br><span class="hljs-title function_">val</span>(<span class="hljs-string">"属性"</span>) 设置val的值<br><span class="hljs-keyword">var</span> index = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">index</span>();<br>$(ul&gt;<span class="hljs-attr">li</span>:<span class="hljs-title function_">eq</span>(<span class="hljs-string">"+index+"</span>))<br>$(ul&gt;<span class="hljs-attr">li</span>:<span class="hljs-title function_">eq</span>(<span class="hljs-string">"index"</span>)) <span class="hljs-comment">//index 字符串</span><br></code></pre></td></tr></tbody></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>页面对不同访问者的响应叫做事件。</p><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td><code>click</code></td><td><code>keypress 键被按下</code></td><td><code>submit 提交</code></td><td><code>load 指定的元素已加载</code></td></tr><tr><td><code>dbclick</code></td><td><code>keydown 按下的过程</code></td><td><code>change 元素的值改变,仅适用于表单字段</code></td><td><code>resize 调整浏览器窗口大小</code></td></tr><tr><td><code>mouseenter 鼠标进入</code></td><td><code>keyup 键被松开</code></td><td><code>focus 获得焦点</code></td><td><code>scroll 滚动指定的元素</code></td></tr><tr><td><code>mouseleave 鼠标离开</code></td><td></td><td><code>blur 失去焦点</code></td><td><code>unload 方法在 jQuery 版本 1.8 中被废弃，在 3.0 版本被移除。</code></td></tr><tr><td><code>mousedown 鼠标按下</code></td><td></td><td></td><td></td></tr><tr><td><code>mouseup 鼠标松开</code></td><td></td><td></td><td></td></tr><tr><td><code>hover</code></td><td></td><td></td><td></td></tr><tr><td><code> $('选择器').事件(function(){ }</code></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">'button'</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){  <br><span class="hljs-comment">// 动作触发后执行的代码</span><br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">x=<span class="hljs-number">0</span>;<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>  $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">resize</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    $(<span class="hljs-string">"span"</span>).<span class="hljs-title function_">text</span>(x+=<span class="hljs-number">1</span>);<br>  });<br>});<br></code></pre></td></tr></tbody></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>slideUp()</code></td><td>滑入</td></tr><tr><td><code>slideDown()</code></td><td>滑出</td></tr><tr><td><code>slideToggle</code></td><td>切换滑入滑出</td></tr><tr><td><code>fadeIn()</code></td><td>淡入</td></tr><tr><td><code>fadeOut()</code></td><td>淡出</td></tr><tr><td><code>fadeToggle()</code></td><td>切换淡入淡出</td></tr><tr><td><code>animate()</code></td><td>第一个参数：键值对，（数值的属性可以改颜色不能改）<br>第二个参数：动画的时间<br>第三个参数：回调函数</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">hide</span>()方法<br>参数：可以是一个number类型（数字），也可以是字符串类型<br>number<br>1000ms 毫秒<br>字符串<br><span class="hljs-string">"slow"</span> <span class="hljs-string">"normal"</span> <span class="hljs-string">"fast"</span><br><span class="hljs-title function_">show</span>()方法<br><span class="hljs-title function_">hide</span>(<span class="hljs-number">800</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>});<br>argumnets.<span class="hljs-property">callee</span> 相当于递归<br>$(<span class="hljs-string">"#btn1"</span>).<span class="hljs-property">click</span><br>$(<span class="hljs-string">"div&gt;img"</span>).<span class="hljs-title function_">last</span>(<span class="hljs-string">"img"</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">800</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prev</span>().<span class="hljs-title function_">hide</span>(<span class="hljs-number">800</span>,<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>);<br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    $(<span class="hljs-string">"#show"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        $(<span class="hljs-string">"ul &gt; li"</span>).<span class="hljs-title function_">last</span>(<span class="hljs-string">"li"</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">200</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prev</span>().<span class="hljs-title function_">hide</span>(<span class="hljs-number">200</span>, <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>);<br>        });<br>    });<br>    $(<span class="hljs-string">"#hide"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        $(<span class="hljs-string">"ul &gt; li"</span>).<span class="hljs-title function_">first</span>(<span class="hljs-string">"li"</span>).<span class="hljs-title function_">show</span>(<span class="hljs-number">200</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">show</span>(<span class="hljs-number">200</span>, <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>);<br>        });<br>    });<br>});<br></code></pre></td></tr></tbody></table></figure><p>可以设置透明度</p><ul><li>参数1 ： 时间 slow normal fast</li><li>参数2 ：透明度 .css(“opacity”,0.1);</li><li>jquery animate()背景色渐变的处理，jquery animate函数不能处理背景色渐变，需要使用要jquery.color插件</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"https://cdn.bootcss.com/jquery-color/2.1.2/jquery.color.js"</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>stop()方法停止动画效果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$(this).children("ul").stop().show(500);<br></code></pre></td></tr></tbody></table></figure><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p><code>对象.方法().方法().方法() </code><br>断链：对象调用方法，返回的不是当前的对象，再调用方法，调用不了<br><strong>多行代码合并成一行代码，前提要认清此行代码返回的是不是对象.是对象才能进行链式编程</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">html</span>(<span class="hljs-string">"val"</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">"val"</span>).<span class="hljs-title function_">css</span>()链式编程，隐式迭代。<br>链式编程注意：$（<span class="hljs-string">"div"</span>）.<span class="hljs-property">html</span>（<span class="hljs-string">'设置值’）.val（‘设置值’）；这样可以，但是（'</span>div）.<span class="hljs-title function_">html</span>().<span class="hljs-property">text</span>（）这样是不对的，因为获取值时返回的是获取的字符串而不是对象本身所以不能链式编程。<br><span class="hljs-title function_">html</span>(<span class="hljs-string">"&lt;h1&gt;这是一个h1&lt;h1&gt;"</span>)<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-string">"li"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}).<span class="hljs-title function_">moverover</span>().<span class="hljs-title function_">moverenter</span>();<br>});<br></code></pre></td></tr></tbody></table></figure><p>解决断链：恢复到断链之前的一个效果—修复断链 <code>end()</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prevAll</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"red"</span>).<span class="hljs-title function_">end</span>().<span class="hljs-title function_">nextAll</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"blue"</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="绑定和解绑"><a href="#绑定和解绑" class="headerlink" title="绑定和解绑"></a>绑定和解绑</h2><p>事件绑定<br>同一个元素绑定多个事件<br>绑定事件：bind方法<br>bind()方法 不推荐<br>第一个参数是事件名字<br>第二个参数是事件处理函数-匿名函数<br>方便：简单，多事件一次绑定参数：键值对（右），空格隔开</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#btn"</span>).<span class="hljs-title function_">bind</span>({<span class="hljs-string">"click"</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>},<span class="hljs-string">"moverover“:function(){</span><br><span class="hljs-string">}});</span><br><span class="hljs-string">$("</span>#btn<span class="hljs-string">").bind("</span>click moverover<span class="hljs-string">",function(){});</span><br></code></pre></td></tr></tbody></table></figure><p>delegate —-&gt;绑定事件 不推荐<br>参数<br>1.要绑定的元素<br>要绑定的事件的名字<br>绑定事件的处理函数 — 匿名函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">delegate</span>(<span class="hljs-string">"p"</span>,click,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br><span class="hljs-title function_">alert</span>()<br>})<br></code></pre></td></tr></tbody></table></figure><p>on() 推荐<br>delegate()方法内部也是调用的on方法来绑定事件<br>on方法：两个参数：1事件的名字，2事件处理函数<br>on方法：三个参数：1，事件的名字，2.要绑定事件的元素–p，3事件处理函数<br>on是父级元素调用，目的：为子级元素去绑定事件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">""</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">"click"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-string">""</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">"click"</span>,<span class="hljs-string">"p"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>})<br>})<br></code></pre></td></tr></tbody></table></figure><p>绑定事件：bind：绑定多个事件<br>参数：{“事件的类型”：事件处理函数，…}<br>delegate参数：父级元素.delegate（”子级元素”，”事件类型”，事件处理函数）<br>on参数：父级元素.on（”事件类型”，”子级元素”，事件处理函数）；</p><p>解绑事件<br>.off()方法可以解绑事件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$().<span class="hljs-title function_">on</span>(<span class="hljs-string">"click"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-string">"#btn1"</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">"click"</span>);<br>off参数是要解绑的事件的名字<br>})<br></code></pre></td></tr></tbody></table></figure><p>unbind事件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$().<span class="hljs-title function_">bind</span>(<span class="hljs-string">"click"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-string">"#btn1"</span>).<span class="hljs-title function_">unbind</span>(<span class="hljs-string">"click"</span>);<br><span class="hljs-comment">// off参数是要解绑的事件的名字</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>undelegate()</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"btn2"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>$(<span class="hljs-string">"dv"</span>).<span class="hljs-title function_">undelegate</span>(<span class="hljs-string">"p"</span>,<span class="hljs-string">"click"</span>);<br>})<br></code></pre></td></tr></tbody></table></figure><p>//如果说父级元素和子级元素都是通过正常的方式绑定事件，如果通过off解绑的时候，父级元素的事件解绑了，子级元素的事件没有解绑<br>//但是：如果子级元素是通过父级元素调用delegate的方式绑定的事件，父级元素使用off方式解绑事件，这个时候父级元素和子级元素的相同的事件都会被解绑</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">"click"</span>)<br>下面的代码是把子级元素的点击事件解绑了，父级的点击事件还存在<br>$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">"click"</span>,<span class="hljs-string">"**"</span>)<br></code></pre></td></tr></tbody></table></figure><p>触发事件<br>触发事件：触发某个事件的时候在该事件内部调用了其他元素的某个事件方法<br>第一种方式：直接调用元素的事件方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">"#btn1"</span>).<span class="hljs-title function_">click</span>()<br></code></pre></td></tr></tbody></table></figure><p>第二种方式：使用trigger()方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">""</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">"click"</span>)<br>事件名称<br></code></pre></td></tr></tbody></table></figure><p>第三种方式：使用 triggerHandle()方法<br>trigger()和triggerHandler()区别<br>前者会触发浏览器的默认行为，并执行事件<br>后者不会触发浏览器的默认行为，但是会执行事件<br>获取焦点属于浏览器的默认行为</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">触发文本框获取焦点的事件<br>$(<span class="hljs-string">"txt"</span>).<span class="hljs-title function_">focus</span>()<br>$(<span class="hljs-string">"txt"</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">"focus"</span>)<br>$(<span class="hljs-string">"txt"</span>).<span class="hljs-title function_">triggerHandler</span>(<span class="hljs-string">"focus"</span>)<br><span class="hljs-comment">//</span><br>P<br><span class="hljs-comment">//第一种触发事件的方式和第二种触发事件的方式是相同的，都会触发浏览器默认的事件（光标在文本框中闪烁）</span><br><span class="hljs-comment">//第三种触发事件的方式不会触发浏览器的默认事件</span><br>}）；<br></code></pre></td></tr></tbody></table></figure><p>事件对象<br>event.delegateTarget 代码绑定的对象<br>event.currentTarget 绑定事件的对象<br>event.target 真正触发事件的对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);<br>argumnets.<span class="hljs-property">length</span><br>获取函数在调用的时候，有几个参数<br>$(<span class="hljs-string">"#dv"</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">"click"</span>,<span class="hljs-string">"input"</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>){<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br><span class="hljs-comment">//event.delegateTarget --- &gt;div</span><br><span class="hljs-comment">//event.currentTarget -----&gt;input</span><br><span class="hljs-comment">//event.target ---&gt;input</span><br>});<br></code></pre></td></tr></tbody></table></figure><p>按钮改变颜色</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$(function () {<br>            $(document).keydown(function (e) {<br>                // console.log(event);<br>                var keyCode = e.keyCode;<br>                switch (keyCode) {<br>                    case 65: $("#dv").css("background", "red"); break;<br>                    case 66: $("#dv").css("background", "yellow"); break;<br>                    case 67: $("#dv").css("background", "green"); break;<br>                    case 68: $("#dv").css("background", "pink"); break;<br>                    case 69: $("#dv").css("background", "black"); break;<br>                }<br>                console.log(keyCode);<br>            })<br>        });<br>       /*  $(function () {<br>                 $(document).on("keydown", function (event) {<br>                     $("#keyCodeSpan").text(event.keyCode);<br>                     switch (parseInt(event.keyCode(10))) {<br>                         case 6: changeColor("red"); break;<br>                         case 7: changeColor("green"); break;<br>                         case 8: changeColor("blue"); break;<br>                     }<br>                 })<br>                 function changeColor(color) {<br>                     $("#bgChange").css("backgroundColor", color);<br>                 }<br>             }) */<br></code></pre></td></tr></tbody></table></figure><p>取消事件冒泡+取消默认事件<br>//事件冒泡：元素中有元素，这些元素都有相同的事件，一旦最 里面的元素的事件触发 了，外面的所有的元素的相同的事件都会被触发<br>//元素A中有一个元素B，A和B都有点击事件，B点击事件触发，A点击事件自动触发<br>取消事件冒泡</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">最里面的元素设置<br>return false;俩种作用 取消事件冒泡+取消默认事件<br></code></pre></td></tr></tbody></table></figure><p>e.stoPropagation()<br>取消默认事件<br>event.preventDefault()<br>链式编程原理</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">链式编程原理：内部返回了return this当前对象有些方法设置了值才能返回当前对象，如果没有设置值，是获取属性对应的值，而不是当前对象<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">function Student(name){<br>this.name = name;<br>this.sayHi = function(){<br>console.log("我的名字叫"+this.name)<br>return this;<br>// 把当前对象返回<br>}<br>this.eat = function(){<br>console.log("我就是喜欢吃大蒜")<br>}<br>var stu = new Student("小黑");<br>stu.sayHi().eat();<br>传递参数<br>.html()<br>function Student(name){<br>this.name = name;<br>this.sayHi = function(name){<br>if(name){<br>console.log("我的名字叫"+name);<br>return this;<br>}else{<br>console.log("我的名字叫"+this.name);<br>}<br>//console.log("我的名字叫"+this.name)<br>//return this;<br>// 把当前对象返回<br>}<br>this.eat = function(){<br>console.log("我就是喜欢吃大蒜")<br>}<br>var stu = new Student("小黑");<br>stu.sayHi("小白").eat();<br>}<br>c<br></code></pre></td></tr></tbody></table></figure><p>each方法<br> jQuery中有隐式迭代不需要我们再次进行遍历对某些元素进行操作但是，如果涉及到对不同的元素有不同的操作，那么需要进行each遍历</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//参数：表示每次遍历都要执行的函数<br>$（"1i"）.each（function（index，ele）{<br>//index 表示：当前这个元素的索引号从e开始的0-10<br>var op=（index+1）/10；<br>$（ele）.css（"opacity"，op）；<br>}）；<br>$（"#uu&gt;li"）.each（function（index，element）{<br>/ /第一个参数是索引第二个参数是对象<br>//console.Log（arguments[0]+"===="+arguments[1]）；<br>$（element）.css（"opacity"，（index+1）/10）；<br>}）；<br></code></pre></td></tr></tbody></table></figure><p>多库共存</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//i让jQuery释放对$的控制权<br>$.noConflict（）；<br>var $="哦买噶"；console.1og（$）；jQuery（function（）{<br>jQuery（"#btn"）.click（function（）{<br>alert（"正常的执行"）；<br>}）；}）；<br></code></pre></td></tr></tbody></table></figure><p>同一个页面不仅引入了jQuery的外部文件，也引入了其他的库文件如果此时其他的库文件中也使用了S符号那么就使用：5.noConfict）解决其他语言中：这个方式叫解决命名空间的冲突也可以这样：var itcastos.noConflict（）；<br>也可以用jQuery代替 $</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><a href="http://www.htmleaf.com/">jQuery之家-自由分享jQuery、html5、css3的插件库</a><br>jQueryUI使用</p><ol><li>引入jQueryUl的样式文件</li><li>引入jQuery</li><li>.引入jQueryUl的js文件</li><li>使用jQueryUI功能<br>自已制作插件<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$("input[type=button]").click()<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">$.fn.<span class="hljs-property">changeBackgrounColor</span>= <span class="hljs-keyword">function</span>（color）{<br>    $（<span class="hljs-string">".c1s"</span>）.<span class="hljs-property">css</span>（<span class="hljs-string">"backgroundColor"</span>，color）；<br>}；<br>$（<span class="hljs-keyword">function</span>（）{<br>    <span class="hljs-comment">//点击每个按钮改变每个div的背景颜色</span><br>    $（<span class="hljs-string">"input[type=button]"</span>）.<span class="hljs-property">click</span>（<span class="hljs-keyword">function</span>（）{<br>        $（<span class="hljs-string">".cls"</span>）.<span class="hljs-property">changeBackgrounColor</span>（$（<span class="hljs-variable language_">this</span>）.<span class="hljs-property">val</span>（））；<br>        <span class="hljs-comment">//$（".cls"）.css（"backgroundColor"，$（this）.val（））；</span><br>        <span class="hljs-comment">//changeBackgrounCoLor（$（this）.val（））；</span><br>    }）；<br>}）；<br><span class="hljs-comment">//function changeBackgrounCoLor（color）{</span><br><span class="hljs-comment">//$（".cls"）.css（"backgroundColor"，color）；</span><br><span class="hljs-comment">// }</span><br>}<br></code></pre></td></tr></tbody></table></figure>语法错误<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">box.style.height = "100px"<br>box.style.backgroundColor = "green"<br></code></pre></td></tr></tbody></table></figure>Jquery 滚轮事件<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>        <span class="hljs-keyword">var</span> scroH = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>();  <span class="hljs-comment">//滚动高度</span><br>        <span class="hljs-keyword">var</span> viewH = $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>();  <span class="hljs-comment">//可见高度 </span><br>        <span class="hljs-keyword">var</span> contentH = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>();  <span class="hljs-comment">//内容高度</span><br>        <span class="hljs-keyword">if</span> (scroH &gt; <span class="hljs-number">100</span>) {  <span class="hljs-comment">//距离顶部大于100px时</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">'asdfsd'</span>)<br>        }<br>        <span class="hljs-keyword">if</span> (contentH - (scroH + viewH) &lt;= <span class="hljs-number">100</span>) {  <span class="hljs-comment">//距离底部高度小于100px</span><br>        }<br>        <span class="hljs-keyword">if</span> (contentH = (scroH + viewH)) {  <span class="hljs-comment">//滚动条滑到底部啦</span><br>        }<br>    });<br>})<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery  ajax"></a>jquery  ajax</h2><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。<br>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><p>jQuery load() 方法是简单但强大的 AJAX 方法。<br>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).<span class="hljs-title function_">load</span>(<span class="hljs-variable constant_">URL</span>,data,callback);<br><span class="hljs-comment">// 必需的 URL 参数规定您希望加载的 URL。</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$('p').load()<br></code></pre></td></tr></tbody></table></figure><h3 id="get-、post"><a href="#get-、post" class="headerlink" title="get() 、post()"></a>get() 、post()</h3><p>get()</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">get</span>(<span class="hljs-variable constant_">URL</span>,callback);<br></code></pre></td></tr></tbody></table></figure><p>post()</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">post</span>(<span class="hljs-variable constant_">URL</span>,data,callback);<br></code></pre></td></tr></tbody></table></figure><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp从入门到实战</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/uniapp.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/uniapp.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h1><blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1BJ411W7pX?from=search&amp;seid=7278699364733577484">Uni-App从入门到实战</a></li><li><input disabled="" type="checkbox"> </li></ul></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p></li><li><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p></li><li><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p></li><li><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p></li></ul><p>安装</p><ul><li>HbuilderX</li><li>微信小程序</li></ul><p>初始化项目</p><ul><li>点击HbuilderX菜单栏文件&gt;项目&gt;新建<ul><li>uni-app</li><li>web2App</li><li>小程序</li><li>快应用</li></ul></li><li>选择uni-app,填写项目名称，项目创建的目录</li></ul><p>运行</p><ul><li>浏览器中<ul><li>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</li></ul></li><li>微信开发者工具中<ul><li>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</li><li>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机<ul><li>如果是第一次使用，需要先配置小程序ide的相关路径（把微信小程序的工具填到Hbuilder X 中），才能运行成功</li><li>微信开发者工具在设置中、安全设置，服务端口开启</li></ul></li></ul></li><li>运行到手机或模拟器中<ul><li>手机数据线连接</li></ul></li></ul><p>项目目录和文件 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">pages.json  // 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等<br>manifest.json // 文件是应用的配置文件，用于指定应用的名称、图标、权限等。<br>`App.vue` 是我们的跟组件，所有页面都是在`App.vue`下进行切换的，是页面入口文件，可以调用应用的生命周期函数。<br>`main.js` 是我们的项目入口文件，主要作用是初始化`vue`实例并使用需要的插件。<br>`uni.scss` 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，`uni.scss`文件里预置了一批scss变量预置。<br>unpackage 就是打包目录，在这里有各个平台的打包文件<br>```pages``` 所有的页面存放目录<br>```static``` 静态资源目录，例如图片等<br>```components``` 组件存放目录<br></code></pre></td></tr></tbody></table></figure><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>全局配置和页面配置</p><h3 id="通过globalStyle进行全局配置"><a href="#通过globalStyle进行全局配置" class="headerlink" title="通过globalStyle进行全局配置"></a>通过globalStyle进行全局配置</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// pages.json</span><br><span class="hljs-punctuation">{</span><br>    <span class="hljs-comment">// 页面配置文件</span><br>    <span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>        <br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 全局配置文件</span><br>    <span class="hljs-attr">"globalStyle"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"navigationBarBackgroundColor"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"black"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"uni-app"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"enablePullDownRefresh"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"true"</span><br>    <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见[页面生命周期](</td></tr></tbody></table><h3 id="pages配置"><a href="#pages配置" class="headerlink" title="pages配置"></a>pages配置</h3><h4 id="创建pages页面"><a href="#创建pages页面" class="headerlink" title="创建pages页面"></a>创建pages页面</h4><p>新的message页面</p><ul><li>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;view&gt;<br>这是信息页面<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="通过pages来配置页面"><a href="#通过pages来配置页面" class="headerlink" title="通过pages来配置页面"></a>通过pages来配置页面</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <br><span class="hljs-comment">// 启动页</span><br><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"pages/message/message"</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pages/index/index"</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-comment">// 页面窗口表现 页面配置会把全局的给覆盖</span><br><span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"uni-app"</span><br><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></tbody></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">"pages"</span>: [ <span class="hljs-comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span><br>{<br><span class="hljs-string">"path"</span>:<span class="hljs-string">"pages/message/message"</span>,<br><span class="hljs-string">"style"</span>: {<br><span class="hljs-string">"navigationBarBackgroundColor"</span>: <span class="hljs-string">"#007AFF"</span>,<br><span class="hljs-string">"navigationBarTextStyle"</span>: <span class="hljs-string">"white"</span>,<br><span class="hljs-string">"enablePullDownRefresh"</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">"disableScroll"</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">"h5"</span>: { <span class="hljs-comment">// h5 修改刷新的</span><br><span class="hljs-string">"pullToRefresh"</span>: {<br><span class="hljs-string">"color"</span>: <span class="hljs-string">"#007AFF"</span><br>}<br>}<br>}<br>}<br>]<br></code></pre></td></tr></tbody></table></figure><h3 id="配置tabbar"><a href="#配置tabbar" class="headerlink" title="配置tabbar"></a>配置tabbar</h3><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// oages.json文件下</span><br><span class="hljs-string">"tabBar"</span>: {<br><span class="hljs-string">"list"</span>: [<br>{<br><span class="hljs-string">"text"</span>: <span class="hljs-string">"首页"</span>,<br><span class="hljs-string">"pagePath"</span>:<span class="hljs-string">"pages/index/index"</span>,<br><span class="hljs-string">"iconPath"</span>:<span class="hljs-string">"static/tabs/home.png"</span>,<br><span class="hljs-string">"selectedIconPath"</span>:<span class="hljs-string">"static/tabs/home-active.png"</span><br>},<br>{<br><span class="hljs-string">"text"</span>: <span class="hljs-string">"信息"</span>,<br><span class="hljs-string">"pagePath"</span>:<span class="hljs-string">"pages/message/message"</span>,<br><span class="hljs-string">"iconPath"</span>:<span class="hljs-string">"static/tabs/message.png"</span>, <span class="hljs-comment">// 未选中</span><br><span class="hljs-string">"selectedIconPath"</span>:<span class="hljs-string">"static/tabs/message- active.png"</span> <span class="hljs-comment">// 选中</span><br>},<br>{<br><span class="hljs-string">"text"</span>: <span class="hljs-string">"我们"</span>,<br><span class="hljs-string">"pagePath"</span>:<span class="hljs-string">"pages/contact/contact"</span>,<br><span class="hljs-string">"iconPath"</span>:<span class="hljs-string">"static/tabs/contact.png"</span>,<br><span class="hljs-string">"selectedIconPath"</span>:<span class="hljs-string">"static/tabs/contact-active.png"</span><br>}<br>]<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h3><p>condition启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">"condition"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span> <span class="hljs-comment">// 配置微信小程序启动模式</span><br> “currect”<span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">"list"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br> <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"详情页"</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"pages/detail/detail"</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">"query"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"id=80"</span><br> <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>text  view button image</li><li>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</li><li>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</li></ul><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><ul><li>文本组件，类似于 HTML 中的 span</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签<code>span</code>、在同一行显示 </li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">selectable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">space</span> <span class="hljs-attr">decode</span>=<span class="hljs-string">"true"</span>&gt;</span>&amp;amp texttext<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><ul><li>视图容器组件，View 视图容器， 类似于 HTML 中的 div</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>hover-class</td><td>string</td><td>none</td><td>否</td><td>指定按下去的样式类，当hover-class=”none”时，没有点击态效果</td></tr><tr><td>hover-stop-propagation</td><td>boolean</td><td>false</td><td>否</td><td>指定是否阻止本节点的祖先节点出现点击态</td></tr><tr><td>hover-start-time</td><td>number</td><td>50</td><td>否</td><td>按住后多久出现点击态，单位毫秒</td></tr><tr><td>hover-stay-time</td><td>number</td><td>400</td><td>否</td><td>手指松开后点击态保留时间，单位毫秒</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">"box2_active"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'box1'</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">'active'</span> <span class="hljs-attr">hover-stop-propagation</span> <span class="hljs-attr">:hover-start-time</span>=<span class="hljs-string">"2000"</span> <span class="hljs-attr">:hover-stay-time</span>=<span class="hljs-string">'2000'</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><ul><li>按钮组件，<code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><ul><li>图片组件</li><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li></ul><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">""</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p>  <figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> {<br>    <span class="hljs-attribute">font-family</span>: test1-icon;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'~@/static/iconfont.ttf'</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>如何使用scss或者less</p></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"tapHandle"</span>&gt;</span>点我啊<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>事件函数定义在methods中</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: {<br>  tapHandle () {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'真的点我了'</span>)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><ul><li><p>默认如果没有传递参数，事件函数第一个形参为事件对象</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// template</span><br>&lt;button @click=<span class="hljs-string">"tapHandle"</span>&gt;点我啊&lt;/button&gt;<br><span class="hljs-comment">// script</span><br><span class="hljs-attr">methods</span>: {<br>  tapHandle (e) {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// template<br>&lt;button @click="tapHandle(1)"&gt;点我啊&lt;/button&gt;<br>// script<br>methods: {<br>  tapHandle (num) {<br>    console.log(num)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>如果获取事件对象也想传递参数</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// template<br>&lt;button @click="tapHandle(1,$event)"&gt;点我啊&lt;/button&gt;<br>// script<br>methods: {<br>  tapHandle (num,e) {<br>    console.log(num,e)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  data () {<br>    <span class="hljs-keyword">return</span> {<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">'hello-uni'</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><ul><li><p>利用插值表达式渲染基本数据</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{msg}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在插值表达式中使用三元运算</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{ flag ? '我是真的':'我是假的' }}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>基本运算</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{1+1}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="v-bind动态绑定属性"><a href="#v-bind动态绑定属性" class="headerlink" title="v-bind动态绑定属性"></a>v-bind动态绑定属性</h3><p>在data中定义了一张图片，我们希望把这张图片渲染到页面上</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  data () {<br>    <span class="hljs-keyword">return</span> {<br>      <span class="hljs-attr">img</span>: <span class="hljs-string">'http://destiny001.gitee.io/image/monkey_02.jpg'</span><br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>利用v-bind进行渲染</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"img"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>还可以缩写成:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"img"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h3><p>data中定以一个数组，最终将数组渲染到页面上</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">data () {<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">arr</span>: [<br>      { <span class="hljs-attr">name</span>: <span class="hljs-string">'刘能'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> },<br>      { <span class="hljs-attr">name</span>: <span class="hljs-string">'赵四'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">39</span> },<br>      { <span class="hljs-attr">name</span>: <span class="hljs-string">'宋小宝'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">49</span> },<br>      { <span class="hljs-attr">name</span>: <span class="hljs-string">'小沈阳'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">59</span> }<br>    ]<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>利用v-for进行循环</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;view v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"(item,i) in arr"</span> :key=<span class="hljs-string">"i"</span>&gt;名字：{{item.<span class="hljs-property">name</span>}}---年龄：{{item.<span class="hljs-property">age</span>}}&lt;/view&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p></blockquote><h3 id="uniapp-生命周期"><a href="#uniapp-生命周期" class="headerlink" title="uniapp 生命周期"></a>uniapp 生命周期</h3><h4 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h4><ul><li>onLanch onShow onHide onError</li></ul><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）、初始化</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示（后台 ==&gt; 前台）</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台（前台 ==&gt; 后台）</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发 （报错）</td></tr></tbody></table><h4 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h4><ul><li>onLoad onShow onReady onHide onUnload</li></ul><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><h5 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h5><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h6 id="通过配置文件开启"><a href="#通过配置文件开启" class="headerlink" title="通过配置文件开启"></a>通过配置文件开启</h6><p>创建list页面进行演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>杭州学科<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in arr"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span><br>{{item}}<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">arr</span>: [<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>]</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">{<br>    <span class="hljs-string">"path"</span>:<span class="hljs-string">"pages/list/list"</span>,<br>    <span class="hljs-string">"style"</span>:{<br>      <span class="hljs-string">"enablePullDownRefresh"</span>: <span class="hljs-literal">true</span> <br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>通过API开启</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">uni.startPullDownRefresh()<br></code></pre></td></tr></tbody></table></figure><h5 id="监听下拉刷新"><a href="#监听下拉刷新" class="headerlink" title="监听下拉刷新"></a>监听下拉刷新</h5><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  data () {<br>    <span class="hljs-keyword">return</span> {<br>      <span class="hljs-attr">arr</span>: [<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>]<br>    }<br>  },<br>  <span class="hljs-attr">methods</span>: {<br>    startPull () {<br>      uni.<span class="hljs-title function_">startPullDownRefresh</span>()<br>    }<br>  },<br>  onPullDownRefresh () {<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'触发下拉刷新了'</span>)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="关闭下拉刷新"><a href="#关闭下拉刷新" class="headerlink" title="关闭下拉刷新"></a>关闭下拉刷新</h5><p>uni.stopPullDownRefresh()</p><p>停止当前页面下拉刷新</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"startPull"</span>&gt;</span>开启下拉刷新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>杭州学科<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in arr"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span><br>{{item}}<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">arr</span>: [<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>]</span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">startPull () {</span><br><span class="language-javascript">uni.<span class="hljs-title function_">startPullDownRefresh</span>()</span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript">onPullDownRefresh () {</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = []</span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> {</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = [<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>]</span><br><span class="language-javascript">uni.<span class="hljs-title function_">stopPullDownRefresh</span>()</span><br><span class="language-javascript">}, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"startPull"</span>&gt;</span>开启下拉刷新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">杭州学科</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in arr"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span></span><br><span class="language-xml">{{item}}</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span></span><br><span class="language-javascript"><span class="language-xml">data () {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">arr</span>: [<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>,<span class="hljs-string">'前端'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'ui'</span>,<span class="hljs-string">'大数据'</span>]</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">},</span></span><br><span class="language-javascript"><span class="language-xml">onReachBottom () {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'触底了'</span>)</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">view{</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">}</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><p>**发送get请求 **和 <strong>发送post请求</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"sendGet"</span>&gt;</span>发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: {</span></span><br><span class="language-javascript"><span class="language-xml">sendGet () {</span></span><br><span class="language-javascript"><span class="language-xml">uni.<span class="hljs-title function_">request</span>({</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">'http://localhost:8082/api/getlunbo'</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">})</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><h3 id="uni-setStorage"><a href="#uni-setStorage" class="headerlink" title="uni.setStorage"></a>uni.setStorage</h3><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</p><p>代码演示</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"setStor"</span>&gt;</span>存储数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: {</span></span><br><span class="language-javascript"><span class="language-xml">setStor () {</span></span><br><span class="language-javascript"><span class="language-xml">uni.<span class="hljs-title function_">setStorage</span>({</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">key</span>: <span class="hljs-string">'id'</span>,</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">data</span>: <span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml"> success () {</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'存储成功'</span>)</span></span><br><span class="language-javascript"><span class="language-xml"> }</span></span><br><span class="language-javascript"><span class="language-xml"> })</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="uni-setStorageSync"><a href="#uni-setStorageSync" class="headerlink" title="uni.setStorageSync"></a>uni.setStorageSync</h3><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"setStor"</span>&gt;</span>存储数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: {</span></span><br><span class="language-javascript"><span class="language-xml">setStor () {</span></span><br><span class="language-javascript"><span class="language-xml">uni.<span class="hljs-title function_">setStorageSync</span>(<span class="hljs-string">'id'</span>,<span class="hljs-number">100</span>)</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="uni-getStorage"><a href="#uni-getStorage" class="headerlink" title="uni.getStorage"></a>uni.getStorage</h3><p>从本地缓存中异步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"getStorage"</span>&gt;</span>获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">id</span>: <span class="hljs-string">''</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">getStorage () {</span><br><span class="language-javascript">uni.<span class="hljs-title function_">getStorage</span>({</span><br><span class="language-javascript"><span class="hljs-attr">key</span>: <span class="hljs-string">'id'</span>,</span><br><span class="language-javascript"><span class="hljs-attr">success</span>:  <span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>{</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = res.<span class="hljs-property">data</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">})</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="uni-getStorageSync"><a href="#uni-getStorageSync" class="headerlink" title="uni.getStorageSync"></a>uni.getStorageSync</h3><p>从本地缓存中同步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"getStorage"</span>&gt;</span>获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">getStorage () {</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> id = uni.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">'id'</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id)</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="uni-removeStorage"><a href="#uni-removeStorage" class="headerlink" title="uni.removeStorage"></a>uni.removeStorage</h3><p>从本地缓存中异步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"removeStorage"</span>&gt;</span>删除数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">removeStorage () {</span><br><span class="language-javascript">uni.<span class="hljs-title function_">removeStorage</span>({</span><br><span class="language-javascript"><span class="hljs-attr">key</span>: <span class="hljs-string">'id'</span>,</span><br><span class="language-javascript"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'删除成功'</span>)</span><br><span class="language-javascript">}</span><br><span class="language-javascript">})</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="uni-removeStorageSync"><a href="#uni-removeStorageSync" class="headerlink" title="uni.removeStorageSync"></a>uni.removeStorageSync</h3><p>从本地缓存中同步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"removeStorage"</span>&gt;</span>删除数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">removeStorage () {</span><br><span class="language-javascript">uni.<span class="hljs-title function_">removeStorageSync</span>(<span class="hljs-string">'id'</span>)</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>上传 预览图片</p><p>条件注释实现跨段兼容</p><h2 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h2><p>navigator进行跳转</p><p>编程式导航进行跳转</p><p>导航跳转传递参数</p><h4 id="上传图片、预览图片"><a href="#上传图片、预览图片" class="headerlink" title="上传图片、预览图片"></a>上传图片、预览图片</h4><h5 id="上传图片-1"><a href="#上传图片-1" class="headerlink" title="上传图片"></a>上传图片</h5><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"chooseImg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span>&gt;</span>上传图片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in imgArr"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">imgArr</span>: []</span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">chooseImg () {</span><br><span class="language-javascript">uni.<span class="hljs-title function_">chooseImage</span>({</span><br><span class="language-javascript"><span class="hljs-attr">count</span>: <span class="hljs-number">9</span>,</span><br><span class="language-javascript"><span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>{</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">imgArr</span> = res.<span class="hljs-property">tempFilePaths</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">})</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h5 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h5><p>结构</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in imgArr"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"item"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"previewImg(item)"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>预览图片的方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">previewImg (current) {<br>  uni.<span class="hljs-title function_">previewImage</span>({<br>    <span class="hljs-attr">urls</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgArr</span>,<br>    current<br>  })<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="条件注释实现跨段兼容"><a href="#条件注释实现跨段兼容" class="headerlink" title="条件注释实现跨段兼容"></a>条件注释实现跨段兼容</h4><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h5 id="组件的条件注释"><a href="#组件的条件注释" class="headerlink" title="组件的条件注释"></a>组件的条件注释</h5><p>代码演示</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- #ifdef H5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  h5页面会显示<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- #endif --&gt;</span><br><span class="hljs-comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  微信小程序会显示<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- #endif --&gt;</span><br><span class="hljs-comment">&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  app会显示<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- #endif --&gt;</span><br></code></pre></td></tr></tbody></table></figure><h5 id="api的条件注释"><a href="#api的条件注释" class="headerlink" title="api的条件注释"></a>api的条件注释</h5><p>代码演示</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">onLoad () {<br>  <span class="hljs-comment">//#ifdef MP-WEIXIN</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'微信小程序'</span>)<br>  <span class="hljs-comment">//#endif</span><br>  <span class="hljs-comment">//#ifdef H5</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'h5页面'</span>)<br>  <span class="hljs-comment">//#endif</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>样式的条件注释</p><p>代码演示</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* #ifdef H5 */</span><br>view{<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>}<br><span class="hljs-comment">/* #endif */</span><br><span class="hljs-comment">/* #ifdef MP-WEIXIN */</span><br>view{<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background</span>: green;<br>}<br><span class="hljs-comment">/* #endif */</span><br></code></pre></td></tr></tbody></table></figure><h4 id="uni中的导航跳转"><a href="#uni中的导航跳转" class="headerlink" title="uni中的导航跳转"></a>uni中的导航跳转</h4><h5 id="利用navigator进行跳转"><a href="#利用navigator进行跳转" class="headerlink" title="利用navigator进行跳转"></a>利用navigator进行跳转</h5><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">"/pages/about/about"</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">"navigator-hover"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"default"</span>&gt;</span>跳转到关于页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>跳转到tabbar页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">"/pages/message/message"</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">"switchTab"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"default"</span>&gt;</span>跳转到message页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h5 id="利用编程式导航进行跳转"><a href="#利用编程式导航进行跳转" class="headerlink" title="利用编程式导航进行跳转"></a>利用编程式导航进行跳转</h5><p><a href="%5Buni.navigateTo%5D(https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><p><strong>利用navigateTo进行导航跳转</strong></p><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"goAbout"</span>&gt;</span>跳转到关于页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">goAbout () {<br>  uni.<span class="hljs-title function_">navigateTo</span>({<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/pages/about/about'</span>,<br>  })<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"goMessage"</span>&gt;</span>跳转到message页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">goMessage () {<br>  uni.<span class="hljs-title function_">switchTab</span>({<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/pages/message/message'</span><br>  })<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"goMessage"</span>&gt;</span>跳转到message页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- js --&gt;</span><br>goMessage () {<br>  uni.switchTab({<br>    url: '/pages/message/message'<br>  })<br>}<br></code></pre></td></tr></tbody></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">onUnload () {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'组件卸载了'</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="导航跳转传递参数"><a href="#导航跳转传递参数" class="headerlink" title="导航跳转传递参数"></a>导航跳转传递参数</h5><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">goAbout () {<br>  uni.<span class="hljs-title function_">navigateTo</span>({<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/pages/about/about?id=80'</span>,<br>  });<br>}<br></code></pre></td></tr></tbody></table></figure><p>接收参数的页面</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>onLoad (options) {<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options)<br>}<br>}<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="uni-app中组件的创建"><a href="#uni-app中组件的创建" class="headerlink" title="uni-app中组件的创建"></a>uni-app中组件的创建</h4><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建login组件，在component中创建login目录，然后新建login.vue文件</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>&lt;view&gt;<br>这是一个自定义组件<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure></li><li><p>在其他组件中导入该组件并注册</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import login from "@/components/test/test.vue"<br></code></pre></td></tr></tbody></table></figure></li><li><p>注册组件</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">components</span>: {test}<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用组件</p>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;test&gt;&lt;/test&gt;<br></code></pre></td></tr></tbody></table></figure></li></ul><h5 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h5><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h4 id="组件的通讯"><a href="#组件的通讯" class="headerlink" title="组件的通讯"></a>组件的通讯</h4><h5 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h5><p>通过props来接受外界传递到组件内部的值</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>&lt;view&gt;<br>这是一个自定义组件 {{msg}}<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {<br>props: ['msg']<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure><p>其他组件在使用login组件的时候传递值</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>&lt;view&gt;<br>&lt;test :msg="msg"&gt;&lt;/test&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import test from "@/components/test/test.vue"<br>export default {<br>data () {<br>return {<br>msg: 'hello'<br>}<br>},<br><br>components: {test}<br>}<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><h5 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h5><p>通过$emit触发事件进行传递参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>这是一个自定义组件 {{msg}}<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"sendMsg"</span>&gt;</span>给父组件传值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">status</span>: <span class="hljs-string">'打篮球'</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">props</span>: {</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: {</span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript"><span class="hljs-attr">value</span>: <span class="hljs-string">''</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">sendMsg () {</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">'myEvent'</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span>)</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>父组件定义自定义事件并接收参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">"msg"</span> @<span class="hljs-attr">myEvent</span>=<span class="hljs-string">"getMsg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">"@/components/test/test.vue"</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span><br><span class="language-javascript">data () {</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> {</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">'hello'</span></span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: {</span><br><span class="language-javascript">getMsg (res) {</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span><br><span class="language-javascript">}</span><br><span class="language-javascript">},</span><br><span class="language-javascript"><span class="hljs-attr">components</span>: {test}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="uni-ui"><a href="#uni-ui" class="headerlink" title="uni-ui"></a>uni-ui</h1><blockquote><ul><li><input disabled="" type="checkbox"> <a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></li></ul></blockquote><p>uni-ui 文档</p><ul><li>进入Grid宫格组件</li><li>使用HBuiderX 导入该组件</li><li>导入组件</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> uniGrid <span class="hljs-keyword">from</span> <span class="hljs-string">"@/components/uni-grid/uni-grid.vue"</span><br><span class="hljs-keyword">import</span> uniGridItem <span class="hljs-keyword">from</span> <span class="hljs-string">"@/components/uni-grid-item/uni-grid-item.vue"</span><br></code></pre></td></tr></tbody></table></figure><ul><li>注册组件</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">components</span>:{uniGrid,unGridItem}<br></code></pre></td></tr></tbody></table></figure><ul><li>使用组件</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">uni-grid</span> <span class="hljs-attr">:column</span>=<span class="hljs-string">"3"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uni-grid-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">uni-grid-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uni-grid-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">uni-grid-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uni-grid-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span>文本<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">uni-grid-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">uni-grid</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h1><blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV15b411P7e6?from=search&amp;seid=14286172847930360732">小程序框架Mpvue教程(mpvue小程序框架精讲)</a></li><li><input disabled="" type="checkbox"> <a href="http://mpvue.com/">mpvue官网</a></li></ul></blockquote><ul><li>Vue in Mini Program</li></ul><p>原生小程序 vs mpvue对比</p><ul><li>原生小程序运行更稳定些, 兼容性好，mpvue可能在某些方面存在兼容性问题（vue-router）</li><li>mpvue支持vue组件化开发. 效率更高，功能更强大(双向数据绑定, vuex)</li><li>mpvue可基于webpack组件化, 工程化开发</li><li>原生不支持npm安装包，不支持css预处理</li><li>支持 computed 计算属性和 watcher 监听器；模板语法中只支持简单的 js 表达式。可以直接写 div 、span 等标签<br>  computed 的写法</li><li>之前会vue的工程师上手mpvue框架的成本较低</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>美团工程师推出的基于Vue.js封装的用于开发小程序的框架</li><li>融合了原生小程序和vue.js的特点</li><li>可完全组件化开发</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>组件化开发</li><li>完整的vue.js开发体验</li><li>可使用vuex管理状态</li><li>webpack构建项目</li><li>最终将H5转换工具将项目编译成小程序识别的文件</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-cli -g // <br>// 安装mpvue<br>vue init mpvue/mpvue-quickstart my-project(项目名)  // 初始化项目<br><span class="hljs-built_in">cd</span> my-project<br>npm i<br>npm start // npm run dev // 启动初始化项目<br></code></pre></td></tr></tbody></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">src/<br>com<br>--app.json // 相当于 全局配置文件 app.json<br>-- App.vue  // 等同于原生小程序中的app.js, 可再次写小程序应用实例的声明周期  函数 || 全局样式(style中编写)<br>---- script  app.js<br>---- style  app.wxss 全局功能样式<br>---- main.js // 应用入口文件, 声明组件类型，挂载组件<br></code></pre></td></tr></tbody></table></figure><p>入口文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-comment">// 用于启动项目的时候提示信息，设置为false关闭提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 这个值是为了与后面要讲的小程序页面组件所区分开来，因为小程序页面组件和这个App.vue组件的写法和引入方式是一致的，为了区分两者，需要设置mpType值</span><br><span class="hljs-title class_">App</span>.<span class="hljs-property">mpType</span> = <span class="hljs-string">'app'</span><br><span class="hljs-comment">// 生成vue实例</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-comment">// 挂载组件</span><br>app.$mount()<br></code></pre></td></tr></tbody></table></figure><p>编写页面 pages/index</p><ul><li>index.vue 等同于 原生中的wxml + wxss + js</li><li>main.js  当前组件页面的入口文件，用于生成组件实例，并挂载组件</li><li>main.json  当前页面的局部配置文件(注意：index.vue组件最终会被转化为main.wxml以及main.wxss文件, 所以当前的json文件需命名main)</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pages/index<br>-- index.vue // 等同于 index.wxml + index.wxss + index.js<br>-- main.js  // 当前页面入口文件<br>-- main.json // 当前页面的局部配置文件 <br><br>app.json // 全局配置文件<br>main.js  // 入口文件<br>App.vue  // 全局应用组件，等同于原生小程序的app.js + app.wxml文件<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">index/main.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.vue'</span><br><span class="hljs-keyword">const</span> index = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(<span class="hljs-title class_">Index</span>)<br>inde.$mount()<br>index/main.<span class="hljs-property">json</span><br>{<br>  <span class="hljs-string">"navigationBarTitleText"</span>: <span class="hljs-string">"主页"</span>,<br>  <span class="hljs-string">"navigationBarBackgroundColor"</span>: <span class="hljs-string">"#8ed145"</span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h2><p>vue生命周期</p><ul><li>beforeCreate、created</li><li>beforeMount、mounted</li><li>beforeUpdate、update</li><li>beforeDestory、destoryed</li></ul><p>小程序应用App实例声明周期</p><ul><li>onLaunch 小程序应用初始化</li><li>onShow: 小程序启动获取后台进入前台</li><li>onHide: 小程序应用从前台进入后台</li><li>onLoad 监听页面加载</li><li>onShow: 页面显示</li><li>onReady: 监听页面初始化渲染完成</li><li>onHide: 监听页面隐藏，注意当前页面实例依然存活</li><li>onUnload: 监听页面卸载</li><li>onPullDownRefresh: 监听用户下载动作</li><li>onReachBottom: 监听用户上拉触底操作</li><li>onShareAppMessage: 用户点击右上角分享功能</li><li>onPageScroll: 页面滚动</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#ontabitemtapobject">onTabItemTap</a>： 当前是 tab 页时，点击 tab 时触发</li></ul><p>除了 Vue 本身的生命周期外，mpvue 还兼容了小程序生命周期，这部分生命周期钩子的来源于**<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html">微信小程序的 Page</a>**， 除特殊情况外，不建议使用小程序的生命周期钩子</p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li>mpvue中对vue-router的支持不好，问题较多</li></ul><table><thead><tr><th>方法</th><th>功能</th><th></th></tr></thead><tbody><tr><td>wx.navigateTo()</td><td>保留当前页面，可回退</td><td></td></tr><tr><td>wx.redirectTo()</td><td>不保留，不能回退</td><td></td></tr><tr><td>wx.switchTab()</td><td>使用于tabBar页面</td><td></td></tr></tbody></table><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>小程序中不支持使用axios，会报错： XMLHttpRequest is not a constructor</li><li>原因: 小程序的环境和浏览器的环境不一样</li><li>解决方法: 使用其他库: flyio</li></ul><h3 id="fly"><a href="#fly" class="headerlink" title="fly"></a>fly</h3><ul><li><a href="https://github.com/wendux/fly">fly github</a></li><li>一个支持所有JavaScript运行环境的基于Promise的、支持请求转发、强大的http请求库。可以让您在多个端上尽可能大限度的实现代码复用。</li><li>解决小程序发起异步请求</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install flyio<br><br><span class="hljs-comment">// 浏览器和React Native</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Fly</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">"flyio/dist/npm/fly"</span>)<br><span class="hljs-comment">// Node 入口</span><br><span class="hljs-comment">// var Fly=require("flyio/src/node")</span><br><span class="hljs-keyword">var</span> fly=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fly</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Fly</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'flyio/dist/npm/wx'</span><br><span class="hljs-keyword">let</span> fly = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fly</span> <br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$fly</span> = fly<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$fly</span>.<span class="hljs-title function_">get</span>()<br></code></pre></td></tr></tbody></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>原生小程序</p><ul><li>data 中初始化状态数据</li><li>修改状态：this.setData(key:value )</li><li>页面公共状态：<ul><li>App程序实例的data中定义</li><li>获取状态数据: let datas = getApp()</li></ul></li><li>利用storage本地存储</li></ul><p>mpvue</p><ul><li>在组件中通过getApp无法拿到对应的数据</li><li>mpvue中支持vuex，所以可以使用<strong>vuex</strong>集中管理状态</li><li>vuex几个重要的概念:<ul><li>store对象</li><li>dispatch() 分发状态</li><li>actions   携带参与修改状态的数据，并触发mutations</li><li>mutations用于修改状态，并将状态交给store对象</li><li>getter 用于动态计算状态</li></ul></li></ul><h1 id="taro"><a href="#taro" class="headerlink" title="taro"></a>taro</h1><blockquote><ul><li><input disabled="" type="checkbox"> <a href="https://github.com/NervJS/taro">NervJS/taro</a></li></ul></blockquote><h1 id="weui"><a href="#weui" class="headerlink" title="weui"></a>weui</h1><blockquote><ul><li><input disabled="" type="checkbox"> <a href="https://weui.io/">WeUI</a></li></ul></blockquote><h1 id="wepy"><a href="#wepy" class="headerlink" title="wepy"></a>wepy</h1><blockquote><ul><li><input disabled="" type="checkbox"> <a href="https://github.com/Tencent/wepy">Tencent/wepy: 小程序组件化开发框架</a></li></ul></blockquote><p>小程序原生语法  和 增强型框架</p><table><thead><tr><th>框架</th><th>作用</th></tr></thead><tbody><tr><td>原生语法</td><td>与早期 npm 能力的缺失、只能通过模板渲染实现组件化相比而言。现在的小程序已经能够做到前端工程化，并且植入前端生态中已有的一些理念，例如状态管理、CLI 工程化等等</td></tr><tr><td>渐进增强型框架</td><td>渐进增强型框架，更多的还是在小程序引入 npm 之后，有了更加开放的能力所带来的收益。这类框架一般依然是以小程序原生语法为主，只是在逻辑层引入了增强语法来优化应用性能或者提供更便捷的使用方法</td></tr><tr><td>转换类框架</td><td>相比于渐进增强型框架，转换类框架的使命是完全不同的。转换类框架的使命是让开发者几乎不用感受小程序原生语法，更大程度对接前端已有生态，并且可以实现<strong>「一码多端」的业务诉求，只是最后的构建产物</strong>为小程序代码。随着这几年的发展，转换类框架大的方面分为两种 – 编译时/运行时。下文会分别针对两种方案进行分析。</td></tr></tbody></table><p><a href="https://juejin.cn/post/6844903606089416717">使用mpvue开发微信小程序</a></p><table><thead><tr><th>框架</th><th>内容</th></tr></thead><tbody><tr><td>原生开发</td><td></td></tr><tr><td><a href="https://github.com/Tencent/wepy">wepy </a></td><td>WePY 是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。比较显著的特点是，类Vue开发风格 和 小程序细节优化，如请求列队，事件优化等。</td></tr><tr><td><a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a></td><td><a href="http://mpvue.com/">mpvue.com</a>是一个使用 Vue.js 开发小程序的前端框架。和 wepy 不同的地方是，它希望在未来最理想的状态是，可以一套代码可以直接跑在多端：WEB、小程序（微信和支付宝）、Native（借助weex）</td></tr><tr><td><a href="https://github.com/Tencent/omi/blob/master/README.CN.md">omi</a></td><td></td></tr><tr><td><a href="https://github.com/NervJS/taro">taro</a>(react)</td><td></td></tr><tr><td>uni-app</td><td></td></tr></tbody></table><p>优点</p><ul><li>快速迭代</li><li>减少开发成本</li><li>跨平台共享</li><li>提升开发体验</li></ul><h2 id="mpvue-1"><a href="#mpvue-1" class="headerlink" title="mpvue"></a>mpvue</h2><h2 id="taro-1"><a href="#taro-1" class="headerlink" title="taro"></a>taro</h2><ul><li><p>多端统一开发解决方案</p></li><li><p><input disabled="" type="checkbox"> <a href="https://www.imooc.com/learn/1084">Taro多端框架开发外卖首页-慕课网</a></p></li><li><p><input disabled="" type="checkbox"> 官网文档：<a href="http://taro-docs.jd.com/taro/docs/README/index.html">http://taro-docs.jd.com/taro/docs/README/index.html</a><br>  GitHub地址：<a href="https://github.com/nervjs/taro">https://github.com/nervjs/taro</a></p></li><li><p>taro 京东开源的小程序框架，多端统一框架，支持一键生成多个平台小程序。</p></li></ul><h2 id="weui-1"><a href="#weui-1" class="headerlink" title="weui"></a>weui</h2><ul><li>官网文档：<a href="https://weui.io/">https://weui.io/</a></li><li>GitHub地址：<a href="https://github.com/Tencent/weui">https://github.com/Tencent/weui</a></li></ul><h2 id="wepy-1"><a href="#wepy-1" class="headerlink" title="wepy"></a>wepy</h2>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)vue2</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vue2.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vue2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><p>API</p><blockquote><p>两种API</p><ul><li>Option API  Vue2   vs Compition API Vue3(也可以用Option API 推荐前者)</li></ul><p>两种文件</p><ul><li>HTML  vs Vue</li></ul><p>Option API</p><ul><li><code>data:{} computed:{}  methods:{}  watch(){}  </code></li><li><code>beforeCreate\Mounted\Update\Destory\ 、created\mounted\updated\desotryed</code></li></ul><p>指令</p><p>- </p><p>组件</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>是什么：Web界面的前端框架、响应式编程、组件化、关注视图层、构建用户界面的渐进式框架、自底向上逐层应用</li><li>优点：小、高效(虚拟DOM)、双向数据绑定、生态丰富、学习成本低</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>cdn &amp;&amp; npm/yarn vue-cli</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">// vue-cli vue -V @vue/cli版本<br>npm install @vue/cli // 安装 vue-cli<br>yarn global add @vue/cli<br>vue create my-project // 创建项目<br>// webpack<br>vue init webpack my-project<br></code></pre></td></tr></tbody></table></figure><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>data computed methods watch</p><ul><li>data 数据</li><li>computed：{ }<code>解决模板过重的问题 把模板中的复杂逻辑进行抽取出来</code>  computed 是计算属性，数据的逻辑运算 可以理解为经过计算的 data的属性 计算属性是基于它们的响应式依赖进行缓存的<ul><li>get(){ return } 和 set(val){ }</li></ul></li><li>methods 事件</li><li>watch 侦听属性  观察和响应Vue实例上的数据变动 每时每刻监听数据或者动作的变化 一个数据依赖于其他数据，那么把这个数据设计为 computed 的 如果你需要在某个数据变化时做一些事情，使用 watch 来观察这个数据变化</li></ul><p>前缀 <code>$</code> : Vue 实例还暴露了一些有用的实例 property 与方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// html</span><br>{{ msg }}<br>{{ reversed }}<br><span class="hljs-comment">// html</span><br><span class="hljs-keyword">var</span> obj = {  }<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj) <span class="hljs-comment">// 阻止修改现有的 property</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">"#app"</span>,<br>  <span class="hljs-comment">// data:obj</span><br>  <span class="hljs-attr">data</span>:{<br>    <span class="hljs-comment">// data():{ }</span><br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">"ZSH"</span>,<br>    <span class="hljs-attr">msg</span>:<span class="hljs-string">"Message"</span>,<br>    <span class="hljs-attr">newTodoText</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-attr">visitCount</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">hideCompletedTodos</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">todos</span>: [<span class="hljs-string">'zs'</span>,<span class="hljs-string">'sz'</span>,<span class="hljs-string">'wo'</span>],<br>    <span class="hljs-attr">error</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">items</span>:[<br>      { <span class="hljs-attr">name</span>:<span class="hljs-string">'zs'</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span> },<br>      { <span class="hljs-attr">name</span>:<span class="hljs-string">'sh'</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span> }<br>    ]<br>  },<br>  <span class="hljs-attr">watch</span>:{<br>    <span class="hljs-comment">// 没有输出</span><br>    <span class="hljs-attr">firstName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newval, oldval</span>) {}<br>  },<br>  <span class="hljs-attr">computed</span>:{ <span class="hljs-comment">// 计算属性</span><br>    <span class="hljs-comment">// 写法一 ：默认使用get</span><br>    <span class="hljs-comment">// 没有getter</span><br>    <span class="hljs-comment">// 输出到模块</span><br>    <span class="hljs-title function_">num</span>(<span class="hljs-params"></span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span><br>    },<br>    <span class="hljs-comment">// vm.num = 1000 ==&gt; set</span><br>    <span class="hljs-attr">num</span>:{<br>       <span class="hljs-comment">// get:function(){}</span><br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>        }<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">newVale</span>){<br>        }<br>    },<br>    <span class="hljs-title function_">reversed</span>(<span class="hljs-params"></span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>.<span class="hljs-title function_">reserve</span>()<br>    }<br>  },<br>  <span class="hljs-attr">methods</span>:{  <span class="hljs-comment">// 方法</span><br>    <span class="hljs-comment">//alert:function(){  } </span><br>    <span class="hljs-comment">// 或者 推荐</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>){}<br>  },<br>  <span class="hljs-attr">watch</span>:{  <span class="hljs-comment">//侦听器</span><br>    <br>  },<br>  <span class="hljs-attr">filters</span>:{},<br>  <span class="hljs-attr">directives</span>:{},<br>  <span class="hljs-attr">components</span>:{<br>      <span class="hljs-attr">login</span>:{<br>          <span class="hljs-attr">template</span>:<span class="hljs-string">'#tpl2'</span><br>      }<br>  },<br>  <span class="hljs-comment">// 八个生命周期</span><br>  <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-comment">// beforeCreate:function(){},</span><br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforeMount</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>){},<br>})<br><br>vm.<span class="hljs-property">message</span> == data.<span class="hljs-property">message</span><br>vm.<span class="hljs-property">message</span> = <span class="hljs-number">100</span><br>data.<span class="hljs-property">message</span> = <span class="hljs-number">200</span><br>vm.<span class="hljs-property">$data</span> === data<br>vm.<span class="hljs-property">$el</span> === el === <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"app"</span>)<br>vm.$watch(<span class="hljs-string">"a"</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) {}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> app <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span><br><span class="hljs-comment">// vue2</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">"app"</span><br>})<br><br><span class="hljs-comment">// App.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{<br> <br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><blockquote><ul><li>v-html/text/module/bind/once/for/if/else-if/else/show/on/pre/clock</li></ul></blockquote><p>双大括号</p><p><code>{{}}</code></p><ul><li>Mustache”语法 (双大括号) 的文本插值{数据绑定}</li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>插入 HTML 需要绑定在某个元素上且能避免编译前闪现问题</li><li>不建议在网站上直接动态渲染任意 HTML 片段，很容易导致 XSS 攻击</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>插入文本 没有闪烁问题 解决<code>{{ text }} 中闪现的问题  会覆盖元素中原本的内容</code></li><li>插值表达式 <code>{{}}</code> 只会替换自已的这个占位符，不会把整个元素的内容清空</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li><p>表单绑定</p></li><li><p>input textarea select </p></li><li><p>v-modul 指令在表单 <code>input textarea select</code> 元素上创建双向数据绑定<br>它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是<code>语法糖</code>。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;textarea/input v-model=<span class="hljs-string">"message"</span> placeholder=<span class="hljs-string">"输入内容"</span>&gt;&lt;/textarea&gt;<br><span class="hljs-comment">// 多选 data: toggle:[]</span><br>&lt;input type="checkbox" id="jack" value="Jack" v-model="toggle"&gt;<br>&lt;label for="jack"&gt;Jack&lt;/label&gt;<br>&lt;input type="checkbox" id="john" value="John" v-model="toggle"&gt;<br>&lt;label for="john"&gt;John&lt;/label&gt;<br>// 当选中时<br>vm.toggle === 'yes'<br>// 当没有选中时<br>vm.toggle === 'no'<br><br>// 单选 picked<br>&lt;input type="radio" id="one" value="One" v-model="picked"  v-bind:value="a"&gt; //绑定值<br>  // vm.picked === vm.a<br>&lt;label for="one"&gt;One&lt;/label&gt;<br>&lt;input type="radio" id="two" value="Two" v-model="picked"&gt;<br>&lt;label for="two"&gt;Two&lt;/label&gt;<br><br>// 选项卡<br>&lt;select v-model="selected" multiple&gt;<br>    &lt;option disabled&gt;请选择&lt;/option&gt;<br>    &lt;option&gt;A&lt;/option&gt;<br>    &lt;option&gt;B&lt;/option&gt;<br>    &lt;option&gt;C&lt;/option&gt;<br> &lt;/select&gt;<br><br>&lt;select v-model="selected"&gt;<br>  &lt;option v-for="option in options" v-bind:value="option.value"&gt; // v-bind:value绑定<br>    {{ option.text }}<br>  &lt;/option&gt;<br>&lt;/select&gt;<br>options: [<br>      { text: 'One', value: 'A' },<br>      { text: 'Two', value: 'B' },<br>      { text: 'Three', value: 'C' }<br>]<br></code></pre></td></tr></tbody></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><ul><li>标明元素或组件只能渲染一次 文本插值不可改变，执行一次插值 数据改变时 插值的内容不会更新</li></ul><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><ul><li><p>属性绑定 <code>:id="id" :src="xxx" :class=""</code></p></li><li><p>绑定 DOM 元素属性 缩写：<code>:href="url"</code> 绑定属性值</p></li><li><p>动态参数的缩写(2.6.0+) <code>:[key]=url</code></p></li><li><p>class(类) 和 style(内联样式)绑定 两种方法动态绑定css</p><ul><li>class 类 <ul><li><code>:class="[' ',' ']"</code></li><li><code>:class="{ active: isActive }" + data控制ture或false +style样式 </code></li></ul></li></ul></li></ul><p></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>:{ <br>  <span class="hljs-attr">classObject</span>:{ <br>    <span class="hljs-attr">active</span>:<span class="hljs-literal">true</span>, <br>    <span class="hljs-string">'text-danger'</span>:<span class="hljs-literal">false</span> <br>  } <br>}<br><br><span class="hljs-comment">// [] 绑定的都是类名  {} 中的true或false改变值</span><br>:<span class="hljs-keyword">class</span>=<span class="hljs-string">"['red', 'thin']"</span><br><br>:<span class="hljs-keyword">class</span>=<span class="hljs-string">"['red', 'thin', isactive?'active':'']"</span>&gt;<br>  <br><span class="hljs-comment">// 数组中嵌套对象</span><br>:<span class="hljs-keyword">class</span>=<span class="hljs-string">"['red', 'thin', {'active': isactive}]"</span><br><span class="hljs-comment">// 使用对象</span><br>:<span class="hljs-keyword">class</span>=<span class="hljs-string">"{ red:true, italic:false, active:true, thin:true }"</span><br>:<span class="hljs-keyword">class</span>=<span class="hljs-string">"{ active:isActive,Error:hasError }"</span><br><br>.<span class="hljs-property">active</span> {<br>    <span class="hljs-attr">color</span>: red;<br>    font-<span class="hljs-attr">size</span>: 20px;<br>}<br><br><span class="hljs-comment">// 组件中使用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">'my-component'</span>,{ <br>  <span class="hljs-attr">template</span>:<span class="hljs-string">'&lt;p class="foo bar"&gt;&lt;/p&gt;'</span> <br>})<br>&lt;my-component <span class="hljs-keyword">class</span>=<span class="hljs-string">"bar boo"</span> :<span class="hljs-keyword">class</span>=<span class="hljs-string">"{ active:isActive }"</span>&gt;&lt;/my-component&gt;<br>data{ <span class="hljs-attr">isActive</span>:<span class="hljs-literal">true</span> }<br>&lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">"foo bar boo active"</span>&gt;&lt;/p&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>style 内联样式 对象 { }   data中的对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 直接定义样式</span><br>:style=<span class="hljs-string">"{color: 'red', 'font-size': '40px'}"</span><br><br><span class="hljs-comment">// data中定义样式</span><br><span class="hljs-attr">data</span>:{ <br> <span class="hljs-attr">h1StyleObj</span>: { <br>     <span class="hljs-attr">color</span>: <span class="hljs-string">'red'</span>, <br>     <span class="hljs-string">'font-size'</span>: <span class="hljs-string">'40px'</span>, <br>     <span class="hljs-string">'font-weight'</span>: <span class="hljs-string">'200'</span><br>   }<br>}<br>:style=<span class="hljs-string">"h1StyleObj"</span><br><br><span class="hljs-comment">// 数组绑定多个样式</span><br>:style=<span class="hljs-string">"[h1StyleObj,h1StyleObj2]"</span><br></code></pre></td></tr></tbody></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>事件绑定 <code>@</code></p><ul><li>动态参数的缩写 (2.6.0+)  <code>@[event]="doSomething"</code></li></ul><p>v-for 列表循环 和v-bind:key  key属性</p><ul><li><strong>不推荐</strong>同时在同一元素中使用 <code>v-if</code> 和 <code>v-for</code>。当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级  v-for &gt; v-if   <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。当你只想为<em>部分</em>项渲染节点时，这种优先级的机制会十分有用</li><li>如果你的目的是有条件地跳过循环的执行，那么可以将 <code>v-if</code> 置于外层元素 (或 [`) 上</li><li>在组件上使用 v-for</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul v-<span class="hljs-keyword">if</span>=<span class="hljs-string">"todos.length"</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"todo in todos"</span>&gt;</span>{{ todo }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>No todos left!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in items"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in items"</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-bind:item</span>=<span class="hljs-string">"item"</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-bind:index</span>=<span class="hljs-string">"index"</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">"item.id"</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>key：vue用v-for正在更新已渲染过的元素列表时，默认用<code>就地复用的策略</code>。如果数据项的顺序被改变，Vue 将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。（DOM 改变顺序，不是修改 DOM,而是重新渲染每一个元素）<br>这个默认的模式是高效的，但是<strong>只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。<br>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><p>尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。<br>因为它(key)是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联</p><p>不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用字符串或数值类型的值</p></blockquote><ul><li>in 后面我们放过普通数组 对象数组 对象 数字</li><li>of 替代 in 作为分隔符，接近 JavaScript 迭代器的语法</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>:{<br>    <span class="hljs-attr">items</span>:[<br>      {},{},{}<br>    ],<br>    <span class="hljs-attr">object</span>: { <br>      <span class="hljs-attr">title</span>: <span class="hljs-string">'How to do lists in Vue'</span>,<br><span class="hljs-attr">author</span>: <span class="hljs-string">'Jane Doe'</span>,<br>  <span class="hljs-attr">publishedAt</span>: <span class="hljs-string">'2016-04-10'</span> <br>    } <br>}<br>&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"item in items"</span>&gt; {{ item.<span class="hljs-property">name</span> }} &lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item of items"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,key,index) in items"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span>&gt;</span>{{item}}+{{index}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-comment">// index是当前选项的索引值</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in 10"</span>&gt;</span>{{i}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value,name,index) in object"</span>&gt;</span> {{index}} {{value}} {{ name }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>数组更新</p><ul><li>push pop shift unshift splice sort reverse</li><li>filter  concat slice  替换数组</li></ul><p>v-if and v-show 切换元素的显示和隐藏</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><ul><li><p>/ v-else /v-else-if</p></li><li><p>控制元素的显隐、运行条件不大时、更高的切换消耗、操作 DOM(true/false)的增删来显隐</p></li><li><p>惰性的、初始渲染时条件为假，则什么都不用做，为真开始局部编译（编译会被缓存起来）</p></li><li><p>真实的条件渲染</p></li><li><p>通过操作 DOM(true/false)的增删来显隐、</p></li><li><p>更高的切换消耗(元素的创建与销毁)</p></li><li><p>运行条件不大时</p></li><li><p>切换、更高的切换消耗、运行时条件不大可能改变时用 v-if  每次都会重新删除或创建元素，是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建 <strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">"hidden"</span>&gt;<span class="hljs-title class_">Vue</span> is awesome!&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>这是第二段文字<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="hljs-attr">data</span>:{ <span class="hljs-attr">hidden</span>:<span class="hljs-literal">true</span> }<br>&lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">"type === 'A'"</span>&gt;A&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"type === 'B'"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"type === 'C'"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>NOT A/B/C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"loginType === 'username'"</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ul><li>元素始终被编译并保留，只是简单地基于 CSS 切换</li><li>通过切换 Css 的 display 的属性(style=”display:none”)来显隐、</li><li>更高的初始渲染消耗(display 属性控制元素的显示与消失)</li><li>不支持 template 语法</li><li>控制元素的显隐、更高的初始渲染消耗 频繁切换、切换 Css 的 display 的属性(style=”display:none”)来显隐 显隐、更高的初始渲染消耗、元素始终会被渲染并保留在 DOM 中、不会重新进行 DOM 的删除和创建操作，简单地切换元素的 CSS property <code>display</code>、不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>、更高的初始渲染消耗、频繁切换 v-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换</li></ul><h4 id="v-el-、v-ref-废弃"><a href="#v-el-、v-ref-废弃" class="headerlink" title="v-el 、v-ref 废弃"></a>v-el 、v-ref 废弃</h4><ul><li><p><code>vue1.0中的v-el和v-ref在2.0中被废弃了。</code></p></li><li><p>v-el 为 DOM 元素注册了一个索引，可以直接访问 DOM 元素（通过<code>v-el</code>我们可以获取到<code>DOM</code>对象）</p></li><li><p>可以通过实例的<code>$els</code>属性调用</p></li><li><p><code>v-el:some-el</code></p></li><li><p><code>this.$els.some-el</code></p></li><li><p>通过 <code>this.$els</code>获取相应的 DOM 元素</p></li></ul><p>v-ref 通过<code>v-ref</code>获取到整个组件（<code>component</code>）的对象</p><ul><li>可以通过实例的<code>$refs</code>属性调用</li><li>父组件注册子组件索引方便访问<ul><li><code>v-ref:some-ref</code></li><li><code>this.$refs.some-ref</code></li></ul></li></ul><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">解决双大括号闪烁 在元素上添加了一个[v-cloak]的属性，直到关联的实例结束编译 解决 插值表达式闪烁的问题（网速慢，页面会出现插入表达式{{ }} 的问题<br></code></pre></td></tr></tbody></table></figure><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>编译时跳过当前元素和它的子元素。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译，作用显示出<code>{{双大括号}}</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">// v-el 、v-ref `vue1.0中的属性 v-el和v-ref在2.0中被废弃了。`<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-cloak</span>&gt;</span>Yout input is{{ message }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-el:demo</span>&gt;</span>这是一段话<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>vm.$els.demo.innerText // 这是一段话<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>组件对象<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">demo</span> <span class="hljs-attr">v-ref:mycom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">demo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"getCom"</span>&gt;</span>获取组件对象<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>vm.$refs.mycom<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"HH"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><blockquote><ul><li>全局： <code>Vue.directive('name',{ })</code><ul><li>bind/unbind(el, binding, vnode){} </li><li>inserted/componentUpdated(el, binding, vnode) {}</li><li>update(el, binding, vnode, oldVnode)</li></ul></li><li>局部<ul><li><code>directives：{ name:{ } }</code></li></ul></li></ul></blockquote><p>注册<code>v-*</code>自定义指令，以便封装对 DOM 元素的重复处理行为，提高代码的复用效率<br>复用 JS 代码，指令方便 将 JS 代码挂载具体的 DOM 元素上<br>创建、注册自定义指令，以及讲述指令相关属性钩子函数</p><ul><li>全局的自定义指令</li><li>局部的自定义指令</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">"Vuedemo"</span>, {<br>    <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding, vnode</span>) {},<br>    <span class="hljs-title function_">inserted</span>(<span class="hljs-params">el, binding, vnode</span>) {},<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params">el, binding, vnode, oldVnode</span>) {},<br>    <span class="hljs-title function_">componentUpdated</span>(<span class="hljs-params">el, binding, vnode</span>) {},<br>    <span class="hljs-title function_">unbind</span>(<span class="hljs-params">el, binding, vnode</span>) {},<br>});<br></code></pre></td></tr></tbody></table></figure><h4 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义指令的使用方式</span><br>&lt;input type=<span class="hljs-string">"text"</span> v-model=<span class="hljs-string">"searchName"</span> v-focus v-color=<span class="hljs-string">"'red'"</span> v-font-weight=<span class="hljs-string">"900"</span>&gt;<br><span class="hljs-comment">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'focus'</span>, {<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) { <span class="hljs-comment">// inserted 表示被绑定元素插入父节点时调用</span><br>    el.<span class="hljs-title function_">focus</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(el);<br>  }<br>});<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(id,definition)<br>&lt;div v-<span class="hljs-variable language_">global</span>-directive&gt;&lt;/div&gt;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">"focus"</span>, {<br>    <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) {<br>        el.<span class="hljs-property">fouce</span>;<br>    },<br>});<br></code></pre></td></tr></tbody></table></figure><h4 id="自定义局部指令"><a href="#自定义局部指令" class="headerlink" title="自定义局部指令"></a>自定义局部指令</h4><p>局部注册<br>组件的<code>directions选项</code>注册一个局部的自定义指令，该指令只能在当前组件中通过<code>v-local-direactive</code>的方式调用</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="hljs-attr">directives</span>: {<br>  <span class="hljs-attr">color</span>: { <span class="hljs-comment">// 为元素设置指定的字体颜色</span><br>    <span class="hljs-title function_">bind</span>(<span class="hljs-params">el, binding</span>) {<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span>;<br>    }<br>  },<br>        <span class="hljs-string">'font-weight'</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding2</span>) { <span class="hljs-comment">// 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br>          el.<span class="hljs-property">style</span>.<span class="hljs-property">fontWeight</span> = binding2.<span class="hljs-property">value</span>;<br>        }<br>      }<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 局部注册</span><br><span class="hljs-keyword">var</span> comp = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>({<br>    <span class="hljs-attr">directives</span>: {<br>        <span class="hljs-attr">localDirective</span>: {}, <span class="hljs-comment">// 采用驼峰式命名</span><br>    },<br>});<br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,<br>    <span class="hljs-attr">data</span>: {},<br>    <span class="hljs-attr">directives</span>: {<br>        <span class="hljs-attr">color</span>: {<br>            <span class="hljs-title function_">bind</span>(<span class="hljs-params">el</span>) {<br>                el.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">"red"</span>;<br>            },<br>        },<br>    },<br>});<br></code></pre></td></tr></tbody></table></figure><p>钩子函数</p><blockquote><p>事件（function）</p><p>钩子函数（hook 函数）[监听函数]</p><p>钩子函数和回调函数都是事件处理函数</p><p>钩子函数其实和回调是一个概念，当系统执行到某处时，检查是否有 hook，有则回调</p><p>钩子函数：js 派函数监听事件 =&gt; <code>监听函数</code>就是所谓的钩子函数 =&gt; 函数钩取事件 （函数自动找事件 =&gt; 钩子函数）自动</p><p>回调函数：js 预留函数给 dom 事件，dom 事件调用 js 预留的函数 =&gt; 事件派发给函数：(事件调用函数=&gt;回调函数) 手动</p><p><em>dom 通过事件通知 js 的过程即是回调，对应的函数就是回调函数</em></p><p><em>js 通过监听函数得知事件的过程即是钩取，对应的函数就是钩子函数</em><br>一个指令定义对象可以提供了五个钩子函数（可选）可以理解成指令的（生命周期的）<br>bind (绑定)==&gt; inserted(插入) ==&gt; update(更新) ==&gt; componentUpdated(组件和子组件 全部更新调用) ==&gt; unbind(解绑)</p><p><code>绑定、插入、更新、VNode更新、解绑</code></p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li>componentUpdated：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li>unbind：只调用一次，指令与元素解绑</li></ul></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">"demo"</span>, {<br>    <span class="hljs-title function_">bind</span>(<span class="hljs-params"></span>) {},<br>    <span class="hljs-title function_">inserted</span>(<span class="hljs-params"></span>) {},<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) {},<br>    <span class="hljs-title function_">componentUpdated</span>(<span class="hljs-params"></span>) {},<br>    <span class="hljs-title function_">unbind</span>(<span class="hljs-params"></span>) {},<br>});<br></code></pre></td></tr></tbody></table></figure><p>钩子函数参数</p><blockquote><ul><li>三个参数：el(DOM 元素)、binding、vnode（vue 虚拟节点）</li><li>el：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象 与动态钩子参数</li><li>{name、value、oldValue、expression、arg、modifiers }</li><li>name 指令名</li><li>value 指令的绑定值 binding.value 数字</li><li>oldValue 指令绑定的前一个值</li><li>expression 字符串形式的指令表达式 binding.expression 字符串</li><li>arg 传给指令的参数 binding.arg</li><li>modifiers 一个包含修饰符的对象</li><li>vnode：Vue 编译生成的虚拟节点。</li><li>oldVnode：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset"><code>dataset</code></a> 来进行。</p><p>value 和 expression 的区别</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">"hook-arguments-example"</span> v-<span class="hljs-attr">demo</span>:foo.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>=<span class="hljs-string">"message"</span>&gt;&lt;/div&gt;<br><span class="hljs-comment">// v-demo:foo.a.b="message"  v-demo:[argument].a.b="value"</span><br><span class="hljs-comment">// .a.b modifiers 一个包含修饰符的对象</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">"demo"</span>,{<br><span class="hljs-title function_">bind</span>(<span class="hljs-params">el,binding,vnode</span>){<br><span class="hljs-comment">//el.innerText = ‘’</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(el)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(binding)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">lg</span>(vnode)<br>        <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span><br>        el.<span class="hljs-property">innerHTML</span> =<br>            <span class="hljs-string">'name: '</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">name</span>) + <span class="hljs-string">'&lt;br&gt;'</span> +<br>            <span class="hljs-string">'value: '</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">value</span>) + <span class="hljs-string">'&lt;br&gt;'</span> +<br>            <span class="hljs-string">'expression: '</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">expression</span>) + <span class="hljs-string">'&lt;br&gt;'</span> +<br>            <span class="hljs-string">'argument: '</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">arg</span>) + <span class="hljs-string">'&lt;br&gt;'</span> +<br>            <span class="hljs-string">'modifiers: '</span> + <span class="hljs-title function_">s</span>(binding.<span class="hljs-property">modifiers</span>) + <span class="hljs-string">'&lt;br&gt;'</span> +<br>            <span class="hljs-string">'vnode keys: '</span> + <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(vnode).<span class="hljs-title function_">join</span>(<span class="hljs-string">', '</span>)<br>},<br>    <span class="hljs-title function_">inserted</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">componentUpdated</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">unbind</span>(<span class="hljs-params"></span>){}<br>}<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">'#hook-arguments-example'</span>,<br>  <span class="hljs-attr">data</span>: {<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">'hello!'</span><br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: <span class="hljs-string">"demo"</span><br>//  message: <span class="hljs-string">'hello!'</span><br>value: <span class="hljs-string">"hello!"</span><br>expression: <span class="hljs-string">"message"</span><br>argument: <span class="hljs-string">"foo"</span> // 参数<br>modifiers: {<span class="hljs-string">"a"</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">"b"</span>:<span class="hljs-literal">true</span>}<br>vnode keys: tag, data, children, text, elm, ns, context, fnContext, fnOptions, fnScopeId, key, componentOptions, componentInstance, parent, raw, isStatic, isRootInsert, isComment, isCloned, isOnce, asyncFactory, asyncMeta, isAsyncPlaceholde<br></code></pre></td></tr></tbody></table></figure><p>动态参数</p><p>指令的参数可以是动态的。例如，在 <code>v-mydirective:[argument]="value"</code> 中，<br><code>argument</code> 参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用。<br>格式</p><ul><li>arg</li><li>value 可以是对象</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-pin:</span>[<span class="hljs-attr">arg</span>]=<span class="hljs-string">"value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>`v-mydirective:[argument]="value"` binding.value = 100 binding.expression = 参数<br>:[arg] binding.arg = message // 重点 arg 要注册到data中 data:{ arg:'message' }<br><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-pin:</span>[<span class="hljs-attr">direction</span>]=<span class="hljs-string">"200"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> // v-pin:[参数]<br></code></pre></td></tr></tbody></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><blockquote><p><code>v-on:click.xxx="" Or @click.xxx="" @click.事件修饰符="btnHandler"</code></p><p>v-on:事件修饰符是由点开头的指令后缀来表示的、修饰符可以串联</p><ul><li>事件修饰符： <code>.stop 阻止冒泡 .prevent 默认事件 .capture 捕获 .self 事件不是从内部元素触发 .once 触发一次 .passive 修饰符尤其能够提升移动端的性能</code></li><li>按钮修饰符：@keyup +<code>.enter .tab .delete .esc .space .up .down .left .right</code><ul><li>自定义按键修饰符别名:全局 <code>config.keyCodes</code> 对象</li></ul></li><li>系统修饰符: <code>.ctrl .alt .shift .meta</code></li><li>鼠标按键修饰符：<code>.left .right .middle</code></li></ul><p>v-model:修饰符 <code>.lazy 在鼠标离开输入框时进行同步  .number .trim  debounce 延时</code></p><ul><li>v-model.lazy/.number/.trim=”msg”</li><li>.number 自动将用户的输入值转为数值类型、没有办法输入字符，只能输入数字</li><li>.trim 自动过滤用户输入的首尾空白字符 自动在鼠标离开input框时</li></ul></blockquote><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>.sync</code></td><td>双向绑定</td></tr><tr><td><code>.once</code></td><td>单次绑定</td></tr><tr><td><code>.camel</code></td><td>将绑定的特性名字转换回驼峰命名<br></td></tr></tbody></table><p>v-model</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>number</td><td>用户输入自动转换为 Number 类型</td></tr><tr><td>lazy</td><td>添加一个 lazy 特性，从而将数据改到 change 事件中发生</td></tr><tr><td>debounce</td><td>设置一个最小的延时，每次敲击之后延时同步输入框的值域数据</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input v-model=<span class="hljs-string">"msg"</span> number lazy debounce=<span class="hljs-string">"5000"</span> /&gt;<br></code></pre></td></tr></tbody></table></figure><p>事件修饰符</p><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><ul><li>修饰符是由点开头的指令后缀来表示的</li><li>修饰符可以串联</li></ul><table><thead><tr><th>事件修饰符</th><th>作用</th></tr></thead><tbody><tr><td><code>.stop</code></td><td>阻止单击事件继续传播 阻止冒泡 事件 默认从里到外 阻止外层事件</td></tr><tr><td><code>.prevent</code></td><td>阻止默认事件 a 链接的跳转行为 提交事件不再重载页面</td></tr><tr><td><code>.capture</code></td><td>添加事件监听器时使用事件捕获模式、即内部元素触发的事件先在此处理，然后才交由内部元素进行处理</td></tr><tr><td><code>.self</code></td><td>只当在 event.target 是当前元素自身时触发处理函数 即事件不是从内部元素触发的 只当事件在该元素本身（比如不是子元素）触发时触发回调 阻止了当前元素的冒泡事件</td></tr><tr><td><code>.once</code></td><td>2.1.4 新增、点击事件将只会触发一次</td></tr><tr><td><code>.passive</code></td><td>2.3.0 新增、Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">"doThis"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">"onSubmit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">"doThat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">"doThis"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="hljs-comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">"doThat"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">"doThis"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>// 不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。<br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="hljs-comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span><br><span class="hljs-comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:scroll.passive</span>=<span class="hljs-string">"onScroll"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>// 这个 .passive 修饰符尤其能够提升移动端的性能。<br>// 不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。<br></code></pre></td></tr></tbody></table></figure><p>按钮修饰符</p><blockquote><p>修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。<br>常规按键<br>按键码 <code>@keyup.</code></p></blockquote><ul><li><code>.enter</code> 回车键</li><li><code>.tab</code>制表键</li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code>  逃逸键</li><li><code>.space</code>  空格键</li><li>方向键<ul><li><code>.up</code> 上</li><li><code>.down</code>下</li><li><code>.left</code> 左</li><li><code>.right</code> 右</li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">"greet"</span> @<span class="hljs-attr">keyup.up</span>=<span class="hljs-string">"up"</span>&gt;</span><br> greet(){<br> console.log('msg');<br> }<br>up(){<br>console.log('upup')<br>}<br></code></pre></td></tr></tbody></table></figure><p>自定义按键修饰符别名:全局 <code>config.keyCodes</code> 对象<a href="https://cn.vuejs.org/v2/api/#keyCodes">自</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 可以使用 `v-on:keyup.f1`<br>Vue.config.keyCodes.f1 = 112<br></code></pre></td></tr></tbody></table></figure><p>系统修饰键</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!-- Alt + C --&gt;<br>&lt;input v-on:keyup.alt.67="clear"&gt;<br>&lt;!-- Ctrl + Click --&gt;<br>&lt;div v-on:click.ctrl="doSomething"&gt;Do something&lt;/div&gt;<br></code></pre></td></tr></tbody></table></figure><p>鼠标按键修饰符</p><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.mideele</code></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>监听事件</p><ul><li>v-on:click=“func”  <code>@click="func"</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">@click=<span class="hljs-string">"greet('Hi')"</span><br>v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">"warn('Message',$event)"</span><br><br><span class="hljs-attr">methods</span>:{<br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params">event</span>){<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);<br>  },<br>  <span class="hljs-title function_">warn</span>(<span class="hljs-params">message,event</span>){<br>    <span class="hljs-keyword">if</span>(event){<br>        event.<span class="hljs-title function_">preventDefault</span>()<br>      }<br>  }  <br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><ul><li>filters:{}</li><li>Vue.filter(“name”, function (value) {})</li></ul></blockquote><p>Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。<br>过滤器可以用在两个地方：</p><ul><li>mustache 插值</li><li>v-bind 表达式<br>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示<code> |</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">{{  message | capitalize; }}<br>&lt;div v-<span class="hljs-attr">bind</span>:id=<span class="hljs-string">"rawId | formatId"</span>&gt;&lt;/div&gt;;<br></code></pre></td></tr></tbody></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器</p><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><p>私有 <code>filters</code> 定义方式：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">filters</span>:{<br><span class="hljs-attr">capitalize</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>){<br>        <span class="hljs-keyword">if</span>(!value) <span class="hljs-keyword">return</span> <span class="hljs-string">''</span><br>        value = value.<span class="hljs-title function_">toString</span>()<br>        <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{{item.ctime | dataFormat('yyyy-mm-dd')}}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">filters</span>: { <span class="hljs-comment">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br>    <span class="hljs-title function_">dataFormat</span>(<span class="hljs-params">input, pattern = <span class="hljs-string">""</span></span>) { <span class="hljs-comment">// 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错</span><br>      <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(input);<br>      <span class="hljs-comment">// 获取年月日</span><br>      <span class="hljs-keyword">var</span> y = dt.<span class="hljs-title function_">getFullYear</span>();<br>      <span class="hljs-keyword">var</span> m = (dt.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>);<br>      <span class="hljs-keyword">var</span> d = dt.<span class="hljs-title function_">getDate</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>);<br>      <span class="hljs-comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br>      <span class="hljs-comment">// 否则，就返回  年-月-日 时：分：秒</span><br>      <span class="hljs-keyword">if</span> (pattern.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">'yyyy-mm-dd'</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${y}</span>-<span class="hljs-subst">${m}</span>-<span class="hljs-subst">${d}</span>`</span>;<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">// 获取时分秒</span><br>        <span class="hljs-keyword">var</span> hh = dt.<span class="hljs-title function_">getHours</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>);<br>        <span class="hljs-keyword">var</span> mm = dt.<span class="hljs-title function_">getMinutes</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>);<br>        <span class="hljs-keyword">var</span> ss = dt.<span class="hljs-title function_">getSeconds</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${y}</span>-<span class="hljs-subst">${m}</span>-<span class="hljs-subst">${d}</span> <span class="hljs-subst">${hh}</span>:<span class="hljs-subst">${mm}</span>:<span class="hljs-subst">${ss}</span>`</span>;<br>      }<br>    }<br>  }<br></code></pre></td></tr></tbody></table></figure><blockquote><p>使用 ES6 中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">"capitalize"</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) {<br>    <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;<br>    value = value.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>});<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个全局过滤器</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">"dataFormat"</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">input, pattern = <span class="hljs-string">""</span></span>) {<br>    <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(input);<br>    <span class="hljs-comment">// 获取年月日</span><br>    <span class="hljs-keyword">var</span> y = dt.<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">var</span> m = (dt.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"0"</span>);<br>    <span class="hljs-keyword">var</span> d = dt.<span class="hljs-title function_">getDate</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"0"</span>);<br>    <span class="hljs-comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br>    <span class="hljs-comment">// 否则，就返回  年-月-日 时：分：秒</span><br>    <span class="hljs-keyword">if</span> (pattern.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">"yyyy-mm-dd"</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${y}</span>-<span class="hljs-subst">${m}</span>-<span class="hljs-subst">${d}</span>`</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">// 获取时分秒</span><br>        <span class="hljs-keyword">var</span> hh = dt.<span class="hljs-title function_">getHours</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"0"</span>);<br>        <span class="hljs-keyword">var</span> mm = dt.<span class="hljs-title function_">getMinutes</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"0"</span>);<br>        <span class="hljs-keyword">var</span> ss = dt.<span class="hljs-title function_">getSeconds</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"0"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${y}</span>-<span class="hljs-subst">${m}</span>-<span class="hljs-subst">${d}</span> <span class="hljs-subst">${hh}</span>:<span class="hljs-subst">${mm}</span>:<span class="hljs-subst">${ss}</span>`</span>;<br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h3 id="过滤器传递参数"><a href="#过滤器传递参数" class="headerlink" title="过滤器传递参数"></a>过滤器传递参数</h3><h4 id="多个过滤器串联"><a href="#多个过滤器串联" class="headerlink" title="多个过滤器串联"></a>多个过滤器串联</h4><p>过滤器可以串联 过滤</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">{{  message | filterA | filterB; }}<br></code></pre></td></tr></tbody></table></figure><p><code>message</code> ==&gt; <code>filterA</code> ==&gt; <code>filterB</code><br><code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。</p><h4 id="过滤器多个参数"><a href="#过滤器多个参数" class="headerlink" title="过滤器多个参数"></a>过滤器多个参数</h4><p>过滤器是 JavaScript 函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">{{ message | <span class="hljs-title function_">filterA</span>(<span class="hljs-string">"args1"</span>, <span class="hljs-string">"args2"</span>); }}<br><span class="hljs-comment">// message 第一个参数</span><br><span class="hljs-comment">// args1 第二个参数</span><br><span class="hljs-comment">// args2 第三个参数</span><br></code></pre></td></tr></tbody></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>什么是生命周期：从 Vue 实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期</p><p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期钩子</a>：就是生命周期事件的别名<br>生命周期钩子 = 生命周期函数 = 生命周期事件</p><p>创建（create） ==&gt; 挂载（mounted） ==&gt; 更新（updated） ==&gt; 销毁（destroy）</p><ul><li>beforeCreate created</li><li>beforeMount mounted</li><li>beforeUpdate updated</li><li>beforeDestory destroyed</li></ul><p>==创建期间的生命周期函数==：</p><ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性（调用报错 ）<code>组件刚刚被创建</code></li><li>created：实例已经在内存中创建 OK，此时 data 和 methods 已经创建 OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有<code> </code>挂载到页面·中 <code>挂载之前</code></li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示 <code>挂载之后</code></li></ul><p>==运行期间的生命周期函数==：</p><ul><li>beforeUpdate：状态更新之前 执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染 DOM 节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul><p>==销毁期间的生命周期函数==：</p><ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。<code>组件销毁前调用</code></li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<code>组件销毁后调用</code></li></ul><p>不要在选项 property 或回调上使用箭头函数 并没有 <code>this</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,<br>  <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforemount</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforeupdate</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>){},<br>});<br></code></pre></td></tr></tbody></table></figure><h2 id="动画-amp-amp-过渡"><a href="#动画-amp-amp-过渡" class="headerlink" title="动画 &amp;&amp; 过渡"></a>动画 &amp;&amp; 过渡</h2><p>使用过渡类名实现动画</p><ul><li><code>.v-enter-active 和 .v-leave-active 设置动画过渡的时间</code></li><li><code>.v-enter 和 .v-leave-to 设置动画进入和离开</code></li><li><code>transition 设置过渡的动画元素</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">/* 定义进入和离开时候的过渡状态 */<br>.v-enter-active,<br>.v-leave-active {<br>  transition: all 0.2s ease;<br>  position: absolute;<br>}<br>/* 定义进入过渡的开始状态 和 离开过渡的结束状态 */<br>.v-enter,<br>.v-leave-to {<br>  opacity: 0;<br>  transform: translateX(100px);<br>}<br><br><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isshow"</span>&gt;</span>动画哦<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>通过可以给`transtion标签添加name属性设置自定义v-前缀</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/* 定义进入和离开时候的过渡状态 */<br>   .fade-enter-active,<br>   .fade-leave-active {<br>       transition: all 0.2s ease;<br>       position: absolute;<br>   }<br>   /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */<br>   .fade-enter,<br>   .fade-leave-to {<br>       opacity: 0;<br>       transform: translateX(100px);<br>   }<br>&lt;transition name="fade"&gt;<br>       &lt;div v-show="isshow"&gt;动画哦&lt;/div&gt;<br>   &lt;/transition&gt;<br></code></pre></td></tr></tbody></table></figure><p>钩子函数 定义 transition 组件以及三个钩子函数 动画钩子函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;transition<br>        @before-enter=<span class="hljs-string">"beforeEnter"</span><br>        @enter=<span class="hljs-string">"enter"</span><br>        @after-enter=<span class="hljs-string">"afterEnter"</span><br>    &gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ball"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"flag"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/transition&gt;<br>    <br><span class="hljs-attr">methods</span>:{<br><span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">el</span>){<br>      el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">"translate(0,0)"</span>;<br>    };<br>  <span class="hljs-title function_">enter</span>(<span class="hljs-params">el,done</span>){<br>    el.<span class="hljs-property">offsetWidth</span><br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">"translate(150px,450px)"</span><br>    el.<span class="hljs-property">style</span>.<span class="hljs-property">transition</span>=<span class="hljs-string">"all 1s ease"</span><br>    <span class="hljs-title function_">done</span>()<br>    <span class="hljs-comment">//这里的done ,起始就是 afterEnter这个函数，也就是 done 是 afterEnter函数的引用</span><br>  },<br>    <span class="hljs-title function_">afterEnter</span>(<span class="hljs-params">el</span>){<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span><br>    }<br>}<br>}    <br></code></pre></td></tr></tbody></table></figure><p>transition-group</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">v</span>-enter,<br>   .<span class="hljs-property">v</span>-leave-to {<br>       <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(150px);<br>       <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span>;<br>   }<br>   .<span class="hljs-property">v</span>-enter-active,<br>   .<span class="hljs-property">v</span>-leave-active {<br>       <span class="hljs-attr">transition</span>: all 1s ease;<br>   }<br>&lt;transition-group&gt;<br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span>&gt;</span></span><br><span class="language-xml">               id：{{item.id}} name:{{item.name}}</span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>       &lt;/transition-group&gt;<br></code></pre></td></tr></tbody></table></figure><p>trasition-group 中 appear</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">// 给trasition-group 添加appear属性，实现页面展示出来时候，入场时候的效果<br>同岗位transition-group元素，设置tag属性，指定transition-group渲染为指定的元素，如果不指定tag属性，默认，渲染为span<br>标签 //<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">appear</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">"ul"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"del(index)"</span>&gt;</span><br>            id：{{item.id}} name:{{item.name}}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br>    //<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>列表的排序过渡<br><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.v-move{<br>  transition: all 0.8s ease;<br>}<br>.v-leave-active{<br>  position: absolute;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>拆分vue实例代码量 不同组件划分不同的功能模块</li><li>模块化： 是从<code>代码逻辑</code>的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从 <code>UI 界面</code>的角度进行划分的；前端的组件化，方便 UI 组件的重用；</li><li>组件命令方式<ul><li>kebab-case kebab-case (短横线分隔命名)</li><li>PascalCase PascalCase (首字母大写命名)</li></ul></li><li>注册方式<ul><li>全局注册：·</li><li>局部注册：<code>components:{ }</code> 进行局部注册</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// html</span><br><span class="hljs-comment">// 使用</span><br>&lt;component-name&gt;&lt;/component-name&gt;<br><br><span class="hljs-comment">// 注册方法 </span><br><span class="hljs-comment">// 方法一 直接使用 Vue.component</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">'component-name'</span>,{<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-keyword">return</span>{<br>      <br>    }<br>  }<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">'Message'</span>],<br><span class="hljs-attr">template</span>:<span class="hljs-string">'&lt;h1&gt;Hello {{ Message }} Vue2!!!&lt;h1&gt;'</span><br>})<br><br><span class="hljs-comment">// 方法二 Vue.extend 配合 Vue.component 方法</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Message</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>({<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">"content"</span>],<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">"&lt;h1&gt;{{ content }}&lt;/h1&gt;"</span>,<br>});<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">"message"</span>, <span class="hljs-title class_">Message</span>);<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">'register'</span>, <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>({<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;h1&gt;注册&lt;/h1&gt;'</span><br>}));<br><span class="hljs-comment">// 方法三 将模板字符串，定义到 script 标签中</span><br><span class="hljs-comment">// JS中</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tmpl"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"x-template"</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// HTML中 </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tpl"</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是通过template元素,在定义<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是一个或<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">"account"</span>, {<br>     <span class="hljs-attr">template</span>: <span class="hljs-string">"#tpl"</span>,<br>});<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">data</span>:{}, <span class="hljs-attr">xxx</span>:{}<br>  <span class="hljs-attr">components</span>:{<br>  <span class="hljs-attr">son</span>:{<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-keyword">return</span> { }<br>}<br>}<br>}<br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue</span><br>#app<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-keyword">return</span>{}<br>  },<br>  <span class="hljs-title function_">computed</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">watch</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>){}<br>}<br></code></pre></td></tr></tbody></table></figure><p>组件系统</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ComponentB.js/.vue<br>import ComponentA from './ComponentA'<br>import ComponentB from './ComponentC'<br>export default{<br>   components:{<br>        ComponentA,<br>        ComponentC<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>插槽</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;slot&gt;&lt;/slot&gt;<br></code></pre></td></tr></tbody></table></figure><p>动态组件</p><p>在不同组件之间进行动态切换：特殊的 <code>is</code> attribute 来实现</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">"currentTabComponent"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span> // currentTabComponent<br>// 已注册组件的名字，或 一个组件的选项对象<br></code></pre></td></tr></tbody></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><ul><li>父 =&gt; 子<ul><li>子 props: [‘finfo’]</li><li>父 <code>&lt;son :finfo="msg"&gt;</code></li></ul></li></ul><p>prop 与 data 的区别</p><ul><li>data 组件或实例的数据</li><li>prop 传递的数据 newVue ==&gt; 子组件</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Vue.component('blog-post',{ props:['title'], template:'<br>&lt;h3&gt;{{ title }}&lt;/h3&gt;<br>' })<br>&lt;blog-post title="My journey with Vue"&gt;&lt;/blog-post&gt;<br>&lt;blog-post title="Blogging with Vue"&gt;&lt;/blog-post&gt;<br>&lt;blog-post title="Why Vue is so fun"&gt;&lt;/blog-post&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>子父<ul><li>子<ul><li><code> sendMsg() { this.$emit('func', 'OK'); }</code></li></ul></li><li>父 <ul><li><code>&lt;son @func="getMsg"&gt;&lt;/son&gt;</code></li><li><code>&lt;input type="button" value="向父组件传值" @click="sendMsg" /&gt;</code></li><li><code>getMsg(val){}</code></li></ul></li></ul></li><li><code>this.$refs</code> 来获取元素和组件</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;h1 ref="myh1"&gt;<br>&lt;my-com ref="mycom"&gt;<br>console.log(this.$refs.myh1.innerText); //元素<br>console.log(this.$refs.mycom.name); // 组件<br></code></pre></td></tr></tbody></table></figure><h2 id="复用-amp-amp-组合"><a href="#复用-amp-amp-组合" class="headerlink" title="复用 &amp;&amp; 组合"></a>复用 &amp;&amp; 组合</h2><blockquote><ul><li>var myMixin = { } // 选项api</li><li>Vue.extend({ minxins:[myMixin] })</li><li>var component = new Component()</li></ul></blockquote><ul><li>什么是混入（Mixin）：提供了一种非常灵活的方式，来<code>分发Vue组件中的可复用功能</code>。</li><li>一个混入对象可以包含任意组件选项。</li><li>当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个混入对象</span><br><span class="hljs-keyword">var</span> myMixin = {<br><span class="hljs-attr">created</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hello</span>()<br>}<br>  <span class="hljs-attr">methods</span>:{<br>    <span class="hljs-attr">hello</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'hello from mixin!'</span>)<br>    }<br>}<br>}<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Component</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>({<br>    <span class="hljs-attr">minxins</span>:[myMixin]<br>})<br><span class="hljs-keyword">var</span> component = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Component</span>()<br></code></pre></td></tr></tbody></table></figure><p>防抖和节流</p><ul><li><a href="https://lodash.com/">Lodash</a></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:{<br>  <span class="hljs-attr">click</span>:_.<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    xxx<br>  },<span class="hljs-number">500</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p><a href="https://github.com/LS1231/vue-preview">vue-preview</a></p><p>一个 Vue 集成 PhotoSwipe 图片预览插件</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)vue3</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vue3.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vue3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>vue 2.0 和 vue 3.0</p><ul><li>90% 以上代码可与 vue2.0 复用</li><li>Composition API 作为 新增 API 不会影响旧的逻辑代码</li><li>Mixin 不再推荐</li></ul><p>新特性</p><ul><li>v-for 中 Ref 数组</li><li>v-if 与 v-for 的优先级</li><li>v-model</li><li>v-bind Merge Behavior</li><li>组件<ul><li>异步组件</li></ul></li><li>自定义指令</li><li>全局 API<br>vue 不支持 IE8 及以下版本， 使用了 IE8 无法模拟 ECMAScript 5 特性 ，Vue 支持兼容 ECMAScript 的浏览器</li></ul><h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init vue@latest<br>npm i <br>npm run dev<br>npm run build<br><br>import { createApp } from <span class="hljs-string">'vue'</span><br><br>// 从一个单文件组件中导入根组件<br>import App from <span class="hljs-string">'./App.vue'</span><br><br>const app = createApp(App)<br><br>createApp({<br><span class="hljs-function"><span class="hljs-title">data</span></span>(){<br>  <span class="hljs-built_in">return</span>{}<br>  }<br>}).mount(<span class="hljs-string">"#app"</span>) // 挂载应用<br><br>多个应用实例<br>const app1 = createApp({<br>  /* ... */<br>})<br>app1.mount(<span class="hljs-string">'#container-1'</span>)<br><br>const app2 = createApp({<br>  /* ... */<br>})<br>app2.mount(<span class="hljs-string">'#container-2'</span>)<br><br><br>可写计算属性<br>computed: {<br><span class="hljs-function"><span class="hljs-title">get</span></span>(){}<br><span class="hljs-function"><span class="hljs-title">set</span></span>(){}<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>v-html 双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML</li><li>动态绑定多个值  objectOfAttrs: {</li><li>动态参数  v-bind:[attributeName]=”url”  v-on:[eventName]=”doSomething”&gt;</li><li>修饰符   @submit.prevent=”onSubmit”</li></ul><p>事件修饰符</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.self</code></li><li><code>.capture</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><p>按键别名</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“Delete”和“Backspace”两个按键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>系统按键修饰符  @keyup.alt.enter=”clear” @click.ctrl=”doSomething</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li><li><code>.exact</code> 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰</li></ul><p>鼠标</p><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>nextTick(() =&gt; {   // 访问更新后的 DOM }) 等待一个状态改变后的 DOM 更新完成</p><p>api</p><ul><li>全局api</li><li>组合式api</li><li>选项式api</li><li>内置内容</li><li>单文件组</li><li>进阶API</li></ul><p>vue 轻量级 <code>Vue 的核心库只关注视图层 V</code>  一套用于构建用户界面的自底向上逐层应用的 渐进式（由浅入深）简单到复杂 JavaScript<code>渐进式框架</code> 架构 前 m 页面中的数据 v 视图  vm [视图层分离]   后 m 数据库 数据保存  v  c 控制层</p><ul><li>声明式渲染 ：声明式地描述最终输出HTML和JS状态之间的内容</li><li>单文件组件 ：组件化 分为 页面、组件 两种 页面上可以使用组件</li><li>响应式： 编程 数据绑定响应式地更新 DOM</li><li>API 风格 同一个底层系统所提供的两套不同的接口。实际上，选项式 API 是在组合式 API 的基础上实现的<ul><li>选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑  script data(){  }  methods:{ } mounted()</li><li>组合式 API，我们可以使用导入的 API 函数来描述组件逻辑 与<code>&lt;script setup&gt; 使用</code><ul><li>import { ref, onMounted } from ‘vue’  const count = ref(0)  function func(){ }  onMounted(() =&gt; { })</li></ul></li></ul></li></ul><p>优点 简单、体积小、组件化、效率高（虚拟DOM、Diff算法）、双向数据绑定、生态丰富</p><ul><li><p>体积小，压缩后 33K</p></li><li><p>更高的运行效率 （高效） 20kb min+ gzip 运行大小 超快虚拟 DOM</p><blockquote><p>基于虚拟 DOM,一种可以预先通过 JavaScript 进行各种计算，把最终的 DOM 操作计算出来并优化的技术，由于这个 DOM 操作属于预处理操作，并没有真实的操作，所以叫做虚拟 DOM</p><p>虚拟DOM vs 真实DOM</p></blockquote></li><li><p>双向数据绑定 保持状态与视图一致</p></li><li><p>生态丰富(vue-router\vuex\pinia\vue-cli\vite)，学习成本低 大量的 UI 框架、常用组件</p></li></ul><p>vue</p><ul><li><code>new Vue({ el:"",data(){ return{ } } })</code></li><li><code>Vue.creteApp({ data(){ return{ } } }).mount("#app")</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue2</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({ <span class="hljs-comment">// vm.msg == data.msg vm.$data === data vm.$el === el</span><br><span class="hljs-attr">el</span>:<span class="hljs-string">"#app"</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){  <span class="hljs-comment">// '' 0 false [] null js数据类型 [1,2,3]  ["","",""]  [{ name:"value",version:"1.0" },{},{}]</span><br>  <span class="hljs-keyword">return</span>{ <br>    }<br>  },<br>  <span class="hljs-attr">methods</span>:{<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>){  } <span class="hljs-comment">// or show:function(){ }</span><br>  },<br>  <span class="hljs-attr">watch</span>:{},<br>  <span class="hljs-attr">computed</span>:{}<br>})<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">h</span>) { <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>) },<br>}).$mount(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// vue3</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>({<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){ }<br>}).<span class="hljs-title function_">mount</span>(<span class="hljs-string">"#app"</span>)<br><br><span class="hljs-keyword">const</span> ele = {<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){}<br>}<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(ele).<span class="hljs-title function_">mount</span>(<span class="hljs-string">"#app"</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li><code>Object.freeze()</code>，这会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化<ul><li><code>var obj = { foo:bar } Object.freeze(obj)  </code></li></ul></li></ul><p>实例property与方法  前缀 <code>$ vm.$data vm.$el 挂载的根元素 vm.$watch('a',function(newValue,oldValue){ })</code></p><p><code>js oninput = function(){ inp.value }</code></p><p>指令</p><ul><li><p><code>@click="func" v-on:click="event.alert" methods:{ alert(){ this.a // data.a } }</code> 事件绑定/方法  <code>:</code> v-on 事件绑定 <code>@</code>  @[event]=”doSomething” 动态参数（vue2.6+）</p></li><li><p><code>:id="app" v-bind</code> v-bind:id=””  v-bind:disabled=”” v-bind:href=””  v-bind:src=” “ :href=“url” :[key]=“url” 动态参数（vue2.6+） 绑定属性值 动态绑定DOM元素属性</p></li><li><p><code>{{ js表达式 }}</code> Mustache语法 (双大括号) 的文本插值{数据绑定}  使用JavaScript 表达式 </p></li><li><p><code>v-once</code> 文本插值不可改变  标明元素或组件只能i渲染一次 执行<code>一次性地插值</code>，当数据改变时，插值处的内容不会更新</p></li><li><p><code>v-module</code> v-module=“message” data(){ message:”” } 表单绑定 textarea select input</p><ul><li><p><code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会绑定 <code>value</code> property 并侦听 <code>input</code> 事件</p></li><li><p><code>手动连接值绑定和更改事件监听器 &lt;input  :value="text"  @input="event =&gt; text = event.target.value"&gt;</code></p></li><li><p><code>&lt;input type="checkbox"&gt;</code> 和 <code>&lt;input type="radio"&gt;</code> 会绑定 <code>checked</code> property 并侦听 <code>change</code> 事件</p></li><li><p><code>&lt;select&gt;</code> 会绑定 <code>value</code> property 并侦听 <code>change</code> 事件</p></li><li><p><code>&lt;textarea&gt;</code> 中是不支持插值表达式的。请使用 <code>v-model</code> 来替代</p></li><li><p>修饰符  .lazy .number .trim</p></li></ul></li><li><p><code>{{}}</code> 、v-text、v-html</p></li><li><p>v-el 、v-ref  <code>vue1.0中的v-el和v-ref在2.0中被废弃了。</code></p><ul><li>v-el 为DOM元素注册了一个索引，可以直接访问DOM元素（通过<code>v-el</code>我们可以获取到<code>DOM</code>对象） 可以通过实例的<code>$els</code>属性调用</li><li>v-ref 通过<code>v-ref</code>获取到整个组件（<code>component</code>）的对象  可以通过实例的<code>$refs</code>属性调用</li></ul></li><li><p>v-for 循环渲染<code>{} [] [{},{}]</code> key  ( in of )、(item,index)</p><ul><li>item/index <code>v-for="(item,index) in list"</code></li><li>in 普通数组 对象数组 对象 数字 <code>v-for="index in 10"</code></li><li>of 替代 in 作为分隔符，接近JavaScript 迭代器的语法</li><li>key 提高渲染 绑定键 <code>v-bind:key="item.id或index"</code></li></ul></li><li><p>v-if / v-else /v-else-if <code>条件渲染</code> 登陆上的tab切换</p><ul><li><code>v-if="hidden" v-else  hidden:true this.hidden =!this.hidden </code> OR <code>html文件上生效 template v-if="hidden"  组件渲染 </code></li><li><code>v-if="type === 'A'" / v-else-if="type === 'B'" / v-else</code></li></ul></li><li><p>v-show <code>显示隐藏</code></p><ul><li><p><code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p><p><code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p></li></ul></li><li><p>v-if vs v-show</p><ul><li>v-if 真正的条件渲染 操作DOM 会重新删除或创建元素 更高的切换消耗 频繁切换  确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建 惰性 懒惰的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块</li><li>v-show 不切换DOM 切换元素display 不管初始条件 元素总是会被渲染(基于 CSS 进行切换)  更高的初始渲染消耗 条件变化 运行条件不太可能改变</li></ul></li><li><p>v-if 与 v-for 不能一起使用</p><ul><li><code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。 v-if 是包括v-for的时候 v-for会提升优先级</li></ul></li><li><p><code>v-html=""</code> 输出html 插入HTML  需要绑定在某个元素上且能避免编译前闪现问题</p></li><li><p>v-text 避免未编译前的闪现问题 解决<code>{{ text }} 中闪现的问题</code></p></li><li><p>v-cloak 在元素上添加了一个<code>[v-cloak]的属性，直到关联的实例结束编译</code> css规则</p></li><li><p>v-pre 跳过编译这个元素和子元素，作用显示出<code>{{双大括号}}</code></p></li></ul><p>data(){} 数据(页面数据) \computed：{} 计算数据(一个data的值) \watch：{} 侦听(一个data的值)数据的变化 \method：{} 事件方法(要触发机制)</p><ul><li><p>data(){} 数据</p></li><li><p>methods：{} 方法 表示一个具体的操作，主要书写业务逻辑</p></li><li><p>computed:{} 计算属性，可以理解为经过计算的data 数据的逻辑运算  计算data的属性(计算并返回给<code>{{ }}</code>)、（计算代表逻辑），就是把模板中的复杂逻辑进行抽取出来，让模板<code>{{ 计算属性方法 }}</code>不要过重 可复用 <code>是一个值 {{ msg }} //msg计算属性名  computed:{  插值表达式的值(){ return this.data中的值 } }</code></p><ul><li>本质上是一个方法 不过在使用的时候是使用它们的名称 ，直接当作属性来使用 并不会把计算属性，当作方法去调用   只要计算属性，这个$function$ 内部，所用到的任何data 中的数据发送了变化，就会立即重新计算这个计算属性的</li><li>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用； </li><li>getter(默认)/setter  <code>属性(){ get(){ return } 返回值 set(value){ }  设置值 }</code></li></ul></li><li><p>watch：{} 侦听器  Vue 提供了一种更通用的方法来<code>观察和响应Vue实例上的数据变动</code>：侦听属性，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。 响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的</p><ul><li>watch:{  }  <code>this.$watch('question', (newQuestion) =&gt; {</code></li><li>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体</li></ul></li><li><p>ref</p><ul><li><code>&lt;input ref="input"&gt; this.$refs.input.focus()</code></li></ul></li><li><p>methods vs computed 区别计算属性是基于它们的<code>响应式依赖进行缓存</code>的 </p><ul><li>computed 计算属性 返回一个值 使用缓存，重新调用不计算，改变时重新计算<ul><li>只在相关响应式依赖发生<code>改变时它们才会重新求值</code>。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数</li><li>缓存的作用：设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代</li></ul></li><li>methods 方法 返回一个函数 需要触发机制 每次调用都会重新计算</li></ul></li><li><p>computed vs watch  <code>data数据(){ }</code></p><ul><li>watch 监听的data中的值变化 <code>每时每刻监听</code>数据或者动作的变化 在某个数据变化时做一些事情 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时<ul><li><code>watch:{  data中的值(newVal,oldVal){  } //data中的值(){ data中的值 }  }</code></li></ul></li><li>computed <code>计算data中的值属性</code> 一个数据依赖于其他数据 发送改动时运行</li></ul></li></ul><p>生命周期 vs 生命周期钩子</p><p>vue2 or vue3</p><ul><li><p>生命周期：从 Vue 实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期钩子</a>：就是生命周期事件的别名而已 生命周期钩子 = 生命周期函数 = 生命周期事件</p></li></ul><p>生命周期函数分类： <code>创建create/mounted =&gt;运行updated ==&gt;销毁destory </code></p><p>创建（create）  ==&gt; 挂载（mounted） ==&gt; 更新（updated） ==&gt; 销毁（destroy）</p><ul><li><p>==创建期间的生命周期函数==：</p><ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性（调用报错 ）<code>组件刚刚被创建</code></li><li>created：实例已经在内存中创建，此时 data 和 methods 已经创建 OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有<code> </code>挂载到页面·中 <code>挂载之前</code></li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示 <code>挂载之后</code></li></ul></li><li><p>==运行期间的生命周期函数==：</p><ul><li><p>beforeUpdate：状态更新之前   执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染 DOM 节点</p></li><li><p>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</p></li></ul></li><li><p>==销毁期间的生命周期函数==：</p><ul><li><p>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。<code>组件销毁前调用</code></p></li><li><p>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<code>组件销毁后调用</code></p></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">"#app"</span>,<br>  <span class="hljs-attr">init</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){},<br>  <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">beforeCompile</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">compiled</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">attached</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">beforeDestroy</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">destroyed</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>  <span class="hljs-attr">ready</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>})<br></code></pre></td></tr></tbody></table></figure><p>组件 </p><ul><li>html文件 全局组件 局部组件<ul><li><code>&lt;ButtonCounter /&gt;</code></li><li><code> &lt;组件名 content="Hello"&gt;&lt;/组件名&gt;  Vue.extend({ props: ["content"] template:"" })  Vue.component("别名",局部组件名);</code>  props:[“值”]子   <code> &lt;msg content="Hello"&gt;&lt;/msg&gt;  父</code>       父传子<ul><li>父子：子props父 标签属性值</li><li>子  <code>props: ['msg','ddd','ccc']</code> </li><li>父 <code> &lt;HelloWorld msg="center" ddd="324" ccc="234"&gt;&lt;/HelloWorld&gt;</code></li></ul></li><li><code>Vue.component("xxx组件名",{ data(){} template:"" }</code></li><li><code> &lt;template id="tpl"&gt; Vue.component('xxx组件名', {  template: '#tpl' })</code></li></ul></li><li>vue <code>props 传递参数 </code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html">html文件用<br>// vue2<br>div#app<br><span class="hljs-tag">&lt;<span class="hljs-name">msg</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Hello"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span>  // 父组件中使用子组件msg<br>// 方法一 Vue.extend()<br>var message = Vue.extend({ // 局部组件 <br> props: ["content"], // props 传递参数<br>   template: "<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ content }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>", // 子组件<br>})<br>Vue.component("msg",message);  // 全局组件 别名<br><br>// 方法二<br>Vue.component("btn",{ // 直接使用没有别名<br> data(){  return:{ count: 'text message'}  },<br> template: "<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>lorem {{ count }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>"<br>})<br><br>var vm = new Vue({ el:"#app" })<br>// 方法二 注册子组件<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">account</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">account</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>// HTML中<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tpl"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是通过template元素,在定义<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是一个或<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">'account'</span>, {</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">'#tpl'</span></span><br><span class="language-javascript">    });</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>// vue3<br>const app = createApp({ data(){ } })<br>app.component('todo-item',{<br>    template:`<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>This is a todo<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>`<br>})<br>app.mount("#element")<br><br>vue文件<br>// vue<br>#app<br>template id="app"<br><br></code></pre></td></tr></tbody></table></figure><ul><li>动态组件 <code>&lt;component&gt;</code> 元素和特殊的 <code>is</code> attribute 实现的 <code> &lt;component :is="currentTab"&gt;&lt;/component&gt;</code></li><li>注册<ul><li>全局注册   <code>app.component('MyComponent', MyComponent) &lt;ComponentA/&gt;</code></li><li>局部注册  <code>components: { ComponentA: ComponentA }</code></li></ul></li><li>Props 一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">props</span>: {<br>    <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span><br>  }<br>}<br><span class="hljs-attr">props</span>: [<span class="hljs-string">'foo'</span>],<br></code></pre></td></tr></tbody></table></figure><ul><li><p>事件 触发与监听事件 使用 <code>$emit</code> 方法触发自定义事件 (例如：在 <code>v-on</code> 的处理函数中</p></li><li><p>透传 Attribute “透传 attribute”指的是传递给一个组件，却没有被该组件声明为 <a href="https://cn.vuejs.org/guide/components/props.html">props</a> 或 <a href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events">emits</a> 的 attribute 或者 <code>v-on</code> 事件监听器。最常见的例子就是 <code>class</code>、<code>style</code> 和 <code>id</code></p></li><li><p>插槽</p></li><li><p>依赖注入</p></li><li><p>异步组件</p></li></ul><p>逻辑复用</p><ul><li>组合式函数 “组合式函数”(Composables) 是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数</li><li>自定义指令 允许你注册自定义的指令 (Custom Directives)</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> focus = {<br>  <span class="hljs-attr">mounted</span>: <span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">directives</span>: {<br>    <span class="hljs-comment">// 在模板中启用 v-focus</span><br>    focus<br>  }<br>}<br>&lt;input v-focus /&gt;<br>  <br>  <span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>({})<br><br><span class="hljs-comment">// 使 v-focus 在所有组件中都可用</span><br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'focus'</span>, {<br>  <span class="hljs-comment">/* ... */</span><br>})<br>对于自定义指令来说，一个很常见的情况是仅仅需要在 mounted 和 updated 上实现相同的行为，除此之外并不需要其他钩子。这种情况下我们可以直接用一个函数来定义指令<br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'color'</span>, <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 这会在 `mounted` 和 `updated` 时都调用</span><br>  el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>})<br>&lt;div v-demo=<span class="hljs-string">"{ color: 'white', text: 'hello!' }"</span>&gt;&lt;/div&gt;<br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'demo'</span>, <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(binding.<span class="hljs-property">value</span>.<span class="hljs-property">color</span>) <span class="hljs-comment">// =&gt; "white"</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(binding.<span class="hljs-property">value</span>.<span class="hljs-property">text</span>) <span class="hljs-comment">// =&gt; "hello!"</span><br>})<br><br></code></pre></td></tr></tbody></table></figure><ul><li>插件 插件 (Plugins) 是一种能为 Vue 添加全局功能的工具代码</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import { createApp } from 'vue'<br><br>const app = createApp({})<br><br>app.use(myPlugin, {<br>  /* 可选的选项 */<br>})<br><br></code></pre></td></tr></tbody></table></figure><p>内置组件</p><ul><li>Transition <code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画。本章节会介绍如何使用它。</li><li>TransitionGroup 会在一个 <code>v-for</code> 列表中的元素或组件被插入，移动，或移除时应用动画</li><li>KeepAlive 一个内置组件，它的功能是在多个组件间动态切换时缓存被移除的组件实例</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 非活跃的组件将会被缓存！ --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">KeepAlive</span>  <span class="hljs-attr">:max</span>=<span class="hljs-string">"10"</span>&gt;</span> 缓存的最大组件实例数</span><br><span class="language-xml">//  include 和 exclude prop 来定制该行为</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"activeComponent"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">KeepAlive</span>&gt;</span></span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-title function_">activated</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-comment">// 在首次挂载、</span><br>    <span class="hljs-comment">// 以及每次从缓存中被重新插入的时候调用</span><br>  },<br>  <span class="hljs-title function_">deactivated</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-comment">// 在从 DOM 上移除、进入缓存</span><br>    <span class="hljs-comment">// 以及组件卸载时调用</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>Teleport 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去</li></ul><p>应用规模化</p><ul><li>单文件组件  SFC 是一个框架指定的文件格式</li><li>工具链  vite  vuecli  Volar(vscode 代码提示 vue 3) vetur(vue2 代码提示)  vue-loader 为 webpack 提供 Vue SFC 支持的官方 loader。如果你正在使用 Vue CLI</li><li>路由 veu-router</li><li>状态管理  vuex pinia</li><li>测试</li><li>服务端渲染 SSR 是 Server-Side Rendering，即服务端渲染<ul><li>与客户端的单页应用 (SPA) 相比，SSR 的优势主要在于<ul><li><strong>更快的首屏加载</strong>  <strong>统一的心智模型</strong> <strong>更好的 SEO</strong></li></ul></li><li><a href="https://v3.nuxtjs.org/">Nuxt</a> 是一个构建于 Vue 生态系统之上的全栈框架，它为编写 Vue SSR 应用提供了丝滑的开发体验</li><li>Vite 提供了内置的 <a href="https://cn.vitejs.dev/guide/ssr.html">Vue 服务端渲染支持</a>，但它在设计上是偏底层的。如果你想要直接使用 Vite，可以看看 <a href="https://vite-plugin-ssr.com/">vite-plugin-ssr</a>，一个帮你抽象掉许多复杂细节的社区插件。</li></ul></li></ul><p>动画</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">动画两组类<br><span class="hljs-comment">// mode 过渡的模式 路由动画</span><br>&lt;transition mode=<span class="hljs-string">"out-in"</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/transition&gt;<br>.<span class="hljs-property">v</span>-enter,.<span class="hljs-property">v</span>-leave-to{<br>  <span class="hljs-attr">opacity</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attr">transform</span>:<span class="hljs-title function_">translateX</span>(140px);<br>}<br>.<span class="hljs-property">v</span>-enter-active,.<span class="hljs-property">v</span>-leave-active{<br>  <span class="hljs-attr">transtion</span>:all <span class="hljs-number">0.5</span> ease;<br>}<br></code></pre></td></tr></tbody></table></figure><p>API风格 </p><ul><li>选项式</li><li>组合式</li></ul><p><strong>声明式渲染</strong></p><p>SFC 单文件组件</p><ul><li>template script style 组成</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue2 选项式</span><br>&lt;p ref=<span class="hljs-string">"p"</span>&gt;hello&lt;<span class="hljs-regexp">/p&gt; /</span><span class="hljs-regexp">/ this.$refs.p  挂载之后就能使用</span><br><span class="hljs-regexp">&lt;ChildComp /</span>&gt;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{ <br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-keyword">return</span>{<br>      <span class="hljs-attr">msg</span>:<span class="hljs-string">''</span>,<br>      <span class="hljs-attr">text</span>:<span class="hljs-string">''</span><br>      <span class="hljs-attr">titleClass</span>:<span class="hljs-string">'title'</span>, <span class="hljs-comment">// title 类名</span><br>      <span class="hljs-attr">todoData</span>: <span class="hljs-literal">null</span><br>    }<br>  },<br>  <span class="hljs-attr">methods</span>:{  <span class="hljs-comment">// 方法对象 // </span><br>    方法名(){<br>        <br>      },<br>    <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>){<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> <span class="hljs-comment">// 获取输入框的值</span><br>      }<br>  },<br>  <span class="hljs-attr">computed</span>:{<br>       <span class="hljs-title function_">filteredTodos</span>(<span class="hljs-params"></span>) {  <span class="hljs-keyword">return</span> }<br>  }<br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComp</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./ChildComp.vue'</span><br>  <span class="hljs-attr">components</span>: {<br>    <span class="hljs-title class_">ChildComp</span><br>}<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">p</span>.<span class="hljs-property">textContent</span> = <span class="hljs-string">'mounted!'</span>  <span class="hljs-comment">// textContent修改</span><br>    <span class="hljs-comment">// 网络请求</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todoData</span> = <span class="hljs-literal">null</span><br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>        <span class="hljs-string">`https://jsonplaceholder.typicode.com/todos/<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.todoId}</span>`</span><br>      )<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todoData</span> = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()<br>    }<br>  }<br>}<br>&lt;input :value=<span class="hljs-string">"text"</span> @input=<span class="hljs-string">"onInput"</span> v-model=<span class="hljs-string">"text"</span>&gt;<br><br>props<br><span class="hljs-comment">// 在子组件中</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">props</span>: {<br>    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span><br>  }<br>}<br><span class="hljs-comment">// 父属性子props:{}</span><br>&lt;<span class="hljs-title class_">ChildComp</span> :msg=<span class="hljs-string">"greeting"</span> /&gt; <span class="hljs-comment">// </span><br><br>子组件还可以向父组件触发事件<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-comment">// 声明触发的事件</span><br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">'response'</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-comment">// 带参数触发 this.$emit() 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。</span><br>    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">'response'</span>, <span class="hljs-string">'hello from child'</span>)<br>  }<br>}<br><br>&lt;<span class="hljs-title class_">ChildComp</span> @response=<span class="hljs-string">"(msg) =&gt; childMsg = msg"</span> /&gt;<br><span class="hljs-comment">// 父传子</span><br>除了通过 props 传递数据外，父组件还可以通过插槽 (slots) 将模板片段传递给子组件<br>  父 <br>&lt;<span class="hljs-title class_">ChildComp</span>&gt;<br>  <span class="hljs-title class_">This</span> is some slot content!<br>&lt;/<span class="hljs-title class_">ChildComp</span>&gt;<br><br>子   slot在子组件上<br>&lt;!-- 在子组件的模板中 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>Fallback content<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><br><br><br><span class="hljs-comment">// vue3 组合式 </span><br><span class="hljs-comment">// ref()  可以接受任何值类型。ref 会返回一个包裹对象，并在 .value 属性下暴露内部值</span><br><span class="hljs-comment">// reactive() 只适用于对象 (包括数组和内置类型，如 Map 和 Set) 声明响应式状态行为与普通对象一样</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"p"</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComp</span> /&gt;</span></span><br><br>&lt;script setup&gt;<br>import { ref,reactive,computed,watch,onMounted } from 'vue'<br><br>// vue3组件不用注册 直接导入不同注册<br>import ChildComp from './ChildComp.vue'<br>// data<br>const count = ref('1000')  // ref(['']) ref({ count:'' })<br>count.value<br>const reactive = ({ count: '100'})<br>const titleClass = ref('title') // title 类名  const 变量 = 值<br>// methods<br>function 方法名(){} <br>function onInput(e){ this.text = e.target.value }<br><br>computed(() =&gt; {})<br>const p = ref(null)  <br>//生命周期 onUpdated 和 onUnmounted<br>onMounted(()=&gt;{<br>  p.value.textContent = 'Message'<br>})<br><br>const count = ref(0)<br><br>watch(count, (newCount) =&gt; {<br>  // 没错，console.log() 是一个副作用<br>  console.log(`new count is: ${newCount}`)<br>})<br><br>// 网络请求<br>const todoData = ref(null)<br><br>async function fetchData() {<br>  const res = await fetch(<br>    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`<br>  )<br>  todoData.value = await res.json()<br>}<br>fetchData()<br><br>// 父子通信<br>子 // vue2 props：{}<br>const props = defineProps({ // defineProps() 是一个编译时宏，并不需要导入 props固定<br>  msg: String // msg 参数<br>})<br><br>父<br>import { ref } from 'vue'<br>import ChildComp from './ChildComp.vue'<br>const greeting = ref('Hello from parent')<br><br>&lt;ChildComp :msg="greeting" /&gt; // :子="父"<br> <br> <br> 子组件还可以向父组件触发事件   子传父  子emit=defineEmits([]) emit(事件,参数)<br>父 ChildComp @事件="(msg) =&gt; 父 = 子"<br> // 子<br>// 声明触发的事件<br>const emit = defineEmits(['response'])<br>// 带参数触发<br>emit('response', 'hello from child') emit(事件,参数)<br><br>// 父<br>const childMsg = ref('No child msg yet')<br>&lt;ChildComp @response="(msg) =&gt; childMsg = msg" /&gt;  @事件="(参数) =&gt; 父参数   = 参数"<br>  &lt;p&gt;{{ childMsg }}&lt;/p&gt;<br>// 插槽和vue2一样   把父的内容放在子上 插槽slot在子上<br>  <br>&lt;script&gt;<br></code></pre></td></tr></tbody></table></figure><p>HTML 文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">HTML</span> 文件<br>#app<br>选项式<br>#app<br>  &lt;child-comp&gt;&lt;/child-comp&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"p"</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child-comp</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">"greeting"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-comp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">child-comp</span> @<span class="hljs-attr">response</span>=<span class="hljs-string">"(msg) =&gt; childMsg = msg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-comp</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComp</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./ChildComp.js'</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>({  <span class="hljs-comment">// new Vue(el:"#app",) =&gt; createApp</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>{</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">titleClass</span>:<span class="hljs-string">'title'</span>  <span class="hljs-comment">// titleClass 名 title 值</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">greeting</span>: <span class="hljs-string">'Hello from parent'</span></span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">childMsg</span>: <span class="hljs-string">'No child msg yet'</span></span></span><br><span class="language-javascript"><span class="language-xml">        }</span></span><br><span class="language-javascript"><span class="language-xml">      },</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>:{</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>){</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++ <span class="hljs-comment">// 使用 this 来访问组件示例。组件实例会暴露 data 中声明的数据属性。我们可以通过改变这些属性的值来更新组件状态</span></span></span><br><span class="language-javascript"><span class="language-xml">        }</span></span><br><span class="language-javascript"><span class="language-xml">      },</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">computed</span>:{</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title function_">filteredTodos</span>(<span class="hljs-params"></span>) {  <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span> }</span></span><br><span class="language-javascript"><span class="language-xml">     },</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">p</span>.<span class="hljs-property">textContent</span> = <span class="hljs-string">'mounted!'</span></span></span><br><span class="language-javascript"><span class="language-xml">    },</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: {</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">ChildComp</span> <span class="hljs-comment">// 导入组件 注册组件 使用组件</span></span></span><br><span class="language-javascript"><span class="language-xml">    }</span></span><br><span class="language-javascript"><span class="language-xml">  }).<span class="hljs-title function_">mount</span>(<span class="hljs-string">"#app"</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">多个应用实例</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> app1 = <span class="hljs-title function_">createApp</span>({</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">/* ... */</span></span></span><br><span class="language-javascript"><span class="language-xml">})</span></span><br><span class="language-javascript"><span class="language-xml">app1.<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#container-1'</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> app2 = <span class="hljs-title function_">createApp</span>({</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">/* ... */</span></span></span><br><span class="language-javascript"><span class="language-xml">})</span></span><br><span class="language-javascript"><span class="language-xml">app2.<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#container-2'</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br><span class="hljs-comment">// ./ChildComp.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;A Child Component!&lt;/h2&gt;</span><br><span class="hljs-string">  `</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">props</span>: {<br>    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span><br>  },<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;{{ msg || 'No props passed yet' }}&lt;/h2&gt;</span><br><span class="hljs-string">  `</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">'response'</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">'response'</span>, <span class="hljs-string">'hello from child'</span>)<br>  },<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;Child component&lt;/h2&gt;</span><br><span class="hljs-string">  `</span><br>}<br><br>插槽<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;slot&gt;Fallback content&lt;/slot&gt;</span><br><span class="hljs-string">  `</span><br>}<br><br><br>组合式 <span class="hljs-comment">// setup(){  return{} }</span><br>&lt;script type=<span class="hljs-string">"module"</span>&gt;<br><span class="hljs-keyword">import</span> { createApp, reactive, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComp</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./ChildComp.js'</span><br><br><span class="hljs-title function_">createApp</span>({<br>   <span class="hljs-attr">components</span>: {<br>    <span class="hljs-title class_">ChildComp</span><br>  }<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) { <span class="hljs-comment">// 传入 createApp() 的对象是一个 Vue 组件。组件的状态应该在 setup() 函数中声明，并使用一个对象返回</span><br>    <span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">reactive</span>({ <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> })<br>    <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'Hello World!'</span>)<br>    <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) {<br>      count.<span class="hljs-property">value</span>++<br>    }<br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) {<br>      text.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>    }<br>    <br>    <span class="hljs-keyword">const</span> filteredTodos = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">return</span> hideCompleted.<span class="hljs-property">value</span><br>        ? todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> !t.<span class="hljs-property">done</span>)<br>        : todos.<span class="hljs-property">value</span><br>    })<br>    <br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {<br>      p.<span class="hljs-property">value</span>.<span class="hljs-property">textContent</span> = <span class="hljs-string">'mounted!'</span><br>    })<br>    <br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) { }<br>    <br>     <br>     <span class="hljs-title function_">fetchData</span>()<br>    <span class="hljs-keyword">return</span> {<br>      counter,<br>      message,<br>      increment,<br>      onInput,<br>      filteredTodos<br>    }<br>  }<br>}).<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;h2&gt;A Child Component!&lt;/h2&gt;</span><br><span class="hljs-string">  `</span><br>}<br> &lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li><code>:id="" v-bind:id="" 属性绑定 </code></li><li><code>@click="" v-on="" </code></li><li><code>v-module</code></li><li><code>v-if="" v-else</code></li><li><code>v-for</code></li><li><code>v-ref 操作DOM $refs.元素.textContent</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-comment">// 给每个 todo 对象一个唯一的 id</span><br><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">return</span> {<br>      <span class="hljs-attr">newTodo</span>: <span class="hljs-string">''</span>,<br>      <span class="hljs-attr">hideCompleted</span>:<span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">todos</span>: [<br>        { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn HTML'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span> },<br>        { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn JavaScript'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span> },<br>        { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn Vue'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span> }<br>      ]<br>    }<br>  },<br>  <span class="hljs-attr">computed</span>: { <span class="hljs-comment">// 计算属性</span><br>    <span class="hljs-title function_">filteredTodos</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">hideCompleted</span><br>        ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> !t.<span class="hljs-property">done</span>)<br>        : <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span><br>    }<br>  },<br>  <span class="hljs-attr">methods</span>: {<br>    <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span> })<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">newTodo</span> = <span class="hljs-string">''</span><br>    },<br>    <span class="hljs-title function_">removeTodo</span>(<span class="hljs-params">todo</span>) {<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t !== todo)<br>    }<br>  },<br>}<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> newTodo = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> hideCompleted = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> todos = <span class="hljs-title function_">ref</span>([</span></span><br><span class="language-javascript"><span class="language-xml">   { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn HTML'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span> },</span></span><br><span class="language-javascript"><span class="language-xml">    { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn JavaScript'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span> },</span></span><br><span class="language-javascript"><span class="language-xml">    { <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">'Learn Vue'</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span> }</span></span><br><span class="language-javascript"><span class="language-xml">])</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> filteredTodos = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> {</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> hideCompleted.<span class="hljs-property">value</span></span></span><br><span class="language-javascript"><span class="language-xml">    ? todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> !t.<span class="hljs-property">done</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    : todos.<span class="hljs-property">value</span></span></span><br><span class="language-javascript"><span class="language-xml">})</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) {</span></span><br><span class="language-javascript"><span class="language-xml">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: newTodo.<span class="hljs-property">value</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span> })</span></span><br><span class="language-javascript"><span class="language-xml">  newTodo.<span class="hljs-property">value</span> = <span class="hljs-string">''</span></span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeTodo</span>(<span class="hljs-params">todo</span>) {</span></span><br><span class="language-javascript"><span class="language-xml">  todos.<span class="hljs-property">value</span> = todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>&lt;template&gt;<br>  &lt;form @submit.prevent="addTodo"&gt;<br>    &lt;input v-model="newTodo"&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;    <br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for="todo in filteredTodos" :key="todo.id"&gt;<br>      &lt;input type="checkbox" v-model="todo.done"&gt;<br>      &lt;span :class="{ done: todo.done }"&gt;{{ todo.text }}&lt;/span&gt;<br>      &lt;button @click="removeTodo(todo)"&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;button @click="hideCompleted = !hideCompleted"&gt;<br>    {{ hideCompleted ? 'Show all' : 'Hide completed' }}<br>  &lt;/button&gt;<br>&lt;/template&gt;<br><br><br>&lt;script setup&gt;<br>import { ref, watch } from 'vue'<br><br>const todoId = ref(1)<br>const todoData = ref(null)<br><br>async function fetchData() {<br>  todoData.value = null<br>  const res = await fetch(<br>    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`<br>  )<br>  todoData.value = await res.json()<br>}<br><br>fetchData()<br><br>watch(todoId, fetchData)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;p&gt;Todo id: {{ todoId }}&lt;/p&gt;<br>  &lt;button @click="todoId++"&gt;Fetch next todo&lt;/button&gt;<br>  &lt;p v-if="!todoData"&gt;Loading...&lt;/p&gt;<br>  &lt;pre v-else&gt;{{ todoData }}&lt;/pre&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>vue3.2</p><ul><li>语法 setup defineProps defineEmit defineExpose v-memo style v-bind</li></ul><p>setup </p><ul><li><p>语法糖</p></li><li><p><code>setup(){} return{ x,y,z }</code> </p></li><li><p>简化vue2配置项的写法  组件只需引入不用注册，属性和方法也不用返回  也不用写setup函数，也不用写<strong>export</strong> <strong>default</strong> ， 甚至是自定义指令也可以在我们的<strong>template</strong>中自动获得 不再需要进行return</p></li><li><p>使用</p><ul><li><code>&lt;script setup&gt;</code> 声明的<strong>顶层的绑定 (包括声明的变量，函数声明，以及 import 引入的内容)</strong> 都可以在模板中直接使用<ul><li>普通的 <code>&lt;script&gt;</code> 只在组件被首次引入的时候仅执行一次不同</li><li><code>&lt;script setup&gt;</code>中的代码会在每次组件实例被创建的时候执行  初始化的赋值等在组件每次实例创建时都重新执行一次</li></ul></li></ul></li><li><p>特点</p><ul><li>自动注册 无需要像vue2<code>componets:{ xxxx  }</code>注册 只要导入</li></ul></li><li><p>注意</p><ul><li>不需要 this.XX的形式去使用</li><li>return 返回他的值</li><li>setup的两个参数 一个是props 一个是content 全局上下文</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//vue3</span><br><span class="hljs-comment">// 方法一</span><br>&lt;script setup&gt; <span class="hljs-comment">// 里面的代码编译成组件setup</span><br>  <span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'String'</span>)<br> &lt;/script&gt; <br><br><span class="hljs-comment">// 配置项  方法二</span><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-comment">// data</span><br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">1000</span>;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">'String'</span>;<br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>){ <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(setup) }<br>}<br><span class="hljs-keyword">return</span>{<br>  num,str,arr,fn<br>}<br><br><span class="hljs-comment">//vue2</span><br><span class="hljs-comment">// 数据源</span><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){ <span class="hljs-keyword">return</span>{} }<br><span class="hljs-attr">methods</span>:{}<br><span class="hljs-attr">created</span>:{}<br><span class="hljs-attr">computed</span>:{}<br>...<br></code></pre></td></tr></tbody></table></figure><p>组件通信</p><ul><li>defineProps Props传参 父 =&gt; 子</li><li>defineEmit 事件传参 子 =&gt; 父</li><li>defineExpose 组件暴露出自己的属性</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// defineProps </span><br><span class="hljs-comment">// 父</span><br>&lt;son :title=<span class="hljs-string">"msg"</span>&gt;<br><br><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> son <span class="hljs-keyword">from</span> <span class="hljs-string">'./son.vue'</span><br><span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'Message'</span>)<br><br><span class="hljs-comment">// 子</span><br>h1{{ props.<span class="hljs-property">title</span> }}<br><span class="hljs-keyword">import</span> { defineProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>({<br>  <span class="hljs-attr">title</span>:{<br>    <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span> <span class="hljs-comment">// props.title</span><br>  },<br>  <span class="hljs-attr">info</span>:{<br>    <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">default</span>:<span class="hljs-string">'----'</span><br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// defineEmit</span><br><span class="hljs-comment">// 父</span><br>&lt;son @getChild=<span class="hljs-string">"getChild"</span>&gt;&lt;/son&gt;<br><br><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> son <span class="hljs-keyword">from</span> <span class="hljs-string">'./Son.vue'</span><br><span class="hljs-keyword">let</span> data = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChild</span> = (<span class="hljs-params">e</span>) =&gt;{<br>  data.<span class="hljs-property">value</span> = e <span class="hljs-comment">// 子组件的值</span><br>}<br><br><span class="hljs-comment">// 子</span><br>&lt;button @click=<span class="hljs-string">"toEmits"</span>&gt;点击 子传父&lt;/button&gt;<br><br><span class="hljs-keyword">import</span> { defineEmits,ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-comment">// 定义</span><br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">'getChild'</span>])<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toEmits</span> = (<span class="hljs-params"></span>) =&gt;{<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">'getChild'</span>,<span class="hljs-string">'要传递的参数'</span>)<br>}<br><span class="hljs-keyword">let</span> hander1Click=():<span class="hljs-function"><span class="hljs-params">void</span>=&gt;</span>{<br>    $myemit(<span class="hljs-string">'myAdd'</span>,<span class="hljs-string">'新增的数据'</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// defineExpose</span><br><span class="hljs-comment">// 子</span><br><span class="hljs-keyword">import</span> {ref, defineExpose, reactive} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><br><span class="hljs-keyword">let</span> obj = <span class="hljs-title function_">reactive</span>({<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'zs'</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>})<br><span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'Message'</span>);<br><br><span class="hljs-title function_">defineExpose</span>({<br>  obj,<br>  msg<br>})<br><span class="hljs-comment">// 父</span><br>&lt;button @click=<span class="hljs-string">"parExpose"</span>&gt; <span class="hljs-comment">// 方法</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"par"</span> /&gt;</span></span>  <span class="hljs-comment">// 元素</span><br><br><span class="hljs-keyword">import</span> son <span class="hljs-keyword">from</span> <span class="hljs-string">'./Son.vue'</span><br><span class="hljs-keyword">import</span> {ref,defineEmits,defineProps} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><br>cons par = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">parExpose</span> = (<span class="hljs-params"></span>) =&gt;{<br>  <span class="hljs-comment">// par.value.obj</span><br>  <span class="hljs-comment">// par.value.msg</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>新增指令 v-memo  记住一个模板的子树,元素和组件上都可以使用</p><ul><li>缓存模板中的一部分数据。 只创建一次，以后就不会再更新了。也就是说用内存换取时间</li></ul><p>style v-bind </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 有开始循环了-开端 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>  <br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> { reactive } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>({</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">color</span>: <span class="hljs-string">'red'</span></span></span><br><span class="language-javascript"><span class="language-xml">  })</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-tag">span</span> {</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-comment">/* 使用v-bind绑定state中的变量 */</span></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">'state.color'</span>);</span></span><br><span class="language-css"><span class="language-xml">  }  </span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>hook函数</p><ul><li>vue3 hook 相当于 vue2 的 mixin, 不同在与 hooks 是函数</li><li>Vue3 的 hook函数 可以帮助我们提高代码的复用性, 让我们能在不同的组件中都利用 hooks 函数</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">hooks/use.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> {reactive, onMounted, onBeforeUnmount} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">export</span>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    <span class="hljs-comment">//展示的数据  可以通过App.vue 界面去隐藏</span><br>    <span class="hljs-keyword">let</span> point = <span class="hljs-title function_">reactive</span>({<br>        <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">y</span>: <span class="hljs-number">0</span><br>    })<br>    <span class="hljs-comment">//获取鼠标点击事件</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">savePonint</span>(<span class="hljs-params">event</span>) {<br>        point.<span class="hljs-property">x</span> = event.<span class="hljs-property">pageX</span><br>        point.<span class="hljs-property">y</span> = event.<span class="hljs-property">pageY</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">pageX</span>, event.<span class="hljs-property">pageY</span>)<br>    }<br>    <span class="hljs-comment">//现实之后调用 挂载完毕</span><br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'click'</span>, savePonint)<br>    })<br>    <span class="hljs-comment">//在隐藏之前调用 卸载之前</span><br>    <span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> {<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'click'</span>, savePonint)<br>    })<br>    <span class="hljs-keyword">return</span> point<br>}<br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前求和:{{ sum }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"sum++"</span>&gt;</span>点我加一<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;hr&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前鼠标点击坐标为:x:{{ point.x }},y:{{ point.y }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> {ref} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//复用的usePoint</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> usePoint <span class="hljs-keyword">from</span> <span class="hljs-string">"../hooks/usePoint"</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> point = <span class="hljs-title function_">usePoint</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> {sum,point}</span></span><br><span class="language-javascript"><span class="language-xml">  },</span></span><br><span class="language-javascript"><span class="language-xml">}</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>toRefs</p><h2 id="vue库"><a href="#vue库" class="headerlink" title="vue库"></a>vue库</h2><ul><li><input disabled="" type="checkbox"> Vue 没有内置支持防抖和节流，但可以使用 <a href="https://lodash.com/">Lodash</a> 等库来实现</li><li><input disabled="" type="checkbox"> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/Vim.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/Vim.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install vim<br><span class="hljs-built_in">which</span> vim /usr/bin/vim<br>// .vimrc 配置文件<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 查看当前用户主目录<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOME</span><br><span class="hljs-built_in">cd</span> /Users/administrator/<br><span class="hljs-built_in">ls</span> <br><span class="hljs-built_in">touch</span> .vimrc<br> <span class="hljs-built_in">source</span> ~/.vimrc<br></code></pre></td></tr></tbody></table></figure><p>语法光亮</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"> /etc/vim/vimrc<br>setcursorline <br>hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white <br>hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white <br></code></pre></td></tr></tbody></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>i 插入 x 删除  dd 删除一行 p 黏贴 yy 复制 u 撤销  n 重复</p><ul><li>i  (插入) Insert 模式，按 ESC 回到 Normal 模式.</li><li>x   删当前光标所在的一个字符</li><li>:wq 存盘(保存) + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）</li><li>dd  删除当前行，并把删除的行存到剪贴板里</li><li>p 粘贴剪贴板  yy 复制  u 撤销</li><li>hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。</li><li>:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（陈皓注：退出帮助需要输入:q）</command></li></ul><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><ul><li>i  (插入) Insert 模式，按 ESC 回到 Normal 模式.</li><li>a 在光标后插入</li><li>o(小写o) 在当前行后插入一个新行</li><li>O(大写O)  在当前行前插入一个新行</li><li>cw 替换从光标所在位置后到一个单词结尾的字符</li></ul><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><ul><li>0 （数字0）到行头</li><li>$ → 到本行行尾</li><li>/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）</li><li>g_ → 到本行最后一个不是blank字符的位置。</li><li>^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li></ul><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><ul><li>:e &lt;path/to/file&gt; → 打开一个文件</li><li>:w → 存盘</li><li>:saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt;</li><li>:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)</li><li>:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。</li><li>:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）</li></ul><h3 id="重复命令"><a href="#重复命令" class="headerlink" title="重复命令"></a>重复命令</h3><ul><li>. → (小数点) 可以重复上一次的命令</li><li>N<command> → 重复某个命令N次</command></li><li>2dd 删除2行</li><li>3p  黏贴3次</li><li>100idesu [ESC]</li></ul><h3 id="移动光标-1"><a href="#移动光标-1" class="headerlink" title="移动光标"></a>移动光标</h3><ul><li>NG → 到第 N 行 （陈皓注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）</li><li>gg → 到第一行。（陈皓注：相当于1G，或 :1）</li><li>G → 到最后一行。</li><li>w → 到下一个单词的开头。<br>  e → 到下一个单词的结尾。</li></ul><h3 id="当前位置"><a href="#当前位置" class="headerlink" title="当前位置"></a>当前位置</h3><p>指定拷贝位置</p><ul><li>0y$ 命令意味着<ul><li>0 → 先到行头</li><li>y → 从这里开始拷贝</li><li>$ → 拷贝到本行最后一个字符<br>  0y3 行头到第三个字符</li></ul></li><li>0 → 到行头<br>  ^ → 到本行的第一个非blank字符<br>  $ → 到行尾<br>  g_ → 到本行最后一个不是blank字符的位置。<br>  fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。<br>  t, → 到逗号前的第一个字符。逗号可以变成其它字符。<br>  3fa → 在当前行查找第三个出现的a。<br>  F 和 T → 和 f 和 t 一样，只不过是相反方向。</li></ul><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><p>分屏: :split 和 vsplit.<br>下面是主要的命令，你可以使用VIM的帮助 :help split.<br>:split → 创建分屏 (:vsplit创建垂直分屏)<br><c-w></c-w></p><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。<br><c-w>_ (或 <c-w>|) : 最大化尺寸 (<c-w>| 垂直分屏)<br><c-w>+ (或 <c-w>-) : 增加尺寸<p></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h3><ul><li>P 粘贴 paste</li><li>yy 拷贝当前行相当于ddP</li></ul><h3 id="复制和黏贴指定区域"><a href="#复制和黏贴指定区域" class="headerlink" title="复制和黏贴指定区域"></a>复制和黏贴指定区域</h3><ul><li>0y$、0y10</li></ul><h3 id="删除所有内容"><a href="#删除所有内容" class="headerlink" title="删除所有内容"></a>删除所有内容</h3><ul><li>100dd</li></ul><h3 id="剪切指定内容"><a href="#剪切指定内容" class="headerlink" title="剪切指定内容"></a>剪切指定内容</h3><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><ul><li>u → undo  相当于ctrl z 撤销功能</li><li><c-r> → redo</c-r></li></ul></c-w></c-w></c-w></c-w></c-w></dir>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Apn接入点，来突破网速封锁</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/apn%E6%8E%A5%E5%85%A5%E7%82%B9.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/apn%E6%8E%A5%E5%85%A5%E7%82%B9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Apn接入点，来突破网速封锁"><a href="#使用Apn接入点，来突破网速封锁" class="headerlink" title="使用Apn接入点，来突破网速封锁"></a>使用Apn接入点，来突破网速封锁</h1><h2 id="APN"><a href="#APN" class="headerlink" title="APN"></a>APN</h2><blockquote><p>接入点名称（英語：APN, Access Point Name），是GPRS等移动网络和另一个计算机网络（通常来说是互联网）之间的网关的名称，用以定義移动设备上所有移动数据連線的網路路徑。 移动设备必须设置了运营商提供的接入点名称才能建立数据连接。</p><p>APN指一种网络接入技术，是通过<a href="https://baike.baidu.com/item/%E6%89%8B%E6%9C%BA%E4%B8%8A%E7%BD%91/1996688">手机上网</a>时必须配置的一个参数，它决定了手机通过哪种接入方式来访问网络。</p><p>对于手机用户来说，可以访问的外部网络类型有很多，例如：<a href="https://baike.baidu.com/item/Internet/272794">Internet</a>、<a href="https://baike.baidu.com/item/WAP%E7%BD%91%E7%AB%99/3419865">WAP网站</a>、集团企业内部网络、行业内部专用网络。而不同的接入点所能访问的范围以及接入的方式是不同的，网络侧如何知道手机激活以后要访问哪个网络从而分配哪个网段的IP呢，这就要靠APN来区分了，即APN决定了用户的手机通过哪种接入方式来访问什么样的网络。</p></blockquote><h2 id="电信APN"><a href="#电信APN" class="headerlink" title="电信APN"></a>电信APN</h2><h3 id="ctwap-搭配5g-nsa可以限速"><a href="#ctwap-搭配5g-nsa可以限速" class="headerlink" title="ctwap 搭配5g nsa可以限速"></a>ctwap 搭配5g nsa可以限速</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 配置一 <br>名称：ctwap<br>APN：ctwap <br><br>// 配置二<br>名称：MMSC<br>Apn：ctwap<br>MMSC：<br>http://mmsc.vnet.mobi<br>MMS proxy：<br>10.0.0.200<br>port：80<br>Apn Type：mms<br><br>// 配置三<br>名称：Wap<br>APN：ctwap<br>Proxy：<br>10.0.0.200<br>port：80<br>Apn Type：default<br></code></pre></td></tr></tbody></table></figure><h3 id="ctnet"><a href="#ctnet" class="headerlink" title="ctnet"></a>ctnet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 配置一<br>名称：ctnet<br>APN：ctnet <br></code></pre></td></tr></tbody></table></figure><h3 id="ctlnet"><a href="#ctlnet" class="headerlink" title="ctlnet"></a>ctlnet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 配置一<br>名称：CTLTE <br>APN：ctlte <br>MCC：460 <br>MNC：01<br><br>// 配置二<br>名称：ctnet<br>接入点名称:ctnet<br>端口：80<br>用户名：vnet@mycdma.cn<br>密码：<br>http://vnet.mobi<br>服务器地址：<br>10.0.0.200 <br>MMSC :<br>http://mmsc.vnet.mobi<br>彩信代理：<br>10.0.0.200<br>端口：80<br>MCC:460<br>MNC:11<br>身份验证类型：pap或chap<br>APN类型：default,mms,supl,hirpi<br>APN协议：IPv4 APN漫游协议：IPv4<br>其它的不变（未设置）<br><br>// 配置三<br>名称：NET<br>APN：ctnet<br>Proxy：<br>10.0.0.200<br>port：80<br>Apn Type：default<br>其他的都不变<br></code></pre></td></tr></tbody></table></figure><h2 id="移动APN"><a href="#移动APN" class="headerlink" title="移动APN"></a>移动APN</h2><h3 id="cmmet"><a href="#cmmet" class="headerlink" title="cmmet"></a>cmmet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">CMNET<br>APN：cmnet<br>MCC:460<br>MNC:02<br>APN类型：default，supl，dun<br></code></pre></td></tr></tbody></table></figure><h3 id="cmwap"><a href="#cmwap" class="headerlink" title="cmwap"></a>cmwap</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">CMWAP<br>APN：cmwap<br>代理：10.0.0.172<br>端口：80<br>MCC:460<br>MNC:02<br>APN类型：default,supl,dun<br></code></pre></td></tr></tbody></table></figure><h3 id="cmwap-1"><a href="#cmwap-1" class="headerlink" title="cmwap"></a>cmwap</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">移动彩信：<br>名称：彩信<br>APN：cmwap<br>MMSC:mmsc.monternet.com<br>彩信代理：10.0.0.172<br>彩信端口：80<br></code></pre></td></tr></tbody></table></figure><h2 id="联通APN"><a href="#联通APN" class="headerlink" title="联通APN"></a>联通APN</h2><h3 id="uninet"><a href="#uninet" class="headerlink" title="uninet"></a>uninet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">联通APN<br>名称:UNINET<br>APN:uninet<br>MCC:460<br>MNC:01<br>APN类型:default<br>承载系统：LET<br>保存选择就可以了<br></code></pre></td></tr></tbody></table></figure><h3 id="scuiot"><a href="#scuiot" class="headerlink" title="scuiot"></a>scuiot</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称:SCUIOT<br>APN:scuiot<br></code></pre></td></tr></tbody></table></figure><h3 id="cuiot"><a href="#cuiot" class="headerlink" title="cuiot"></a>cuiot</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称:CUIOT<br>APN:cuiot<br></code></pre></td></tr></tbody></table></figure><h3 id="cmtds"><a href="#cmtds" class="headerlink" title="cmtds"></a>cmtds</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称：CMTDS<br>APN:cmtds<br></code></pre></td></tr></tbody></table></figure><h3 id="wonet"><a href="#wonet" class="headerlink" title="wonet"></a>wonet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称:WONET<br>APN:wonet<br>MCC:460<br>MNC:01<br>身份验证：无<br>APN类型：default,supl,dun （这个自己测试）<br></code></pre></td></tr></tbody></table></figure><h3 id="3gnet"><a href="#3gnet" class="headerlink" title="3gnet"></a>3gnet</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">名称:3GNET<br>APN:3gnet<br></code></pre></td></tr></tbody></table></figure><h3 id="3gwap"><a href="#3gwap" class="headerlink" title="3gwap"></a>3gwap</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">各称:3GWAP<br>APN:3gwap<br>代理服务器地址:<br>10.0.0.172<br>端口:80<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>auto.js 实现手机自动化操作</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/autopro.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/autopro.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Auto-js-实现手机自动化操作"><a href="#Auto-js-实现手机自动化操作" class="headerlink" title="Auto.js 实现手机自动化操作"></a>Auto.js 实现手机自动化操作</h1><h2 id="Auto-js"><a href="#Auto-js" class="headerlink" title="Auto.js"></a>Auto.js</h2><blockquote><p><a href="https://hyb1996.github.io/AutoJs-Docs/#/">Auto.js 官方文档</a></p><p><a href="https://github.com/NEPDream/Auto.js-backup">Auto.js 源码</a></p><p><a href="https://blog.autojs.org/">Auto.js Pro博客</a></p></blockquote><p>app: 应用。启动应用，卸载应用，使用应用查看、编辑文件、访问网页，发送应用间广播等。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>versionCode</td><td>当前软件版本号</td></tr><tr><td>versionName</td><td>当前软件的版本名称</td></tr><tr><td>autojs.versionCode</td><td>Auto.js版本号</td></tr><tr><td>autojs.versionName</td><td>Auto.js版本名称</td></tr><tr><td>launchApp(appName)</td><td>应用名称启动应用</td></tr><tr><td>launch(packageName)   与 launchPackage(packageName)</td><td>应用包名启动应用</td></tr><tr><td>getPackageName(appName)</td><td>获取应用名称对应的已安装的应用的包名</td></tr><tr><td>openAppSetting(packageName)</td><td>打开应用的详情页(设置页)</td></tr><tr><td>viewFile(path)</td><td>用其他应用查看文件</td></tr><tr><td>editFile(path)</td><td>用其他应用编辑文件</td></tr><tr><td>uninstall(packageName)</td><td>卸载应用</td></tr><tr><td>openUrl(url)</td><td>用浏览器打开网站url</td></tr><tr><td>sendEmail(options)</td><td>发送email</td></tr><tr><td>startActivity(name)</td><td>启动Auto.js的特定界面</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">versionApp</span> + <span class="hljs-string">" "</span> +app.<span class="hljs-property">VesionCode</span>) <br><span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">autojs</span>.<span class="hljs-property">versionName</span> + app.<span class="hljs-property">autojs</span>.<span class="hljs-property">versionCode</span>)<br><span class="hljs-comment">// 启动应用</span><br><span class="hljs-title function_">launchApp</span>(appName)<br><span class="hljs-title function_">launchPackage</span>(packageName) <span class="hljs-title function_">getPackageName</span>(appName)<br><span class="hljs-title function_">openUrl</span>(url)<br><span class="hljs-title function_">openAppSetting</span>(packageName)<br><span class="hljs-title function_">viewFile</span>(path) <br><span class="hljs-title function_">editFile</span>(path)<br><span class="hljs-title function_">startActivity</span>(name)<br>app.<span class="hljs-title function_">sendEmail</span>({<br>    <span class="hljs-attr">email</span>: [<span class="hljs-string">"10086@qq.com"</span>, <span class="hljs-string">"10001@qq.com"</span>],<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">"这是一个邮件标题"</span>,<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">"这是邮件正文"</span><br>});<br>app.<span class="hljs-title function_">startActivity</span>(<span class="hljs-string">"console"</span>);<br><span class="hljs-comment">// console 日志界面 setting 设置界面</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">toTotal</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-title function_">toastLog</span>(<span class="hljs-string">"Message"</span>)<br>    <span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">versionName</span>)<br>    <span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">versionCode</span>)<br>    <span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">autojs</span>.<span class="hljs-property">versionName</span>)<br>    <span class="hljs-title function_">toastLog</span>(app.<span class="hljs-property">autojs</span>.<span class="hljs-property">versionCode</span>)<br>}<br><span class="hljs-comment">// toTotal()</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">startApp</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-title function_">launchApp</span>(<span class="hljs-string">"优酷视频"</span>)<br>    <span class="hljs-keyword">var</span> ykPackageName = app.<span class="hljs-title function_">getPackageName</span>(<span class="hljs-string">"优酷视频"</span>)<br>    <span class="hljs-title function_">toastLog</span>(ykPackageName)<br>    app.<span class="hljs-title function_">openAppSetting</span>(ykPackageName)<br>    app.<span class="hljs-title function_">uninstall</span>(ykPackageName)<br>}<br><span class="hljs-title function_">startApp</span>()  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">conActivity</span>(<span class="hljs-params"></span>){       app.<span class="hljs-title function_">startActivity</span>(<span class="hljs-string">"com.tencent.mm.plugin.offline.ui.WalletOfflineCoinPurseUI"</span>)<br>    app.<span class="hljs-title function_">startActivity</span>(<span class="hljs-string">"console"</span>);<br>    app.<span class="hljs-title function_">startActivity</span>(<span class="hljs-string">"setting"</span>);<br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeFile</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-title function_">viewFile</span>(<span class="hljs-string">"/storage/emulated/0/Download/规则.txt"</span>)<br>    <span class="hljs-title function_">editFile</span>(<span class="hljs-string">"/storage/emulated/0/Download/规则.txt"</span>)<br>}<br><br><span class="hljs-comment">// app.openUrl("www.baidu.com")</span><br></code></pre></td></tr></tbody></table></figure><p>console: 控制台。记录运行的日志、错误、信息等。</p><ul><li>show </li><li>hide </li><li>hide</li><li>log</li><li>verbose</li><li>info</li><li>warn</li><li>error</li><li>assert</li><li>timeEnd</li><li>trace</li><li>input </li><li>rawInput</li><li>setSize</li><li>setPosition </li><li>setGlobalLogConfig</li><li>print(text)</li></ul><p>device: 设备。获取设备屏幕宽高、系统版本等信息，控制设备音量、亮度等。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">device.<span class="hljs-title function_">vibrate</span>(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></tbody></table></figure><p>engines: 脚本引擎。用于启动其他脚本。</p><p>events: 事件与监听。按键监听，通知监听，触摸监听等。</p><p>floaty: 悬浮窗。用于显示自定义的悬浮窗。</p><p>files: 文件系统。文件创建、获取信息、读写。</p><p>http: HTTP。发送HTTP请求，例如GET, POST等。</p><ul><li>get </li><li>post</li><li>postJson</li><li>Multipart</li><li>request</li><li>Response</li></ul><p>images, colors: 图片和图色处理。截图，剪切图片，找图找色，读取保存图片等。</p><p>keys: 按键模拟。比如音量键、Home键模拟等。</p><p>shell: Shell命令。</p><p>threads: 多线程支持。</p><p>ui: UI界面。用于显示自定义的UI界面，和用户交互。</p><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><ul><li><p>飞行模式破限速</p><ul><li>开关飞行模式，如果速度大于250k者，破限速成功，小于250k，则重复操作</li></ul></li><li><p>安装termux，pkg install android-tools</p></li></ul><p>ADB工具安装器-</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell am start -a android.intent.action.SENDTO -d sms:10086 --es sms_body  hello  //编辑短信<br><br>adb shell input keyevent 22  //焦点去到发送按键<br><br>adb shell input keyevent 66   //回车，就是按下发送键<br><br>am start -a android.intent.action.SENDTO -d sms:10086 --es sms_body  cxll<br><br>input keyevent 22<br><br>input keyevent 66<br><br>am start -a android.intent.action.SENDTO -d sms:10001 --es sms_body  cxll<br><br>input keyevent 22<br><br>input keyevent 66<br><br>settings put global multi_sim_data_call 1 切换卡1<br><br>settings put global multi_sim_data_call 2 切换卡2<br><br>打开飞行模式：<br><br>adb shell settings put global airplane_mode_on 1<br><br>关闭飞行模式：<br><br>adb shell settings put global airplane_mode_on 0<br><br>settings put global multi_sim_data_call 1<br><br>svc data <span class="hljs-built_in">disable</span><br><br>svc data <span class="hljs-built_in">enable</span><br><br>试一下：<br><br>//开启飞行模式<br><br>settings put global airplane_mode_on 1<br><br>am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="hljs-literal">true</span><br><br>//关闭飞行模式<br><br>settings put global airplane_mode_on 0<br><br>am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="hljs-literal">false</span><br><br>测速<br><br>adb shell am start -n com.android.camera/com.android.camera.Camera<br>//开启飞行模式<br>su<br>settings put global airplane_mode_on 1<br>am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="hljs-literal">true</span><br>//关闭飞行模式<br>su<br>settings put global airplane_mode_on 0<br>am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> auto.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图吧垃圾佬入门篇</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/%E7%94%B5%E8%84%91%E7%A1%AC%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="电脑硬件"><a href="#电脑硬件" class="headerlink" title="电脑硬件"></a>电脑硬件</h1><p>笔记本电脑</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">电脑型号: 华硕 VivoBook S15 X530UN 笔记本电脑<br>操作系统: Windows 10 专业版 64位<br>主板: 华硕 X530UN<br>内存: 8 GB ( 三星 DDR4 2400MHz )<br>主硬盘: 镁光 _1100_MTFDDAV512TBN ( 512 GB / 固态硬盘 )<br>显卡: Nvidia GeForce MX150 ( 2 GB )<br>显示器: 友达 AUO21ED ( 15.5 英寸  )<br>声卡: 瑞昱 Audio @ 英特尔 High Definition Audio 控制器<br>网卡: 英特尔 Dual Band Wireless-AC 8265<br></code></pre></td></tr></tbody></table></figure><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">处理器: 英特尔 Core i5-8250U @ 1.60GHz 四核 低电压处理器<br></code></pre></td></tr></tbody></table></figure><ul><li><p>中央处理器，逻辑运算，数据处理，完成操作指令，核心显卡</p></li><li><p>硅脂：涂抹在CPU与散热器之间</p></li><li><p>cpu要选对主板</p></li><li><p>盒装和散片</p><p>  性能参数</p></li><li><p>Intel酷睿(Core)和AMD锐龙(Ryzen)</p></li><li><p>核心 频率 架构 缓存 </p></li><li><p>默频 睿频 超频</p></li></ul><p>CPU的构成</p><p>正面</p><ul><li><p>厂商：</p><p>  intel:i3,i5,i7,i9</p><p>  AMD：闪龙，速龙，羿龙</p></li><li><p>型号:</p></li><li><p>主频</p><p>  它是CPU的时间频率，如1.8GHz,2.4GHz,</p><p>  一般来说主频越高，性能越强。</p><ul><li>核心数量：是指CPU内核个数，通常分为单核，双核，多核等。</li><li>同主频情况下，核心越多，运算能力越强。</li></ul></li><li><p>缓存（Ceche Memory）</p><p>  它是位于CPU和内存之间的临时存储器，包括一级缓存（L1），二级缓存（L2），三级缓存（L3），</p><p>  可以大幅度提升CPU的S性能</p><p>  背面</p></li><li><p>CPU触片和CPU核心</p></li></ul><h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>（GPU）</p><blockquote><p><a href="https://www.mydrivers.com/zhuanti/tianti/gpu/index.html">https://www.mydrivers.com/zhuanti/tianti/gpu/index.html</a></p><p><a href="https://www.mydrivers.com/zhuanti/tianti/gpu/index.html">显卡天梯图</a></p></blockquote><p><strong>图形处理器，显示适配器，是显卡的”心脏”，它决定了显卡的档次和大部分性能。</strong></p><p>显卡（Video card，Graphics card）全称显示接口卡，又称显示适配器，是计算机最基本配置、最重要的配件之一。显卡作为电脑主机里的一个重要组成部分，是电脑进行数模信号转换的设备，承担输出显示图形的任务。显卡接在电脑主板上，它将电脑的数字信号转换成模拟信号让显示器显示出来，同时显卡还是有图像处理能力，可协助CPU工作，提高整体的运行速度。</p><p>一、主流厂商：AMD(A卡、超威半导体)，NVIDIA(N卡、英伟达)</p><p>N卡就是NVDIA（英伟达）的显卡，GT或GTX开头的都是N卡；A卡就是AMD的显卡，HD开头或者R开头的都是A卡。</p><p>目前较大的显卡品牌有：华硕、技嘉、微星、蓝宝石、索泰、映众、七彩虹、影驰</p><p>二、 构造：GPU和风扇</p><p>三、 分类：</p><ul><li><p>独显（独立显卡）</p></li><li><p>独立显卡：具有独立的显示核心和独立的显存，相比集成显卡，具有高性能、但功耗与发热也更高，主要包括游戏显卡，对于制图/视频渲染专业用户，好用专业显卡。</p></li><li><p>核显（核芯显卡）</p><p>  集成在CPU上</p><p>  核显是指集成在CPU内的图形处理单元</p></li><li><p>集显（集成显卡）</p><p>  集成显卡：集成目前主要是CPU内置核显为主，主板集成显卡已淘汰。集显不具有独立的显示核心，往往集成在CPU芯片中，调用内存作为显存，相比独立显卡，具有具有低性能、低功耗、低发热的特点，且由于集成在CPU或主板上的一个显示芯片，自身无法升级。</p><p>  集显是指集成在主板上的图形处理芯片，如今的主板已经不自带集显了，这部分被整合进了CPU，也就是核显。</p><ul><li><p>集显和核显的区别?</p><p>  现在来说集显就是核显<br>  早期集显是集成在主板上的单独芯片固称集显<br>  后来集显逐渐合并到cpu中，就称之为核显<br>  但因为集显叫顺口了懒得改，并且“集成在CPU中的显卡”依旧可以简称为集显，固现在集显和核显是一个东西<br>  至于A卡N卡，指的是独显，顾名思义独立于cpu和主板的显卡，这个名字从台式机来的，因为笔记本上大部分是焊在主板上的</p><p>  集显整合进了CPU变成了核显，需要占用计算机内存;独显带有单独的内存且性能强大。</p></li><li><p>为什么会显示两个显卡?</p><p>  Intel酷睿CPU/AMDAPU带有集显，至强CPU/AMDCPU则是没有集成显卡的</p></li></ul></li></ul><p>四、 性能参数</p><ul><li><p>显存：</p><p>  显卡用来存储图形的内存，越大越好。</p></li><li><p>位宽：</p><p>  显存位宽是显存在一个时钟周期所能传送数据的位数，位数越大则相同频率下所能传输的数据量越大，如128位，192位，256位。</p></li><li><p>频率</p><p>  显存频率以MHz(兆赫兹)为单位，一定程序上发应着该显存的速度</p></li><li><p>分辨率</p><p>  指在屏幕上所显示出来的像素数目，由两部分来计算，分别是水平行的点数和垂直行的点数。</p></li><li><p>架构</p></li><li><p>流处理器</p></li><li><p>显存带宽=显存位宽×显存频率。</p></li></ul><p>​五、接口类型</p><ul><li><p>D-Sub(VGA)  只能输出模拟信号，</p></li><li><p>DVI-I兼容模拟和数字信号，</p></li><li><p>DVI-D和HDMI只能输出数字信号，</p></li></ul><h3 id="独立显卡"><a href="#独立显卡" class="headerlink" title="独立显卡"></a>独立显卡</h3><p>核心是GPU,数字信号转化模拟信号，三维运算构建图形，连接显示器输入</p><p>显卡长度：</p><p>主流显卡的显示芯片主要由<a href="https://baike.baidu.com/item/NVIDIA/325313">NVIDIA</a>（英伟达）和<a href="https://baike.baidu.com/item/AMD/5905">AMD</a>（超威半导体）两大厂商制造，通常将采用NVIDAI显示芯片的显卡称为N卡，而将采用AMD显示芯片的显卡称为A卡。</p><p>分类</p><ul><li><p>集成显卡</p></li><li><p>独立显卡</p></li><li><p>核芯显卡</p></li></ul><h3 id="核芯显卡"><a href="#核芯显卡" class="headerlink" title="核芯显卡"></a>核芯显卡</h3><h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><p>协调各部门的中枢所有配件都要插它板载网卡声卡集显内置BIOS系统和指示灯排查故障</p><p>主机板，提供控制电路，以及信息传输通道</p><p>结构</p><ul><li><p>芯片组</p></li><li><p>CPU插座</p></li><li><p>扩展槽</p></li><li><p>设备接口</p></li><li><p>电源接口：用来给主板、CPU、显卡等设备供电，主板上常用的电源接口：20Pin、24Pin、4Pin、6Pin…..</p><p>  硬盘接口：分为IDE接口和SATA接口 PS/2接口</p><p>  连接键盘接口（紫色）和鼠标接口（绿色）</p><p>  USB接口 通用串行总线 USB3.0版本</p><p>  com接口：串行通信接口（现在很少使用）</p><p>  LPT接口：并行通信端口（连接打印机或者扫描仪）</p><p>  音频接口：连接声音的输入和输出设备。主要有线性输入接口，麦克风接口、音响和耳机接口等。</p><p>  显示器接口:主要用来连接显示器。</p><p>  网络接口：使计算机连接到网络。</p><p>  RJ-45以太网接口。</p></li></ul><h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>确保稳定供电，延长配件寿命，断电时减少硬盘损失几率从而保护数据</p><p>电源（额定功率、输入技术指标、性能指标）</p><p><strong>计算机的电源为开关电路</strong></p><p>交流电——&gt;直流电——&gt;斩波控制电压</p><p>一、分类</p><ul><li>AT电源 （淘汰）</li><li>ATX电源</li><li>Micro ATX电源      90W~145W, 主要目的是降低成本</li></ul><p><strong>二、主要参数（额定功率、输入技术指标、性能指标）</strong></p><ul><li><p>额定功率</p><p>  额定功率是电源在额定电压电流下的输出功率</p><p>  最大功率是电源能够承受的最大输出功率。也叫峰值功率</p><p>  应该关注的是额定功率</p></li><li><p>输入技术指标</p><p>  输入技术指标包括输入电源相数、额定输入电压、电压的变化范围、频率、输入电流等。</p></li><li><p>性能指标</p><p>  多国认证标记、噪音和滤波、瞬间反应能力、电压保持时间、</p><p>  电磁干扰、开机延时、过压保护、电源效率、电源寿命</p></li></ul><h2 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h2><p>保护内部元件，防尘防水防潮，设计散热风道</p><p>机箱装饰品</p><ul><li>RGB风扇、灯条、灯带、手办、显卡支架</li></ul><h2 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h2><p>通过热传导的原理将CPU的热量转移</p><h3 id="风冷"><a href="#风冷" class="headerlink" title="风冷"></a>风冷</h3><h3 id="水冷"><a href="#水冷" class="headerlink" title="水冷"></a>水冷</h3><h3 id="液氨"><a href="#液氨" class="headerlink" title="液氨"></a>液氨</h3><h2 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h2><h3 id="有线网卡"><a href="#有线网卡" class="headerlink" title="有线网卡"></a>有线网卡</h3><h3 id="无线网卡"><a href="#无线网卡" class="headerlink" title="无线网卡"></a>无线网卡</h3><h2 id="声卡"><a href="#声卡" class="headerlink" title="声卡"></a>声卡</h2><h3 id="独立声卡"><a href="#独立声卡" class="headerlink" title="独立声卡"></a>独立声卡</h3><h2 id="网卡-1"><a href="#网卡-1" class="headerlink" title="网卡"></a>网卡</h2><h2 id="采集卡"><a href="#采集卡" class="headerlink" title="采集卡"></a>采集卡</h2><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>CPU与硬盘之间的数据交换媒介，程序同时调用数据越多需要的内存也越大</p><p>内部存储器，暂时存放CPU的运行数据，以及与外部存储器的交换数据</p><p>内存的概念</p><p>外存储器</p><p>内存储器</p><ul><li>RAM随机存储器</li></ul><p>CPU</p><ul><li><p>运算器</p></li><li><p>控制器</p></li></ul><p>只读存储器（ROM）</p><p>随机存储器（内存条RAM）</p><ol><li>构成:</li></ol><ul><li>内存芯片</li><li>电路板</li><li>金手指</li></ul><ol start="2"><li>主要性能参数</li></ol><ul><li><p>主频</p><p>  内存主频和CPU主频一样，通常用来表示工作的实际速度，以MHz(兆赫)为单位。</p><p>  DDR内存条通常用等效频率来表示内存规格。如DDR3 1066表示该内存等效频率为1066MHz,而颗粒工作频率和核心频率分别为266MHz、133MHz</p><p>  内存工作频率 = 内存颗粒核心频率 * 2</p><p>  内存规格   颗粒核心频率（MHz）颗粒工作频率（MHz） 等效频率（MHz）  </p></li><li><p>接口类型：台式机计算机内存条一般采用168Pin(金手指引脚数)、184Pin和240Pin接口，</p><p>  笔记本电脑常采用144Pin、200Pin接口</p></li><li><p>容量：内存容量的基本单位都是字节(B),但字节的单位大小，一般以MB或GB来表示，主流的内存条容量通常有2GB,4GB，8GB,16GB</p></li></ul><ol start="3"><li>内存条的种类</li></ol><ul><li>SDRAM</li><li>DDR-SDRAM:价格低廉，性能出色，因此成为当今主流的内存产品</li><li>RDRAM</li></ul><ol start="4"><li>DDR内存的发展</li></ol><ul><li>DDR-&gt;DDR2-&gt;DDR3-&gt;DDR4</li></ul><h2 id="硬盘（固态-x2F-机械）"><a href="#硬盘（固态-x2F-机械）" class="headerlink" title="硬盘（固态/机械）"></a>硬盘（固态/机械）</h2><p>硬盘是计算机主要存储媒介之一</p><p>一、 分类</p><ul><li>机械硬盘（HDD：Hybrid Hard Disk）采用磁性碟片存储，由盘片、磁头、盘片</li></ul><p>磁盘臂  </p><p>磁头控制器</p><p>接口</p><p>防护壳</p><p>盘头</p><ul><li>固态硬盘 (SDD:Solid State Drives) 采用闪存颗粒存储，由控制单元和存储单元（FLASH芯片、DRAM芯片）组成。</li></ul><p>闪存颗粒</p><p>控制单元</p><ul><li>混合硬盘(SSHD: Solid State Hybrid Drives)</li></ul><p>二、主要参数</p><ul><li>容量：容量越大，存储空间越大</li><li>转速：硬盘的转速</li><li>缓存</li></ul><p>三、接口</p><p>IDE</p><p>SATA</p><p>SCSI</p><p>SAS</p><p>存放数据的仓库</p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><table><thead><tr><th>Fata32</th><th>单个分区不能超过32G,单个文件不能超过4G</th></tr></thead><tbody><tr><td>exFAT</td><td></td></tr><tr><td>NTFS</td><td>老旧主板和老旧电脑无法识别</td></tr></tbody></table><table><thead><tr><th>开机引导的方式</th><th align="center">存储数据的结构</th></tr></thead><tbody><tr><td>Legacy引导（旧）</td><td align="center">MBR分区</td></tr><tr><td>UEFI引导（新）</td><td align="center">GPT分区</td></tr></tbody></table><ul><li>将MBR的数据结构转换成为GPT命令行</li><li>shift + f10</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">diskpart<br>list disk<br>select disk 0<br>clean<br>convert gpt<br></code></pre></td></tr></tbody></table></figure><ul><li>PE</li><li>装换成GUID格式</li><li>快速分区</li><li>创建ESP分区</li><li>创建MSR分区</li><li>固态：2k对齐不然会影响固态性能和寿命，对齐分区到此扇区数的整数倍2048</li></ul><h2 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h2><h4 id="鼠标和键盘"><a href="#鼠标和键盘" class="headerlink" title="鼠标和键盘"></a>鼠标和键盘</h4><h4 id="显示器（对角线尺寸、分辨率、点距、响应时间）"><a href="#显示器（对角线尺寸、分辨率、点距、响应时间）" class="headerlink" title="显示器（对角线尺寸、分辨率、点距、响应时间）"></a>显示器（对角线尺寸、分辨率、点距、响应时间）</h4><p><strong>显示器</strong>（Display）通常也被称为监视器，属于输出设备</p><p>一、分类</p><ul><li><p>CRT(淘汰)</p></li><li><p>LCD （液晶显示器）</p><p>  每个液晶粒子转动到不同的颜色的面来合成不同的颜色和图像。</p><p>  优点：机身薄、占地小、辐射小</p><p>  缺点：色彩不够鲜艳、可视度不高</p></li><li><p>LED：LED是发光二极管的英文缩写</p><p>  LED显示器是一种通过控制半导体发光二极管的显示方式，用来显示各种信息的显示屏幕。</p></li></ul><p>二、性能参数</p><ul><li><p>尺寸</p><p>  显示器的对角线尺寸，以英寸（1英寸 = 2.54cm为单位）</p></li><li><p>分辨率 1080p &lt; 2k &lt;  4k</p><p>  指单位面积显示像素的数量，通常用水平像素点 * 垂直像素点表示</p><p>  分辨率越高，所包含的像素就越多，图像就越清晰</p></li><li><p>点距</p><p>  屏幕上相邻两个同色像素单元之间的距离，点距越小，显示器一屏所能显示的像素越多</p></li><li><p>响应时间</p><p>  指液晶显示器各像素点对输入信号反应的速度，越小越好。</p><p>  响应时间越小，显示动态图像时尾影拖拽现象就越小。</p></li></ul><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="设置BIOS"><a href="#设置BIOS" class="headerlink" title="设置BIOS"></a>设置BIOS</h3><p>BIOS(Basic Input and Output System) ：成为基本输入输出系统，主要负责计算机的启动，硬件的设置与驱动等。硬件设置保存在主板的CMOS中</p><p>BIOS设置程序固化在主板的一块ROM芯片中。</p><p>CMOS：是主板上的一块可读写的RAM芯片，用于存储系统配置的具体参数，</p><p>其内容可以通过BIOS设置程序进行读写，断电后由主板电池对CMOS供电，以确保其中的信息不会丢失</p><p>BIOS设置程序  </p><p>CMOS芯片</p><p>BIOS的主要作用</p><ul><li><p>加电自检</p></li><li><p>中断服务</p></li><li><p>系统设置</p></li><li><p>系统启动自举</p></li></ul><p>BIOS类型</p><ul><li>UEFI BIOS可扩展固件界面</li></ul><p>进入BIOS</p><ul><li>del键，esc键，F2键，F10键，F12键</li></ul><p>设置CMOS</p><ul><li>设置常用CMOS</li></ul><h3 id="安装Win10"><a href="#安装Win10" class="headerlink" title="安装Win10"></a>安装Win10</h3><p>U盘安装Windows操作系统</p><p>准备：8G以上的U盘</p><p>制作U盘启动盘</p><p>下载制作U盘启动盘的软件进行制作，如大白菜</p><p> 复制镜像到启动盘中，位置不限</p><p> 注意：HDD是硬盘仿真模式，兼容性较高，ZIP是大容量软盘仿真模式，通常用于较老式的计算机</p><p>FAT32和FAT16都是分区格式，FAT32采用32位文件分配表，支持最大分区2000G，FAT16采用16位文件分  配表，支持最大分区2G</p><p><a href="https://www.baidu.com/s?wd=U%E7%9B%98&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">U盘</a>启动盘装机版win8PE x86版，即32位版本。</p><p>2012年之前出产的电脑主板大部分是不支持UEFI，这些机型可以直接通过装机版<a href="https://www.baidu.com/s?wd=U%E7%9B%98&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">U盘</a>启动盘引导，2012年之后出产的电脑很多采用UEFI主板，这些机型需要禁用UEFI才能通过<a href="https://www.baidu.com/s?wd=U%E7%9B%98&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">U盘</a>启动盘启动。</p><p>主要特点：</p><p>1、装机版制作工具体积小，占用U盘的空间小</p><p>2、功能强大稳定，支持大多数主板</p><p>U盘启动盘UEFI版是win8PE x64版，即64位版本：</p><p>不仅支持2012年之前的主板，也支持大部分2012之后的UEFI新主板直接U盘启动，需要注意的是，不是所有新型主板都能直接从UEFI启动盘启动，有些还是需要改BIOS设置的。</p><p>主要特点：</p><p>1、支持引导启动苹果mac电脑</p><p>2、支持多数UEFI新型主板直接U盘启动</p><p>3、缩短开机时间</p><p>设置启动Bios U盘为第一启动项</p><p>Window PE（Windows预安装环境）</p><p>分配磁盘</p><p>安装系统</p><p>1、两者各有优势，选择哪个好需根据个人情况选择，UEFI版体积比装机版大，需根据U盘大小、系统大小选择。</p><p>2、如果你是旧主板，不支持UEFI，那么就选择装机版，如果是新型UEFI主板，就选择UEFI版。</p><p>3、如果是Legacy+MBR下安装系统，选择装机版，如果是UEFI+GPT下安装系统，选择UEFI版。</p><ul><li><p>U盘安装Linux操作系统</p></li><li><p>U盘安装黑苹果操作系统</p></li></ul><p>安装驱动</p><ol><li><p>驱动工具软件是一种集驱动管理和硬件检测为一体的软件，可以为用户提供驱动备份、恢复、安装、删除、在线更新等功能</p></li><li><p>驱动程序通常包括主板驱动、显卡驱动、网卡驱动、声卡驱动以及其他硬件色被驱动，</p><p> 位置：计算机管理-&gt;设备管理</p></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级的Markdown语法</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/Markdown.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/Markdown.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><blockquote><ul><li><a href="http://reader.epubee.com/books/mobile/79/7985ba2da6fa4b7b346e9c3f4c64fbf5/text00001.html">了不起的Markdown </a></li><li><a href="https://blog.csdn.net/axi295309066/article/details/49176243">博客编辑神器：Markdown编辑器</a></li><li><a href="https://www.jianshu.com/p/7ddbb7dc8fec">Typora画流程图、时序图(顺序图)、甘特图</a></li><li><a href="https://juejin.cn/post/6958631022539833351">写了个简洁的Typora+Markdown简历模板 - 掘金</a></li></ul></blockquote><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p><strong>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</strong></p><p>目录</p><ul><li>用 [TOC]来生成目录</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[TOC]<br>&lt;!-- more --&gt; // <br></code></pre></td></tr></tbody></table></figure><h3 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h3><hr><h4 id="标题h1-h6-ctrl-1-6-ctrl-0-ctrl-x3D-x2F"><a href="#标题h1-h6-ctrl-1-6-ctrl-0-ctrl-x3D-x2F" class="headerlink" title="标题h1-h6 ctrl + 1~6 ctrl + 0 ctrl + =/ -"></a>标题h1-h6 ctrl + 1~6 ctrl + 0 ctrl + =/ -</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">#<br>##<br>###<br>####<br>#####<br>######<br>#######<br></code></pre></td></tr></tbody></table></figure><h4 id="列表-有序和无序-ctrl-shift-ctrl-shift"><a href="#列表-有序和无序-ctrl-shift-ctrl-shift" class="headerlink" title="列表 有序和无序 ctrl + shift + [        ctrl + shift + ]"></a>列表 有序和无序 ctrl + shift + [        ctrl + shift + ]</h4><ol><li>有序列表<ol><li>有序列表</li><li>有序列表</li></ol></li><li>有序列表</li></ol><ul><li>无序列表<ul><li>无序列表</li><li>无序列表</li></ul></li><li>无序列表</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 有序列表<br>- 无序列表<br></code></pre></td></tr></tbody></table></figure><h4 id="引用-ctrl-shift-Q"><a href="#引用-ctrl-shift-Q" class="headerlink" title="引用 ctrl+shift +Q"></a>引用 ctrl+shift +Q</h4><blockquote><p>引用 如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;引用<br></code></pre></td></tr></tbody></table></figure><h4 id="粗体和斜体-ctrl-b-ctrl-i-删除线-alt-shift-5"><a href="#粗体和斜体-ctrl-b-ctrl-i-删除线-alt-shift-5" class="headerlink" title="粗体和斜体 ctrl +b ctrl + i 删除线  alt + shift + 5"></a><strong>粗体</strong>和<em>斜体</em> ctrl +b ctrl + i 删除线  alt + shift + 5</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">**粗体**和*斜体*<br>~~~~<br>&lt;u&gt;下划线&lt;/u&gt;<br>- [x] <br><br>| | | 表格<br><br>flow 流程图<br>sequence 时序图<br>mermaid<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: Start<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TD<br>client1--&gt;|read / write|SVN((SVN server))<br>client2--&gt;|read only|SVN<br>client3--&gt;|read / write|SVN<br>client4--&gt;|read only|SVN<br>client5(...)--&gt;SVN<br>SVN---|store the data|sharedrive<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sequence">Title:连接建立的过程<br>客户主机-&gt;服务器主机: 连接请求（SYN=1,seq=client_isn） <br>服务器主机-&gt;客户主机: 授予连接（SYN=1,seq=client_isn）\n ack=client_isn+1<br>客户主机-&gt;服务器主机: 确认（SYN=0,seq=client_isn+1）\nack=server_isn+1<br></code></pre></td></tr></tbody></table></figure><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">==高亮==<br>``高亮``<br></code></pre></td></tr></tbody></table></figure><p>==高亮==</p><p><code>高亮</code></p><p><code>代码</code></p><h4 id="上标-文字下标"><a href="#上标-文字下标" class="headerlink" title="^上标^文字下标"></a>^上标^文字<del>下标</del></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">^上标^~下标~<br></code></pre></td></tr></tbody></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><!----><h4 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h4><p><a href=""></a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">//插入链接<br>[文字](网络链接)<br>//插入图片<br>![文字](图片路径)<br></code></pre></td></tr></tbody></table></figure><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><hr><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br></code></pre></td></tr></tbody></table></figure><h4 id="表格-ctrl-T"><a href="#表格-ctrl-T" class="headerlink" title="表格 ctrl +T"></a>表格 ctrl +T</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="代码-ctrl-shift-k"><a href="#代码-ctrl-shift-k" class="headerlink" title="代码  ctrl + shift + k"></a>代码  ctrl + shift + k</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">``</span><span class="hljs-string">`编程语言</span><br></code></pre></td></tr></tbody></table></figure><h4 id="制作待办事项To-do-List"><a href="#制作待办事项To-do-List" class="headerlink" title="制作待办事项To-do List"></a>制作待办事项To-do List</h4><p>你只需要在待办的事项文本或者清单文本前加上- [ ]、- [x]即可。</p><p>- [ ] 表示未完成，- [x] 表示已完成。</p><p>注：键入字符与字符之间都要保留一个字符的空格。</p><ul><li><input checked="" disabled="" type="checkbox"> 已完成1<ul><li><input disabled="" type="checkbox"> 未完成</li><li><input checked="" disabled="" type="checkbox"> 没有完成</li></ul></li><li><input checked="" disabled="" type="checkbox"> 已完成2</li><li><input disabled="" type="checkbox"> 已完成3</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">- [] 未完成 -空格[空格]空格<br>- [x] 完成<br></code></pre></td></tr></tbody></table></figure><p>脚注</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[^footnote]<br></code></pre></td></tr></tbody></table></figure><p>markdown更改图片大小</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">![Mou icon](http://25.io/mou/Mou_128.png =200x300)<br>或![Mou icon](http://25.io/mou/Mou_128.png =200x)<br></code></pre></td></tr></tbody></table></figure><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><h4 id="高效绘制-流程图、序列图、甘特图"><a href="#高效绘制-流程图、序列图、甘特图" class="headerlink" title="高效绘制 流程图、序列图、甘特图"></a>高效绘制 流程图、序列图、甘特图</h4><h6 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h6><p>mermaid vs flow</p><ul><li>mermaid 带颜色</li><li>flow 没有</li></ul><p>流程图分为竖向和横向两大类，竖向包括自上而下和自下而上两种顺序，横向包括从右到左和从左到右两种顺序。</p><p><code>mermaid n. 美人鱼（传说中的）；女子游泳健将 graph n. 图表；曲线图</code></p><blockquote><p>其对应语法分别为：graph TB/graph BT/graph RL/graph LR。</p><p>TB - top bottom（自上而下）<br>BT - bottom top（自下而上）<br>RL - right left（从右到左）<br>LR - left right（从左到右）</p><p>//不能使用 A &lt;–的写法</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法：```mermaid<br>mermaid mermaid mermaid mermaind mermaind mermaind <br>graph graph graph<br>graph RL <br>B--&gt;A<br>graph LR<br>A--&gt;C<br>graph TB <br>C--&gt;D<br>graph BT <br>D--&gt;C<br><br>--&gt; // 是这个<br><br>graph TD<br>A[ONE DAY] --&gt; B(Plan)<br>B --&gt; |My plan| C{Lit me <span class="hljs-keyword">do</span>}<br>C --&gt; |One| D[code]<br>C --&gt; |two| E[eat]<br>C --&gt; |three| F[<span class="hljs-built_in">sleep</span>]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph RL <br>B--&gt;A<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR <br>A--&gt;C<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB<br>C--&gt;D<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph BT<br>D--&gt;C<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB<br>A--&gt;B<br>D--&gt;B<br>B--&gt;C<br>C--&gt;D<br>D--&gt;A<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph RL<br>A--&gt;B<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB<br>A[ONE DAY] --&gt; B(Plan)<br>B --&gt; |My plan| C{Lit me do}<br>C --&gt; |One| D[code]<br>C --&gt; |two| E[eat]<br>C --&gt; |three| F[sleep]<br></code></pre></td></tr></tbody></table></figure><p>对框线形状的调整</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">```mermaid<br>graph LR <br>A[直角四边形]  []<br>B((圆形)) (())<br>C(圆角四边形) ()<br>D{菱形}  {}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB <br>A[直角四边形] --&gt; B((圆形))--&gt;C(弯角长方形)--&gt;D{菱形}<br></code></pre></td></tr></tbody></table></figure><p>对箭头的调整</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">graph LR <br>A[A]---B[B]<br>C[C]--&gt;D[D]<br>E[E]--&gt;|描述| F[F]<br>| 描述内容 |<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR <br>A[A]---B[B]<br>C[C]--&gt;D[D]<br>E[E]--&gt;|描述| F[F]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TD<br>A[ONE DAY] --&gt; B(Plan)<br>B --&gt; |My plan| C{Lit me do}<br>C --&gt; |One| D[code]<br>C --&gt; |two| E[eat]<br>C --&gt; |three| F[sleep]<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TD<br>A[方形] --&gt;B(圆角)<br>    B --&gt; C{条件a}<br>    C --&gt;|a=1| D[结果1]<br>    C --&gt;|a=2| E[结果2]<br>    F[竖向流程图]<br></code></pre></td></tr></tbody></table></figure><h6 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h6><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">标准流程图源码格式：<br><br>​```flow<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(<span class="hljs-built_in">yes</span>)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">4、标准流程图源码格式（横向）：<br><br>​```flow<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(<span class="hljs-built_in">yes</span>)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></tbody></table></figure><p> <strong>UML时序图</strong> sequence</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">UML时序图源码样例：<br>​```sequence<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sequence">A-&gt;B:hello world<br>A--&gt;&gt;B:hello world<br>Note left of A: 对象B的描述<br>Note right of B: 对象B的描述<br>B--&gt;A:world hello<br>B-&gt;A:world hello<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sequence">对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">UML标准时序图样例：<br>​```mermaid<br>%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>Note right of 对象B: 对象B的描述<br>  sequenceDiagram<br>    participant 张三<br>    participant 李四<br>    张三-&gt;王五: 王五你好吗？<br>    loop 健康检查<br>        王五-&gt;王五: 与疾病战斗<br>    end<br>    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...<br>    李四--&gt;&gt;张三: 很好!<br>    王五-&gt;李四: 你怎么样?<br>    李四--&gt;王五: 很好!<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>  sequenceDiagram<br>    participant 张三<br>    participant 李四<br>    张三-&gt;王五: 王五你好吗？<br>    loop 健康检查<br>        王五-&gt;王五: 与疾病战斗<br>    end<br>    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...<br>    李四--&gt;&gt;张三: 很好!<br>    王五-&gt;李四: 你怎么样?<br>    李四--&gt;王五: 很好!<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">UML时序图源码复杂样例：<br>​```sequence<br>Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三,对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sequence">Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三,对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br></code></pre></td></tr></tbody></table></figure><h6 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h6><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">```mermaid<br>%% 语法示例<br>        gantt<br>        dateFormat  YYYY-MM-DD<br>        title 软件开发甘特图<br>        section 设计<br>        需求                      :<span class="hljs-keyword">done</span>,    des1, 2014-01-06,2014-01-08<br>        原型                      :active,  des2, 2014-01-09, 3d<br>        UI设计                     :         des3, after des2, 5d<br>    未来任务                     :         des4, after des3, 5d<br>        section 开发<br>        学习准备理解需求                      :crit, <span class="hljs-keyword">done</span>, 2014-01-06,24h<br>        设计框架                             :crit, <span class="hljs-keyword">done</span>, after des2, 2d<br>        开发                                 :crit, active, 3d<br>        未来任务                              :crit, 5d<br>        耍                                   :2d<br>        section 测试<br>        功能测试                              :active, a1, after des3, 3d<br>        压力测试                               :after a1  , 20h<br>        测试报告                               : 48h<br>​```<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">%% 语法示例<br>        gantt<br>        dateFormat  YYYY-MM-DD<br>        title 软件开发甘特图<br>        section 设计<br>        需求                      :done,    des1, 2014-01-06,2014-01-08<br>        原型                      :active,  des2, 2014-01-09, 3d<br>        UI设计                     :         des3, after des2, 5d<br>    未来任务                     :         des4, after des3, 5d<br>        section 开发<br>        学习准备理解需求                      :crit, done, 2014-01-06,24h<br>        设计框架                             :crit, done, after des2, 2d<br>        开发                                 :crit, active, 3d<br>        未来任务                              :crit, 5d<br>        耍                                   :2d<br>        section 测试<br>        功能测试                              :active, a1, after des3, 3d<br>        压力测试                               :after a1  , 20h<br>        测试报告                               : 48h<br></code></pre></td></tr></tbody></table></figure><h2 id="Markdown-光亮"><a href="#Markdown-光亮" class="headerlink" title="Markdown 光亮"></a>Markdown 光亮</h2><blockquote><p><a href="https://blog.csdn.net/weixin_42662955/article/details/91156180">Markdown编辑器语法之代码高亮、标记和文字颜色</a></p></blockquote><p>概念 红色</p><p><font color="red" size="4" style="background:#F8F8F8">JavaScript做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行，这就是计时事件</font></p><p>必记 </p><p><code>必记</code></p><h3 id="常用光亮"><a href="#常用光亮" class="headerlink" title="常用光亮"></a>常用光亮</h3><p>==这是光亮==</p><p><code>这也是光亮</code></p><h3 id="文字颜色改变"><a href="#文字颜色改变" class="headerlink" title="文字颜色改变"></a>文字颜色改变</h3><p><code>font &lt;face="" color= size= &gt;</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">Size：规定文本的尺寸大小，取值从 1 到 7 ，浏览器默认值是 3.<br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"黑体"</span>&gt;</span>我是黑体字<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"微软雅黑"</span>&gt;</span>我是微软雅黑<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"STCAIYUN"</span>&gt;</span>我是华文彩云<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#0099ff</span> <span class="hljs-attr">size</span>=<span class="hljs-string">3</span> <span class="hljs-attr">face</span>=<span class="hljs-string">"黑体"</span>&gt;</span>color=#0099ff size=3 face="黑体"<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#00ffff</span> <span class="hljs-attr">size</span>=<span class="hljs-string">4</span>&gt;</span>color=#00ffff size=4<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">gray</span> <span class="hljs-attr">size</span>=<span class="hljs-string">5</span>&gt;</span>color=gray size=5<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>Size：规定文本的尺寸大小，取值从 1 到 7 ，浏览器默认值是 3.<br><font face="黑体">我是黑体字</font><br><font face="微软雅黑" size="7">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="3" face="黑体">color=#0099ff size=3 face=”黑体”</font><br><font color="#00ffff" size="4">color=#00ffff size=4</font><br><font color="gray" size="5">color=gray size=5</font></p><p><font color="blue" size="6">这是蓝色</font></p><h3 id="文字底色改变"><a href="#文字底色改变" class="headerlink" title="文字底色改变"></a>文字底色改变</h3><p><code>style=background:颜色</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-attribute">font</span> style=<span class="hljs-attribute">background</span>:red size=<span class="hljs-number">5</span> color=white&gt;红色重点&lt;/font&gt;<br>&lt;font style=background:<span class="hljs-number">#000000</span> size=<span class="hljs-number">5</span> color=white&gt;黑色重点&lt;/font&gt;<br></code></pre></td></tr></tbody></table></figure><p><font style="background:red" size="5" color="white">红色重点</font></p><p><font style="background:#000000" size="5" color="white">黑色重点</font></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"left"</span>&gt;</span>居左文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>居中文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"right"</span>&gt;</span>居右文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Typora安装Pandoc"><a href="#Typora安装Pandoc" class="headerlink" title="Typora安装Pandoc"></a>Typora安装Pandoc</h2><p>Pandoc是一个标记语言转换工具，可实现不同标记语言间的格式转换。</p><p>Typora的文件导入/导出功能是使用Pandoc把Markdown文件转换成不同格式的文件，所以如果想使用文件导入/导出功能，必须要先安装Pandoc。</p><p>如果不安装Pandoc，Typora只支持导出HTML和PDF格式的文件。</p><p>如果安装了Pandoc，Typora支持的文件格式如下。</p><p>· 导入文件格式。</p><p>如.docx、.latex、.tex、.ltx，.rst、.rest、.org、.wiki、.dokuwiki、.textile、.opml、.epub等。</p><p>· 导出文件格式。</p><p>如HTML、PDF、Word、OpenOffice、RTF、ePub、LA TEX、MediaWiki、PNG等。</p><p>Pandoc的安装步骤如下。</p><p>打开<a href="https://github.com/jgm/pandoc/releases/latest%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%88%E6%B3%A8%E6%84%8F%E8%A6%81%E5%AF%B9%E5%BA%94%E6%9C%AC%E6%9C%BA%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%89%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%90%8E%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://github.com/jgm/pandoc/releases/latest，下载最新的安装包（注意要对应本机的操作系统），双击后按照提示一步一步安装即可。</a></p><p> 如果想使用自动补全表情符号的功能，需要到【偏好设置】中去激活：【偏好设置】→【编辑器】→【触发自动完成】→勾选【Emoji表情】，然后在输入Emoji标记语法时，Typora会自动给出补全信息，</p><h3 id="Typora扩展语法"><a href="#Typora扩展语法" class="headerlink" title="Typora扩展语法"></a>Typora扩展语法</h3><p>Typora扩展了下画线、数学公式、目录、脚注、上标和下标、图表操作等功能，并且支持很多HTML标签，使排版格式变得更加齐全。</p><h2 id="Markdowm-Emoji"><a href="#Markdowm-Emoji" class="headerlink" title="Markdowm Emoji"></a>Markdowm Emoji</h2><p>Emoji 表情网站</p><p>方法一</p><p><a href="https://www.cnblogs.com/wangjs-jacky/p/12011208.html">Typora Emoji图标 </a></p><p><a href="https://emoji-css.afeld.me/">Emoji CSS</a></p><p>输入+<code>:kissing_smiling_eyes:</code></p><h3 id="kissing-smiling-eyes-scream-derelict-house"><a href="#kissing-smiling-eyes-scream-derelict-house" class="headerlink" title=":kissing_smiling_eyes: :scream: :derelict_house:"></a><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>🏚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3da.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p>方法二</p><p><a href="http://emojihomepage.com/">Emoji Homepage 👀 - Copy and paste emoji. 💨 Fast and 👌 Simple.</a></p><p>使用标题<code>#</code>控制Emoji大小👯‍♀️</p><h3 id="😴-🚵‍♀️-👨‍👨‍👧‍👧-☝-🤞-🙈🤫"><a href="#😴-🚵‍♀️-👨‍👨‍👧‍👧-☝-🤞-🙈🤫" class="headerlink" title="😴 🚵‍♀️ 👨‍👨‍👧‍👧 ☝ 🤞 🙈🤫"></a>😴 🚵‍♀️ 👨‍👨‍👧‍👧 ☝ 🤞 🙈🤫</h3><h2 id="facepunch"><a href="#facepunch" class="headerlink" title=":facepunch:"></a><span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h2 id="🤫GitHub的README-md的svg图标"><a href="#🤫GitHub的README-md的svg图标" class="headerlink" title="🤫GitHub的README.md的svg图标"></a>🤫GitHub的README.md的svg图标</h2><p><a href="https://www.jianshu.com/p/e61b0796f695">GitHub的README.md制作好看的svg图标</a></p><p>官方文档：<a href="https://shields.io/#/">Shields.io: Quality metadata badges for open source projects</a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://img.shields.io/badge/&lt;图标前部分的文字&gt;-&lt;图标后部分的文字&gt;-&lt;颜色&gt;.svg<br>注意点：<br>1、因为-是会用到的分割字符，如果文字中有-，如要用--来代替，如Objective-C要写成Objective--C<br>2、颜色可以是支持的英文，也可以是6位的16进制的字符串，如blue、0000ff<br>3、可以支持圆角、矩形样式、社交样式、还可以添加logo<br></code></pre></td></tr></tbody></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://img.shields.io/badge/language-swift-brightgreen.svg?style=plastic" alt="瘦小的圆角矩形"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![瘦小的圆角矩形](https:<span class="hljs-comment">//img.shields.io/badge/language-swift-brightgreen.svg?style=plastic)</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://img.shields.io/badge/language-swift-green.svg" alt="正常大小的圆角矩形"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![正常大小的圆角矩形](https:<span class="hljs-comment">//img.shields.io/badge/language-swift-green.svg)</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://img.shields.io/badge/language-swift-yellowgreen.svg?style=flat-square" alt="正常大小的矩形"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![正常大小的矩形](https:<span class="hljs-comment">//img.shields.io/badge/language-swift-yellowgreen.svg?style=flat-square)</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://img.shields.io/badge/Stack_Overflow-10k+-yellow.svg?style=social" alt="社交样式"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![社交样式](https:<span class="hljs-comment">//img.shields.io/badge/Stack_Overflow-10k+-yellow.svg?style=social)</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://img.shields.io/badge/GitHub-10k+-yellow.svg?style=social&amp;logo=github" alt="带logo社交样式"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![带logo社交样式](https:<span class="hljs-comment">//img.shields.io/badge/GitHub-10k+-yellow.svg?style=social&amp;logo=github)</span><br></code></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://img.shields.io/badge/%E5%BE%AE%E4%BF%A1-10k+-yellow.svg?style=social&amp;logo=wechat"></p><blockquote><p><a href="https://emojixd.com/">🤣 Emoji表情大全，颜文字百科 💌 - EmojiXD</a></p></blockquote><p>Emoji 在上个世纪90年代，由日本电信商引入服务，最早用于在</p><p>短消息之中插入表情。2007年，苹果公司的 iPhone 支持了 </p><p>Emoji，导致它在全世界范围的流行。</p><p>Typora 添加 emoji 的方法有两种</p><ul><li><p><code>:</code>符号加emoji表情名</p></li><li><p>window10可以使用快捷键<code>win +.</code></p></li></ul><blockquote><p>👴🧓👱‍♀️👨‍🏫😀😁😂🤣😃😄😘😍😋😑😐😚</p></blockquote><p>mac emoji图标</p><ul><li>Control＋Command⌘＋空白键</li></ul><p>使用</p><ul><li><p>Mathematics</p></li><li><p>Diagrams </p></li><li><p>Emojy</p></li><li><p>Footnote</p></li><li><p>git远程仓库+git hooks 实现自动推送更新</p></li><li><p>坚果云同步</p></li><li><p>有道云笔记同步</p><ul><li><a href="https://link.juejin.cn/?target=https://sm.ms/">SM.MS图床</a></li><li>Picgo 软件 图片上传软件</li><li>uTool打开 有道云软件</li><li>Typora</li></ul></li><li><p><a href="https://juejin.cn/post/6844903577018712077">程序员必备软件之编辑预览于一身的 Typora - 掘金</a></p></li></ul><p>同步</p><ul><li><a href="https://juejin.cn/post/6844904119031988232">利用神器Typora+PicGo，实现有道云不用会员就可在Markdown自动上传图片 - 掘金</a></li></ul><p>美化</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matey主题</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/Hexo-Matey.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/Hexo-Matey.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-Matry主题美化"><a href="#Hexo-Matry主题美化" class="headerlink" title="Hexo-Matry主题美化"></a>Hexo-Matry主题美化</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">{% meting "002j785c33YQHT" "tencent" "song" %}<br></code></pre></td></tr></tbody></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: mastery<br></code></pre></td></tr></tbody></table></figure><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-github-emojis --save // emoji<br>npm i -S hexo-prism-plugin //代码光亮<br>npm install hexo-generator-search --save // 主题搜索 <br>npm i --save hexo-wordcount  // 字数统计<br>npm install hexo-generator-feed --save  // rss订阅<br></code></pre></td></tr></tbody></table></figure><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 批量操作<br>// /source/页面名/index.md<br>hexo new page <span class="hljs-string">"tags"</span><br>hexo new page <span class="hljs-string">"categories"</span><br>hexo new page <span class="hljs-string">"about"</span><br>hexo new page <span class="hljs-string">"contact"</span><br>hexo new page <span class="hljs-string">"friends"</span><br></code></pre></td></tr></tbody></table></figure><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">"tags"</span><br>// /source/tags/index.md<br>---<br>title: tags<br><span class="hljs-built_in">date</span>: <br><span class="hljs-built_in">type</span>: <span class="hljs-string">"tags"</span><br>layout: <span class="hljs-string">"tags"</span><br>---<br></code></pre></td></tr></tbody></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">"categories"</span><br>// /source/categories/index.md<br>---<br>title: categories<br><span class="hljs-built_in">date</span>: <br><span class="hljs-built_in">type</span>: <span class="hljs-string">"categories"</span><br>layout: <span class="hljs-string">"categories"</span><br>---<br></code></pre></td></tr></tbody></table></figure><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">"about"</span><br>// /source/about/index.md<br>---<br>title: about<br><span class="hljs-built_in">date</span>: <br><span class="hljs-built_in">type</span>: <span class="hljs-string">"about"</span><br>layout: <span class="hljs-string">"about"</span><br>---<br></code></pre></td></tr></tbody></table></figure><h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">"contact"</span><br>---<br>title: contact<br><span class="hljs-built_in">date</span>: <br><span class="hljs-built_in">type</span>: <span class="hljs-string">"contact"</span><br>layout: <span class="hljs-string">"contact"</span><br>---<br></code></pre></td></tr></tbody></table></figure><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">"friends"</span><br>---<br>title: friends<br><span class="hljs-built_in">date</span>: 2020-02-23 19:37:07<br><span class="hljs-built_in">type</span>: <span class="hljs-string">"friends"</span><br>layout: <span class="hljs-string">"friends"</span><br>---<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/source/_data/friends.json<br><br></code></pre></td></tr></tbody></table></figure><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">/source/404.md<br>---<br>title: 404<br><span class="hljs-built_in">date</span>: 2020-02-23 19:37:07<br><span class="hljs-built_in">type</span>: <span class="hljs-string">"404"</span><br>layout: <span class="hljs-string">"404"</span><br>description: <span class="hljs-string">"Oops～，我崩溃了！找不到你想要的页面了"</span><br>---<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">/layout/404.ejs<br>&lt;style <span class="hljs-built_in">type</span>=<span class="hljs-string">"text/css"</span>&gt;<br>    /* don<span class="hljs-string">'t remove. */</span><br><span class="hljs-string">    .about-cover {</span><br><span class="hljs-string">        height: 90.2vh;</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">&lt;/style&gt;</span><br><span class="hljs-string">&lt;div class="bg-cover pd-header about-cover"&gt;</span><br><span class="hljs-string">    &lt;div class="container"&gt;</span><br><span class="hljs-string">        &lt;div class="row"&gt;</span><br><span class="hljs-string">            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2"&gt;</span><br><span class="hljs-string">                &lt;div class="brand"&gt;</span><br><span class="hljs-string">                    &lt;div class="title center-align"&gt; 404 &lt;/div&gt;</span><br><span class="hljs-string">                    &lt;div class="description center-align"&gt;</span><br><span class="hljs-string">                        &lt;%= page.description %&gt;</span><br><span class="hljs-string">                    &lt;/div&gt;</span><br><span class="hljs-string">                &lt;/div&gt;</span><br><span class="hljs-string">            &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;script&gt; // 每天切换 banner 图. Switch banner image every day. $('</span>.bg-cover<span class="hljs-string">').css('</span>background-image<span class="hljs-string">', '</span>url(/medias/banner/<span class="hljs-string">' + new Date().getDay() + '</span>.jpg)<span class="hljs-string">'); &lt;/script&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">/source/aboutme/index.html <br>About: url: / icon: fas fa-address-card children: - name: 关于我 url: /about icon: fas fa-user-circle - name: Another #这是新添加的，在原有配置基础上添加 url: /aboutme icon: fa fa-user-secret<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件</span><br>skip_render: <br>    - aboutme/** <br>    - aaa/**<br>    - bbb/**<br></code></pre></td></tr></tbody></table></figure><h2 id="菜单导航"><a href="#菜单导航" class="headerlink" title="菜单导航"></a>菜单导航</h2><p>配置基本菜单导航的名称、路径 url 和图标 icon.</p><p>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># main menu navigation url and icon # 配置菜单导航的名称、路径和图标icon. menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle Contact: url: /contact icon: fas fa-comments Friends: url: /friends icon: fas fa-address-book</span><br></code></pre></td></tr></tbody></table></figure><p>二级菜单</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle-o Friends: url: /friends icon: fas fa-address-book Medias: icon: fas fa-list children: - name: Musics url: /musics icon: fas fa-music - name: Movies url: /movies icon: fas fa-film - name: Books url: /books icon: fas fa-book - name: Galleries url: /galleries icon: fas fa-image<br></code></pre></td></tr></tbody></table></figure><h2 id="添加emoji表情"><a href="#添加emoji表情" class="headerlink" title="添加emoji表情"></a>添加emoji表情</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-github-emojis --save<br></code></pre></td></tr></tbody></table></figure><p>k Hexo 根目录下的 _config.yml 文件中，新增以下的配置项</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">githubEmojis:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  className: github-emoji<br>  inject: <span class="hljs-literal">true</span><br>  styles:<br>  customEmojis:<br></code></pre></td></tr></tbody></table></figure><p>在网站<a href="https://www.webfx.com/tools/emoji-cheat-sheet/%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E5%B8%B8%E7%94%A8%E8%A1%A8%E6%83%85%E5%AF%B9%E5%BA%94%E4%BB%A3%E7%A0%81">https://www.webfx.com/tools/emoji-cheat-sheet/可以搜索常用表情对应代码</a></p><p>在 <a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">emoji-cheat-sheet</a> 中找到你想要的表情，然后点击即可复制。使用方法和 <a href="https://github.com/">GitHub</a> 一样，比如你想发一个笑脸 😄 直接输入笑脸对应的 emoji 编码 <code>:smile：</code> 就可以。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -S hexo-prism-plugin<br><br>// 修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 <span class="hljs-literal">false</span>，并新增 prism 插件相关的配置，主要配置如下：<br>highlight: <br><span class="hljs-comment">#代码块的设置 enable: false </span><br><span class="hljs-comment">#开启代码块高亮 line_number: true </span><br><span class="hljs-comment">#如果未指定语言，则启用自动检测 auto_detect: false #显示行数 tab_replace: '' </span><br><span class="hljs-comment">#用n个空格替换tabs；如果值为空，则不会替换tabs wrap: true hljs: false # 关闭原有的代码高亮，使用自己的 prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'tomorrow' line_number: false # default false custom_css:</span><br></code></pre></td></tr></tbody></table></figure><h2 id="主题的搜索功能"><a href="#主题的搜索功能" class="headerlink" title="主题的搜索功能"></a>主题的搜索功能</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-search --save<br></code></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br></code></pre></td></tr></tbody></table></figure><h2 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save hexo-wordcount<br><br>wordCount:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">false</span> <span class="hljs-comment"># 将这个值设置为 true 即可.</span><br>  postWordCount: <span class="hljs-literal">true</span><br>  min2read: <span class="hljs-literal">true</span><br>  totalCount: <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><h2 id="添加RSS订阅支持"><a href="#添加RSS订阅支持" class="headerlink" title="添加RSS订阅支持"></a>添加RSS订阅支持</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-feed --save<br><br>feed: <span class="hljs-built_in">type</span>: atom <br>path: atom.xml <br><span class="hljs-built_in">limit</span>: 20 <br>hub: <br>content: content_limit: 140 <br>content_limit_delim: <span class="hljs-string">' '</span> <br>order_by: -<span class="hljs-built_in">date</span><br></code></pre></td></tr></tbody></table></figure><h2 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/layout/_partial/footer.ejs<br></code></pre></td></tr></tbody></table></figure><h2 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h2><p>在主题的 config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;% <span class="hljs-keyword">if</span> (theme.socialLink.github) { %&gt; &lt;a href=<span class="hljs-string">"&lt;%= theme.socialLink.github %&gt;"</span> class=<span class="hljs-string">"tooltipped"</span> target=<span class="hljs-string">"_blank"</span> data-tooltip=<span class="hljs-string">"访问我的GitHub"</span> data-position=<span class="hljs-string">"top"</span> data-delay=<span class="hljs-string">"50"</span>&gt; &lt;i class=<span class="hljs-string">"fab fa-github"</span>&gt;&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="修改打赏二维码图片"><a href="#修改打赏二维码图片" class="headerlink" title="修改打赏二维码图片"></a>修改打赏二维码图片</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span>/medias/reward<br></code></pre></td></tr></tbody></table></figure><h2 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h2><p> _config.yml 配置文件中激活 music </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">music:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  showTitle: <span class="hljs-literal">true</span><br>  title: 听听音乐<br>  fixed: <span class="hljs-literal">false</span> <span class="hljs-comment"># 开启吸底模式</span><br>  autoplay: <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否自动播放</span><br>  theme: <span class="hljs-string">'#42b983'</span><br>  loop: <span class="hljs-string">'all'</span> <span class="hljs-comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span><br>  order: <span class="hljs-string">'list'</span> <span class="hljs-comment"># 音频循环顺序, 可选值: 'list', 'random'</span><br>  preload: <span class="hljs-string">'auto'</span> <span class="hljs-comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span><br>  volume: 0.7 <span class="hljs-comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br>  listFolded: <span class="hljs-literal">false</span> <span class="hljs-comment"># 列表默认折叠</span><br>  listMaxHeight: <span class="hljs-comment">#列表最大高度</span><br></code></pre></td></tr></tbody></table></figure><p>server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），</p><p>baidu（百度音乐）。</p><p>type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。</p><h2 id="全局音乐播放器"><a href="#全局音乐播放器" class="headerlink" title="全局音乐播放器"></a>全局音乐播放器</h2><h2 id="修改网站背景图"><a href="#修改网站背景图" class="headerlink" title="修改网站背景图"></a>修改网站背景图</h2><h2 id="定制修改"><a href="#定制修改" class="headerlink" title="定制修改"></a>定制修改</h2><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><ul><li>顶部导航栏颜色,底部状态栏颜色</li></ul><p>在主题文件的 /source/css/matery.css 文件中修改</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">// 搜索 <span class="hljs-selector-class">.bg-color</span><br><span class="hljs-comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><br><span class="hljs-selector-class">.bg-color</span> {<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-number">#2558FF</span> <span class="hljs-number">0%</span>, <span class="hljs-number">#0f9d58</span> <span class="hljs-number">100%</span>);<br>}<br><span class="hljs-comment">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span><br><span class="hljs-keyword">@-webkit-keyframes</span> rainbow {<br>   <span class="hljs-comment">/* 动态切换背景颜色. */</span><br>}<br><span class="hljs-keyword">@keyframes</span> rainbow {<br>    <span class="hljs-comment">/* 动态切换背景颜色. */</span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h2><p>在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');<br></code></pre></td></tr></tbody></table></figure><p>在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 getDay() 改为 getHours() 或者 getMinutes() 即可。</p><h2 id="添加评论模块配置"><a href="#添加评论模块配置" class="headerlink" title="添加评论模块配置"></a>添加评论模块配置</h2><h2 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#这是根目录下的配置文件信息</span><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">xxxxx</span>        <span class="hljs-comment">#网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">世界很暗，但是你来了</span> <span class="hljs-comment">#网站副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">本网站是个人兴趣爱好，总结分享经验，记录生活点滴的平台，希望在以后的学习旅途中，走出自己的风景。</span>    <span class="hljs-comment">#网站描述description 主要用于5E0，告诉搜索引擎一个关于您站点的简单描述</span><br><span class="hljs-attr">keywords:</span> [<span class="hljs-string">HTML</span>, <span class="hljs-string">CSS</span>, <span class="hljs-string">JavaScript</span>, <span class="hljs-string">JQuery</span>, <span class="hljs-string">java</span>, <span class="hljs-string">linux等</span>]        <span class="hljs-comment">#网站的关键词。使用半角逗号“，”分隔多个关键词</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">xxx</span>            <span class="hljs-comment">#您的名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>            <span class="hljs-comment">#网站使用的语言。建议修改为zh-CN</span><br><span class="hljs-attr">timezone:</span>            <span class="hljs-comment">#网站时区。Hexo默认使用您电脑的时区。</span><br><br><br><span class="hljs-comment"># 这是主题配置文件的相关信息</span><br><span class="hljs-comment"># 配置网站favicon和网站LOGO</span><br><span class="hljs-comment"># 此处我用的CDN，也可以使用本地文件</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/logo.png</span><br><br><br><span class="hljs-comment"># 网站副标题，打字效果</span><br><span class="hljs-comment"># 如果有符号 ‘ ，请在 ’ 前面加上 \</span><br><span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否循环</span><br>  <span class="hljs-attr">showCursor:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否显示光标</span><br>  <span class="hljs-attr">startDelay:</span> <span class="hljs-number">300</span> <span class="hljs-comment"># 开始延迟</span><br>  <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">100</span> <span class="hljs-comment"># 打字速度</span><br>  <span class="hljs-attr">backSpeed:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 删除速度</span><br>  <span class="hljs-attr">sub1:</span> <span class="hljs-string">如果放弃太早，你永远都不知道自己会错过什么。</span><br>  <span class="hljs-attr">sub2:</span> <span class="hljs-string">没有伞的孩子必须努力奔跑！</span><br>  <span class="hljs-attr">sub3:</span> <span class="hljs-string">花开不是为了花落，而是为了开的更加灿烂。</span><br>  <span class="hljs-attr">sub4:</span> <span class="hljs-string">没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</span><br></code></pre></td></tr></tbody></table></figure><p>网站打字效果副标题默认有两个，即 sub1 和 sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 sub1 和 sub2 后面继续添加即可，然后在去主题目录下的 layout 文件夹下的_partial 文件夹，修改 bg-cover-content.ejs 文件，大约在 12 行左右，如下面所示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"description center-align"</span>&gt;</span><br>                &lt;% if (theme.subtitle.enable) { %&gt;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"subtitle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Typed</span>(<span class="hljs-string">"#subtitle"</span>, {</span><br><span class="language-javascript">                        <span class="hljs-attr">strings</span>: [<span class="hljs-string">'&lt;%= theme.subtitle.sub1 %&gt;'</span>,</span><br><span class="language-javascript">                                   <span class="hljs-string">'&lt;%= theme.subtitle.sub2 %&gt;'</span>,</span><br><span class="language-javascript">                                  <span class="hljs-string">'&lt;%= theme.subtitle.sub3 %&gt;'</span>,</span><br><span class="language-javascript">                                   <span class="hljs-string">'&lt;%= theme.subtitle.sub4 %&gt;'</span>],</span><br><span class="language-javascript">                        <span class="hljs-attr">startDelay</span>: &lt;%= theme.<span class="hljs-property">subtitle</span>.<span class="hljs-property">startDelay</span> %&gt;,</span><br><span class="language-javascript">                        <span class="hljs-attr">typeSpeed</span>: &lt;%= theme.<span class="hljs-property">subtitle</span>.<span class="hljs-property">typeSpeed</span> %&gt;,</span><br><span class="language-javascript">                        <span class="hljs-attr">loop</span>: &lt;%= theme.<span class="hljs-property">subtitle</span>.<span class="hljs-property">loop</span> %&gt;,</span><br><span class="language-javascript">                        <span class="hljs-attr">backSpeed</span>: &lt;%= theme.<span class="hljs-property">subtitle</span>.<span class="hljs-property">backSpeed</span> %&gt;,</span><br><span class="language-javascript">                        <span class="hljs-attr">showCursor</span>: &lt;%= theme.<span class="hljs-property">subtitle</span>.<span class="hljs-property">showCursor</span> %&gt;</span><br><span class="language-javascript">                    });</span><br><span class="language-javascript">                </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>                &lt;% } else { %&gt;<br>                    &lt;%= config.description %&gt;<br>                &lt;% } %&gt;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>社交链接的修改</strong></p><p>在主题的配置文件中修改</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页 banner 中的第二行个人信息配置，留空即不启用</span><br><span class="hljs-attr">socialLink:</span><br>  <span class="hljs-attr">qq:</span> <span class="hljs-number">1563972718</span><br>  <span class="hljs-attr">weixin:</span> <span class="hljs-string">https://gitee.com/marmalade0/images/blob/master/www.marmalade.vip/wechat.jpg</span><br>  <span class="hljs-attr">github:</span> <span class="hljs-comment">#https://github.com/marmalade0</span><br>  <span class="hljs-attr">email:</span> <span class="hljs-number">1563972718</span><span class="hljs-string">@qq.com</span><br>  <span class="hljs-attr">facebook:</span> <span class="hljs-comment"># https://www.facebook.com/xxx</span><br>  <span class="hljs-attr">twitter:</span> <span class="hljs-comment"># https://twitter.com/xxx</span><br>  <span class="hljs-attr">weibo:</span> <span class="hljs-comment"># https://weibo.com/xxx</span><br>  <span class="hljs-attr">zhihu:</span> <span class="hljs-comment"># https://www.zhihu.com/xxx</span><br>  <span class="hljs-attr">csdn:</span> <span class="hljs-string">https://blog.csdn.net/kuashijidexibao</span><br>  <span class="hljs-attr">cnblogs:</span> <span class="hljs-string">https://www.cnblogs.com/kuashijidexibao</span><br>  <span class="hljs-attr">rss:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true、false</span><br></code></pre></td></tr></tbody></table></figure><p>期中的 weixin 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 ejs 文件，文件在主题目录下的 layout 文件夹下的_partial 文件夹，修改 social-link.ejs，添加相关的配置，比如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% if (theme.socialLink.github) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.github %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"访问我的GitHub"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-github"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.email) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:&lt;%= theme.socialLink.email %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"邮件联系我"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-envelope-open"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.facebook) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.facebook %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的Facebook: &lt;%= theme.socialLink.facebook %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-facebook-f"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.twitter) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.twitter %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的Twitter: &lt;%= theme.socialLink.twitter %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-twitter"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.qq) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"tencent://AddContact/?fromId=50&amp;fromSubId=1&amp;subcmd=all&amp;uin=&lt;%= theme.socialLink.qq %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"QQ联系我: &lt;%= theme.socialLink.qq %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-qq"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.weibo) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.weibo %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的微博: &lt;%= theme.socialLink.weibo %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-weibo"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.zhihu) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.zhihu %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的知乎: &lt;%= theme.socialLink.zhihu %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-zhihu1"</span>&gt;</span>知<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.rss) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%- url_for('/atom.xml') %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"RSS 订阅"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-rss"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br><br><br>&lt;% if (theme.socialLink.jianshu) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.jianshu %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-jianshu"</span>&gt;</span>简<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.csdn) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.csdn %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-csdn"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br>&lt;% if (theme.socialLink.juejin) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.juejin %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-juejin"</span>&gt;</span>掘<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br><br>&lt;% if (theme.socialLink.cnblogs) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.cnblogs %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-juejin"</span>&gt;</span>博<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br>&lt;% if (theme.socialLink.weixin) { %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%= theme.socialLink.weixin %&gt;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tooltipped"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">data-tooltip</span>=<span class="hljs-string">"微信联系我: &lt;%= theme.socialLink.weixin %&gt;"</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-delay</span>=<span class="hljs-string">"50"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fab fa-weixin"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>&lt;% } %&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="其他DIY"><a href="#其他DIY" class="headerlink" title="其他DIY"></a>其他DIY</h2><p>实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 FunnyTitle.js，增加以下代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'visibilitychange'</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) {<br>        $(<span class="hljs-string">'[rel="icon"]'</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'href'</span>, <span class="hljs-string">"https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png"</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">'我相信你还会回来的！'</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>    }<br>    <span class="hljs-keyword">else</span> {<br>        $(<span class="hljs-string">'[rel="icon"]'</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'href'</span>, <span class="hljs-string">"https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png"</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">'哈哈，我就知道！'</span> + <span class="hljs-title class_">OriginTitle</span>;<br>        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>        }, <span class="hljs-number">2000</span>);<br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><p>然后在添加到 themes/matery/layout/layout.ejs 引入</p><h2 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h2><p>开 theme/matery/layout/about.ejs 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-content"</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-content article-card-content"</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title center-align"</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">"zoom-in-up"</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-address-book"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&lt;%- __('个人简历') %&gt;<br>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"articleContent"</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">"fade-up"</span>&gt;</span><br>                     &lt;%- page.content %&gt;<br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="修改网站背景图-1"><a href="#修改网站背景图-1" class="headerlink" title="修改网站背景图"></a>修改网站背景图</h3><p>主题配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">background:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">"https://gitee.com/marmalade0/images/blob/master/www.marmalade.vip/24.jpg"</span><br></code></pre></td></tr></tbody></table></figure><h2 id="看板娘模块安装和使用"><a href="#看板娘模块安装和使用" class="headerlink" title="看板娘模块安装和使用"></a>看板娘模块安装和使用</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install --save hexo-helper-live2d<br><br>cnpm install {packagename}<br><span class="hljs-comment"># 例如cnpm install live2d-widget-model-haru</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">blog/_config.yml<br>live2d: <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span> scriptFrom: <span class="hljs-built_in">local</span> pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: <span class="hljs-literal">false</span> debug: <span class="hljs-literal">false</span> model: use: live2d-widget-model-z16 display: position: right width: 200 height: 400 mobile: show: <span class="hljs-literal">false</span><br><br>live2d:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  pluginModelPath: assets/<br>  model:<br>    use: live2d-widget-model-epsilon2_1 <span class="hljs-comment">#模板目录，在node_modules里</span><br>  display:<br>    position: left<br>    <span class="hljs-comment">#  1:2</span><br>    width: 300<br>    height: 600<br>  mobile:<br>    show: <span class="hljs-literal">true</span> <span class="hljs-comment">#是否在手机进行显示</span><br></code></pre></td></tr></tbody></table></figure><h2 id="添加博客天气模块"><a href="#添加博客天气模块" class="headerlink" title="添加博客天气模块"></a>添加博客天气模块</h2><h2 id="添加樱花飘落动效"><a href="#添加樱花飘落动效" class="headerlink" title="添加樱花飘落动效"></a>添加樱花飘落动效</h2><h2 id="关闭首页颜色变换"><a href="#关闭首页颜色变换" class="headerlink" title="关闭首页颜色变换"></a>关闭首页颜色变换</h2><h2 id="给卡片区添加背景"><a href="#给卡片区添加背景" class="headerlink" title="给卡片区添加背景"></a>给卡片区添加背景</h2><h2 id="添加加载动画"><a href="#添加加载动画" class="headerlink" title="添加加载动画"></a>添加加载动画</h2><h2 id="添加博客导航页"><a href="#添加博客导航页" class="headerlink" title="添加博客导航页"></a>添加博客导航页</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page navigate<br>---<br>title: 导航<br><span class="hljs-built_in">date</span>: 2020-05-09 11:19:14<br><span class="hljs-built_in">type</span>: <span class="hljs-string">"navigate"</span><br>layout: <span class="hljs-string">"navigate"</span><br>---<br></code></pre></td></tr></tbody></table></figure><h2 id="添加ICP-x2F-公安备案号"><a href="#添加ICP-x2F-公安备案号" class="headerlink" title="添加ICP/公安备案号"></a>添加ICP/公安备案号</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo/themes/matery/layout/_partial路径下的<span class="hljs-selector-tag">footer</span><span class="hljs-selector-class">.ejs</span><br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>="https://gitee.com/marmalade0/images/blob/master/www.marmalade.vip/beian.png<span class="hljs-string">"&gt; &lt;a href="</span>http://www.beian.miit.gov.cn/<span class="hljs-string">" style="</span>color:<span class="hljs-number">#f72b07</span><span class="hljs-string">" target="</span>_blank<span class="hljs-string">"&gt;你自己的备案号，如鲁公网安备xxxxxx号&lt;/a&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><p>全局字体自定义</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">/source/<span class="hljs-attribute">font</span> <br>// 将你要用到的字体放入上述创建的文件夹内，字体名称最好为英文，如 /source/<span class="hljs-attribute">font</span>/myFont<span class="hljs-selector-class">.ttf</span><br>找到主题文件夹下的 my<span class="hljs-selector-class">.css</span> 文件，路径为 /themes/matery/source/css/my<span class="hljs-selector-class">.css</span> ，填入下面的代码：<br><br><span class="hljs-keyword">@font-face</span>{<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'myFont'</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'../font/myFont.ttf'</span>);<br>}<br><br><span class="hljs-selector-tag">body</span>{<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'myFont'</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>局部字体自定义</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">/themes/matery/source/css/my<span class="hljs-selector-class">.css</span><br><br><span class="hljs-keyword">@font-face</span>{<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'myFont'</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'../font/myFont.ttf'</span>);<br>}<br><br><span class="hljs-selector-class">.diyFont</span>{<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'myFont'</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>找到你要自定义的区域，如我要自定义博客主页的标题字体，那么就要找到相应的文件，也就是 <code>/themes/matery/layout/_partial/bg-cover-content.ejs</code> ，在相应的地方加入我刚刚自定义的 <code>diyFont</code> 类。如将下面的：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">找到你要自定义的区域，如我要自定义博客主页的标题字体，那么就要找到相应的文件，也就是 /themes/matery/layout/_partial/bg-cover-<span class="hljs-attribute">content</span><span class="hljs-selector-class">.ejs</span> ，在相应的地方加入我刚刚自定义的 diyFont 类。如将下面的：<br></code></pre></td></tr></tbody></table></figure><p>Error: <code>prism_plugin</code> options should be added to _config.yml file</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"># 代码光亮<br>highlight:<br>  enable: false<br>  line_number: true<br>  auto_detect: false<br>  tab_replace: <span class="hljs-string">""</span><br>  wrap: true<br>  hljs: false<br><br>prism_plugin:<br>  mode: <span class="hljs-string">'preprocess'</span>    # realtime/preprocess<br>  theme: <span class="hljs-string">'tomorrow'</span><br>  line_number: false    # default false<br>  custom_css: <br></code></pre></td></tr></tbody></table></figure><p>Deprecated config detected: “use_date_for_updated” is deprecated, please use “updated_option” instead. See <a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a> for more details.</p><p>每日诗词</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><br></code></pre></td></tr></tbody></table></figure><p>添加文章显示作者名字</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">---------------------- layout/_partial/post-detail<span class="hljs-selector-class">.ejs</span> -----------------------<br><br>&lt;<span class="hljs-selector-tag">div</span> class="info-break-policy"&gt;<br>    &lt;% if (page<span class="hljs-selector-class">.author</span> &amp;&amp; page<span class="hljs-selector-class">.author</span><span class="hljs-selector-class">.length</span> &gt; <span class="hljs-number">0</span>) { %&gt;<br>        &lt;<span class="hljs-selector-tag">i</span> class="fa fa-pencil"&gt;&lt;/<span class="hljs-selector-tag">i</span>&gt; 作者: &lt;%- page.author %&gt;<br>     &lt;% } else { %&gt;<br>    &lt;<span class="hljs-selector-tag">i</span> class="fa fa-pencil"&gt;&lt;/<span class="hljs-selector-tag">i</span>&gt; 作者: &lt;%- config.author %&gt;<br>    &lt;% } %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></tbody></table></figure><p>markdown文件添加代码块语言</p><h2 id="自适应屏幕的时候字体大小"><a href="#自适应屏幕的时候字体大小" class="headerlink" title="自适应屏幕的时候字体大小"></a>自适应屏幕的时候字体大小</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs css">matery/source/css/matery<span class="hljs-selector-class">.css</span><br><br>---------------------------- source/css/matery<span class="hljs-selector-class">.css</span> ----------------------------<br><br><span class="hljs-comment">/*全局基础样式*/</span><br><span class="hljs-comment">/*小屏幕下(手机类)的样式*/</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">601px</span>) {<br>    <span class="hljs-selector-class">.container</span> {<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">95%</span>;<br>    }<br>    <span class="hljs-selector-tag">header</span> <span class="hljs-selector-class">.brand-logo</span> <span class="hljs-selector-class">.logo-span</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>    }<br>    <span class="hljs-selector-class">.bg-cover</span> <span class="hljs-selector-class">.title</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3rem</span>;<br>        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.85em</span>;<br>        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">position</span>: relative;<br>    }<br>}<br><br><span class="hljs-comment">/*中等屏幕下(平板类)的样式*/</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">992px</span>) {<br>    <span class="hljs-selector-class">.container</span> {<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<br>    }<br>    <span class="hljs-selector-tag">header</span> <span class="hljs-selector-class">.brand-logo</span> <span class="hljs-selector-class">.logo-span</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>    }<br>    <span class="hljs-selector-class">.bg-cover</span> <span class="hljs-selector-class">.title</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4rem</span>;<br>        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.85em</span>;<br>        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">position</span>: relative;<br>    }<br>}<br><span class="hljs-comment">/*大屏幕下(桌面类)的样式*/</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">993px</span>) {<br>    <span class="hljs-selector-class">.container</span> {<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">85%</span>;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1125px</span>;<br>    }<br><br>    <span class="hljs-selector-class">.post-container</span> {<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1250px</span>;<br>    }<br><br>    <span class="hljs-selector-tag">header</span> <span class="hljs-selector-class">.brand-logo</span> <span class="hljs-selector-class">.logo-span</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>    }<br><br>    <span class="hljs-selector-class">.bg-cover</span> <span class="hljs-selector-class">.title</span> {<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4rem</span>;<br>        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.85em</span>;<br>        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">position</span>: relative;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>为Hexo博客添加音乐播放器并保持跳转时不中断播放状态</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派从入门到入灰</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="树莓派基础知识"><a href="#树莓派基础知识" class="headerlink" title="树莓派基础知识"></a>树莓派基础知识</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>ARM处理器是英国Acorn有限公司设计的低功耗成本的第一款<a href="https://baike.baidu.com/item/RISC/62696">RISC</a>微处理器。全称为Advanced RISC Machine。ARM处理器本身是32位设计，但也配备16位指令集，一般来讲比等价32位代码节省达35%，却能保留32位系统的所有优势。</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>CPU：Broadcom BCM2711，1.5 GHz，64-bit，4核心，ARM Cortex-A72 架构，1MB shared L2 cache<br>RAM：1、2、4 GB LPDDR4-3200 RAM (shared with GPU)</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>以太网：10/100/1000 Mbit/s<br>无线网：b/g/n/ac 双频 2.4/5 GHz<br>蓝牙：5.0</p><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><p>GPU：Broadcom VideoCore VI @ 500 MHz<br>HDMI：micro-HDMI<br>DSI：板载排线</p><h2 id="外围设备"><a href="#外围设备" class="headerlink" title="外围设备"></a>外围设备</h2><p>17× GPIO plus the same specific functions, HAT, and an additional 4× UART, 4× SPI, and 4× I2C connectors</p><h1 id="树莓派基本配置"><a href="#树莓派基本配置" class="headerlink" title="树莓派基本配置"></a>树莓派基本配置</h1><h2 id="win10连接命令"><a href="#win10连接命令" class="headerlink" title="win10连接命令"></a>win10连接命令</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@ip –p21 账号@IP地址 //路由器分配的IP<br>raspberry<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">diskutil list<br>// 格式化磁盘<br>diskutil eraseDisk JHFS+ UntitledUFS /dev/disk2<br></code></pre></td></tr></tbody></table></figure><ul><li>Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 3129 (apt-get)</li></ul><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo rm /var/lib/dpkg/lock-frontend<br>sudo rm /var/lib/dpkg/lock<br>sudo rm /var/cache/apt/archives/lock<br></code></pre></td></tr></tbody></table></figure><h1 id="Raspberry系统安装"><a href="#Raspberry系统安装" class="headerlink" title="Raspberry系统安装"></a>Raspberry系统安装</h1><p>系统： Raspberry Pi OS Lite</p><p>安装地址</p><ul><li><a href="https://www.raspberrypi.com/software/operating-systems/">https://www.raspberrypi.com/software/operating-systems/</a></li></ul><p>系统安装 + 图形界面安装<br> 安装系统的方法<br>树莓派的操作系统有两种安装方式：<br>一种：先把树莓派的安装引导程序NOOBS写入SD卡，然后启动树莓派进入NOOBS来安装操作系统。<br>另一种：是使用软件``balenaEtcher`将操作系统镜像写入SD卡，树莓派启动后直接进入操作系统。</p><h3 id="树莓派默认账号密码"><a href="#树莓派默认账号密码" class="headerlink" title="树莓派默认账号密码"></a>树莓派默认账号密码</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pi<br>raspberry<br></code></pre></td></tr></tbody></table></figure><p>图形界面开启ssh</p><p>sudo raspi-config进入到树莓派系统配置界面。</p><p>Interfacing options</p><h3 id="无显示器连接树莓派"><a href="#无显示器连接树莓派" class="headerlink" title="无显示器连接树莓派"></a>无显示器连接树莓派</h3><p>SSH连接<br>新建boot目录下新建一个SSH文件<br>设置wiff 新建文件<code>wpa_supplicant.conf</code></p><p><b style="color:red">超级重点 树莓派支持2.4GHz的wifi 不支持5Ghz的wifi</b></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs conf">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=1<br>country=CN<br>network={<br>        ssid="ChinaNet-mcEc"<br>        psk="uq7nqawx"<br>        key_mgmt=WPA-PSK <br>}<br>network={<br>        ssid="你的其他无线网名字"<br>        psk="密码"<br>        key_mgmt=WPA-PSK<br>}        <br></code></pre></td></tr></tbody></table></figure><p>如果你的 WiFi 没有密码</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">network={``ssid=<span class="hljs-string">"你的无线网络名称（ssid）"</span>``key_mgmt=NONE``}<br></code></pre></td></tr></tbody></table></figure><p>如果你的 WiFi 使用WEP加密</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">network={``ssid=<span class="hljs-string">"你的无线网络名称（ssid）"</span>``key_mgmt=NONE``wep_key0=<span class="hljs-string">"你的wifi密码"</span>``}<br></code></pre></td></tr></tbody></table></figure><p>如果你的 WiFi 使用WPA/WPA2加密</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">network={``ssid=<span class="hljs-string">"你的无线网络名称（ssid）"</span>``key_mgmt=WPA-PSK``psk=<span class="hljs-string">"你的wifi密码"</span>``}<br></code></pre></td></tr></tbody></table></figure><h3 id="VNC远程连接树莓派"><a href="#VNC远程连接树莓派" class="headerlink" title="VNC远程连接树莓派"></a>VNC远程连接树莓派</h3><p>开启VNC 和提高分辨率</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo raspi-config<br>// interface open ssh <br></code></pre></td></tr></tbody></table></figure><h3 id="树莓派固定IP"><a href="#树莓派固定IP" class="headerlink" title="树莓派固定IP"></a>树莓派固定IP</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/network/interfaces<br></code></pre></td></tr></tbody></table></figure><p>为了防止树莓派的IP地址每次都变动，可以将DHCP改为静态IP。编辑/etc/dhcpcd.conf文件，加入以下配置即可。如果是有线网，就将wlan0改为eth0。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">interface wlan0  <br>static ip_address=192.168.1.100/24<br>static routers=192.168.1.1<br>static domain_name_servers=114.114.114.114<br><br>/etc/init.d/networking restart<br></code></pre></td></tr></tbody></table></figure><p>vi vim warning changing a readonly file</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">su <br>root<br></code></pre></td></tr></tbody></table></figure><p>su: Authentication failure</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo passwd root<br></code></pre></td></tr></tbody></table></figure><p>tamporary failure in name resolution </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/resolv.conf<br>nameserver 202.96.209.133<br>nameserver 61.129.88.123<br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></tbody></table></figure><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><ul><li>组成 ：一个Debian源 一个树莓派本源</li></ul><p>Debian </p><ul><li>Debian 7 wheezy</li><li>Debian 8 jessie</li><li>Debian 9  stretch</li><li>Debian 10 buster</li></ul><p><a href="https://developer.aliyun.com/mirror/debian">https://developer.aliyun.com/mirror/debian</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsb_release -a // 查看系统版本<br>No LSB modules are available.<br>Distributor ID:Raspbian<br>Description:Raspbian GNU/Linux 11 (bullseye)<br>Release:11<br>Codename:bullseye<br></code></pre></td></tr></tbody></table></figure><p>第一种方法 bullseys 换源</p><ul><li>The following signatures couldn’t be verified because the public key is not available</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5523BAEEB01FA116 其中的5523BAEEB01FA116是根据错误提示写的<br></code></pre></td></tr></tbody></table></figure><p><code>/etc/apt/sources.list</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bk<br>vi /etc/apt/sources.list<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ bullseye main contrib non-free rpi<br><span class="hljs-comment"># deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ bullseye main contrib non-free rpi</span><br></code></pre></td></tr></tbody></table></figure><p><code>/etc/apt/sources.list.d/raspi.list</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bk<br>vi /etc/apt/sources.list.d/raspi.list<br>deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ bullseye main ui<br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ bullseye main ui</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt update<br>sudo apt upgrade &amp;&amp; sudo apt dist-upgrade<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">64位镜像可以直接使用debian的系统源，首先需要编辑/etc/apt/sources.list，使用<span class="hljs-comment">#号注释原内容，然后在末尾添加Debian的系统源：</span><br><br><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br>接着需要配置树莓派官方的软件源，编辑<br>/etc/apt/sources.list.d/raspi.list<br>同样的，注释原内容，在末尾添加如下内容：<br><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br><br>系统源和软件源配置完成以后，使用下述两条命令更新：<br><br>sudo apt update<br>sudo apt upgrade -y<br></code></pre></td></tr></tbody></table></figure><p>第二种方法 buster 换源</p><p>删除内容： 3dd  3 行<br>注意树莓派4B的Respbian是基于Debian 10 Bluster 不要选错。<br>根据提示修改：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">// d 删除<br>vi /etc/apt/sources.list<br><span class="hljs-comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib<br>vi /etc/apt/sources.list.d/raspi.list<br><span class="hljs-comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br><br>apt-get update<br>apt-get upgrade<br></code></pre></td></tr></tbody></table></figure><p>sudo apt-get update后报错<br>The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY XXXXXXXXXXXX<br>直接添加该KEY解决</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key adv –keyserver keyserver.ubuntu.com –recv-keys XXXXXXXXX<br></code></pre></td></tr></tbody></table></figure><p>Temporary failure resolving ‘mirrors.ustc.edu.cn’</p><p>Temporary failure in name resolution</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/resolv.conf<br>nameserver 8.8.8.8<br>nameserver 8.8.4.4<br>sudo /etc/init.d/networking restart<br></code></pre></td></tr></tbody></table></figure><h3 id="下载桌面环境"><a href="#下载桌面环境" class="headerlink" title="下载桌面环境"></a>下载桌面环境</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install ubuntu-desktop <br>sudo apt-get update --fix-missing<br></code></pre></td></tr></tbody></table></figure><h1 id="磁力链接下载机"><a href="#磁力链接下载机" class="headerlink" title="磁力链接下载机"></a>磁力链接下载机</h1><ul><li>连接wiff ssh 和<ul><li>pi raspberry</li></ul></li><li>获取 树莓派 ip<ul><li>vpn</li></ul></li><li><h2 id="挂载磁盘工具"><a href="#挂载磁盘工具" class="headerlink" title="挂载磁盘工具"></a>挂载磁盘工具</h2></li><li>qibittorrent<ul><li>ip:8080</li><li>启动 qbittorrent-nox -d</li></ul></li><li>samba<ul><li>启动 smb://ip</li></ul></li><li>ftp</li></ul><h1 id="安装电视机盒子"><a href="#安装电视机盒子" class="headerlink" title="安装电视机盒子"></a>安装电视机盒子</h1><ul><li>直接安装kodi</li><li>先安装树莓派系统再安装kodi</li><li>安装lineOS Android系统</li></ul><h1 id="安装CentOS系统"><a href="#安装CentOS系统" class="headerlink" title="安装CentOS系统"></a>安装CentOS系统</h1><h1 id="安装ubuntu系统"><a href="#安装ubuntu系统" class="headerlink" title="安装ubuntu系统"></a>安装ubuntu系统</h1><p>工具：balenaEtcher<br>镜像：<a href="https://mirrors.ustc.edu.cn/ubuntu-cdimage/releases/18.04/release/ubuntu-18.04.4-preinstalled-server-armhf%2Braspi4.img.xz.zsync">ubuntu-18.04.4-preinstalled-server-armhf+raspi4..&gt;</a></p><h2 id="格式化SD卡"><a href="#格式化SD卡" class="headerlink" title="格式化SD卡"></a>格式化SD卡</h2><p>使用系统工具格式化SD卡</p><h2 id="使用刻录工具"><a href="#使用刻录工具" class="headerlink" title="使用刻录工具"></a>使用刻录工具</h2><p>使用balenaEtcher 写入 SD卡中 </p><h2 id="修改树莓派密码"><a href="#修改树莓派密码" class="headerlink" title="修改树莓派密码"></a>修改树莓派密码</h2><p>默认账号和密码都是：Ubuntu<br>设置的密码要是字母 +  数字 abc123 </p><h2 id="更新源-1"><a href="#更新源-1" class="headerlink" title="更新源"></a>更新源</h2><p>备份源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></tbody></table></figure><p>编辑 sources.list 文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi /etc/apt/sources.list<br></code></pre></td></tr></tbody></table></figure><p>打开源的文件，把里面ports.ubuntu.com都换成mirrors.aliyun.com 更新过程要等待</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">esc键 <br>:%s/源字符串/目标字符串/g<br>:%s/ports.ubuntu.com/mirrors.aliyun.com/g<br>:wq!<br></code></pre></td></tr></tbody></table></figure><p>树莓派连接网线，更新源 和 重启 等待更新源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get uprade<br>reboot<br></code></pre></td></tr></tbody></table></figure><h2 id="下载桌面环境-1"><a href="#下载桌面环境-1" class="headerlink" title="下载桌面环境"></a>下载桌面环境</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install ubuntu-desktop <br>sudo apt-get update --fix-missing<br></code></pre></td></tr></tbody></table></figure><h1 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h1><p><a href="https://www.jianshu.com/p/ef23a1b88c22">树莓派之挂载移动硬盘 - 简书</a><br>查看磁盘状态</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk -l<br><span class="hljs-built_in">df</span> -h<br>先建一个目录 ，让树莓派挂载在创建的目录<br>先建一个目录 ，让树莓派挂载在创建的目录<br>sudo <span class="hljs-built_in">mkdir</span> /home/pi/toshiba<br>先建一个目录 ，让树莓派挂载在创建的目录<br>sudo mount /dev/sda1  /home/pi/toshiba<br></code></pre></td></tr></tbody></table></figure><p>6.安装NTFS格式可读写软件</p><blockquote><p><em>sudo aptitude install ntfs-3g</em><br>7.加载内核模块<br><em>modprobe fuse</em><br>8.让移动硬盘开机自动挂载<br><em>sudo nano /etc/fstab</em><br>最后一行添加<br>/dev/sda1  /home/pi/toshiba ntfs-3g defaults,noexec,umask=0000 0 0<br>9.有时候，挂载会出错，Mount is denied：<br><strong>挂载exFAT格式的硬盘</strong><br>FAT 格式U盘 mount 本身就能支持，但如果你的U盘或移动硬盘使用的是 exFAT 格式，mount 会说不支持。没关系，安装 exfat-fuse 软件之后 mount 就支持了。<br>sudo apt-get install exfat-fuse<br>如果想开机自动挂载，而不是每次手工执行，可以编辑 /etc/fstab 文件。比如在末尾添加一行：<br>/dev/sda1 /mnt/usbdisk vfat rw,defaults 0 0</p></blockquote><h1 id="安装aira2下载机"><a href="#安装aira2下载机" class="headerlink" title="安装aira2下载机"></a>安装aira2下载机</h1><blockquote><p><a href="https://www.freesion.com/article/4555471768/">树莓派下载机aria2+Samba搭建NAS下载机 - 灰信网（软件开发博客聚合）</a><br><a href="https://hacpai.com/article/1548140422018">搭建 aria2 下载机一键脚本 - 黑客派</a></p></blockquote><h1 id="安装百度网盘下载机"><a href="#安装百度网盘下载机" class="headerlink" title="安装百度网盘下载机"></a>安装百度网盘下载机</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 BaiduPCS-Go web<br><a href="https://github.com/mayunbaba2/BaiduPCS-Go-Web">Github</a><br>下载 BaiduPCS-Go web<br>链接：<a href="https://pan.baidu.com/s/1EGhXzzpeSd5UsAMAPjaIVw">https://pan.baidu.com/s/1EGhXzzpeSd5UsAMAPjaIVw</a>  提取码：c4v2<br>解压安装包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip BaiduPCS-Go-3.7.0-linux-arm.zip<br></code></pre></td></tr></tbody></table></figure><p>进入 解压后的文件夹，执行以下命令即可在树莓派上安装 BaiduPCS-Go 。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> BaiduPCS-Go-3.7.0-linux-arm     <span class="hljs-comment">#cd 到软件所在的目录</span><br><span class="hljs-built_in">chmod</span> a+x BaiduPCS-Go <br>./BaiduPCS-Go<br></code></pre></td></tr></tbody></table></figure><p>打开http://树莓派的ip地址:5299就可以看到百度云的登陆界面啦。</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><ul><li>百度云账号登陆</li><li>BDUSS登陆<br>  <a href="https://blog.csdn.net/mayuko2012/article/details/48196729">bduss获取</a></li></ul><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>设置下载目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/media/pi/Backup Plus/<br></code></pre></td></tr></tbody></table></figure><h1 id="安装emby-server服务器"><a href="#安装emby-server服务器" class="headerlink" title="安装emby server服务器"></a>安装emby server服务器</h1><p>媒体服务器</p><ul><li>flex</li><li>emby</li><li>jellyfin<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -i emby-server-deb_4.2.0.5_armhf.deb<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 等待时间较长<br>Selecting previously unselected package emby-server.<br>(Reading database ... 158438 files and directories currently installed.)<br>Preparing to unpack emby-server-deb_4.4.3.0_armhf.deb ...<br>Unpacking emby-server (4.4.3.0) ...<br>Setting up emby-server (4.4.3.0) ...<br>usermod: no changes<br>Created symlink /etc/systemd/system/multi-user.target.wants/emby-server.service → /usr/lib/systemd/system/emby-server.service.<br>Processing triggers <span class="hljs-keyword">for</span> libc-bin (2.28-10+rpi1) ...<br></code></pre></td></tr></tbody></table></figure>访问树莓派IP地址:8096</li></ul><h1 id="安装next-cloud云盘"><a href="#安装next-cloud云盘" class="headerlink" title="安装next cloud云盘"></a>安装next cloud云盘</h1><p><strong>nextcloud</strong>前身是大名鼎鼎的<strong>owncloud</strong>，两者均是开源的网络硬盘系统。<strong>nextcloud</strong>不仅可以搭建私有云存储和同步数据，也提供联系人、日程管理功能，web端还提供私密的语音视频通话功能。<strong>nextcloud</strong>致力于数据安全，云端的数据均可选择加密，并遵循安全行业最佳实践。客户端支持windows、macos、linux三大pc平台，以及安卓ios两大移动平台，完全足够家庭或中小型团队协作使用。</p><h2 id="部署和设置nextcloud"><a href="#部署和设置nextcloud" class="headerlink" title="部署和设置nextcloud"></a>部署和设置nextcloud</h2><p>nextcloud程序由php语言编写，因此部署需要具备php运行环境以及web中间件。因其支持平台众多，官方文档略显繁琐，故本文给出<strong>树莓派</strong>上用nginx、mariadb、redis搭建nextcloud的详细步骤。<br>从官网<a href="https://nextcloud.com/install/#instructions-server">下载部署程序</a>；<br>用迅雷进行下载再上传, 或者在树莓派运行命令进行下载(外网, 很慢):</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://download.nextcloud.com/server/releases/nextcloud-19.0.1.zip<br></code></pre></td></tr></tbody></table></figure><p>更新系统和必备软件：<br><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt install -y libreoffice ffmpeg</code>；<br>安装nginx：<code>sudo apt install -y nginx</code>；<br>安装redis：<code>sudo apt install -y redis</code>;<br>安装mariadb：<code>sudo apt install mariadb-server</code>；<br>安装php及推荐模块：<code>sudo apt install -y php7.3 php7.3-fpm php7.3-curl php7.3-gd php7.3-dom php7.3-iconv php7.3-openssl php-redis php-mysql php7.3-zip php7.3-bz2 php7.3-intl php7.3-imagick</code>；<br>解压部署程序：<code>unzip nextcloud-xxxx.zip</code>；<br>将nextcloud文件移动到网站根目录：<code>sudo mv nextcloud-xxx /var/www/html/nextcloud</code>；<br>创建数据目录，更改目录权限：<code>mkdir /var/www/html/nextcloud/data &amp;&amp; sudo chown -R www-data:www-data /var/www/html/nextcloud</code>；<br>配置php：打开<br>/etc/php/7.3/fpm/php.ini<br>文件，做如下更改：<br>expose_php改成off<br>date.timezone 一行删掉前面的;号，值改成Asia/Shanghai<br>删掉opcache.enable=1，opcache.validate_timestamps=1，opcache.revalidate_freq=2这三行前面的;号，将opcache.revalidate_freq的值改成30;<br>配置fpm：打开**/etc/php/7.3/fpm/pool.d/<a href="http://www.conf**文件，移除clear_env=no，env[开头那几行前面的;号（即388，401-405这几行前面的分号）；">www.conf**文件，移除clear_env=no，env[开头那几行前面的;号（即388，401-405这几行前面的分号）；</a><br>设置mariadb管理员密码： <code>mysqladmin -uroot password '你的密码'</code>;<br>创建nextcloud数据库：<code>mysql -uroot -p'你的密码' -e 'create user nextcloud@"%" identified by "nextcloud数据库密码"; create database nextcloud default charset=utf8mb4; grant all privileges on nextcloud.* to nextcloud@"%"; flush privileges;'</code>；<br>配置nginx：在<br>/etc/nginx/sites-enabled<br>目录下，创建一个nextcloud文件，其内容如下（注意，本配置中禁用了https）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs bash">upstream php-handler {<br>server unix:/run/php/php7.3-fpm.sock;<br>}<br>server {<br>listen 80;<br>listen [::]:80;<br>server_name cloud.example.com;<br><span class="hljs-comment"># enforce https</span><br><span class="hljs-comment">#return 301 https://$server_name:443$request_uri;</span><br><span class="hljs-comment">#}</span><br><span class="hljs-comment">#server {</span><br><span class="hljs-comment">#    listen 443 ssl http2;</span><br><span class="hljs-comment">#    listen [::]:443 ssl http2;</span><br><span class="hljs-comment">#    server_name cloud.example.com;</span><br><span class="hljs-comment"># Use Mozilla's guidelines for SSL/TLS settings</span><br><span class="hljs-comment"># https://mozilla.github.io/server-side-tls/ssl-config-generator/</span><br><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> some settings below might be redundant</span><br><span class="hljs-comment">#    ssl_certificate /etc/ssl/nginx/cloud.example.com.crt;</span><br><span class="hljs-comment">#    ssl_certificate_key /etc/ssl/nginx/cloud.example.com.key;</span><br><span class="hljs-comment"># Path to the root of your installation</span><br>root /var/www/html/nextcloud;<br>location = /robots.txt {<br>    allow all;<br>    log_not_found off;<br>    access_log off;<br>}<br><span class="hljs-comment"># The following 2 rules are only needed for the user_webfinger app.</span><br><span class="hljs-comment"># Uncomment it if you're planning to use this app.</span><br><span class="hljs-comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span><br><span class="hljs-comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;</span><br><span class="hljs-comment"># The following rule is only needed for the Social app.</span><br><span class="hljs-comment"># Uncomment it if you're planning to use this app.</span><br><span class="hljs-comment">#rewrite ^/.well-known/webfinger /public.php?service=webfinger last;</span><br>location = /.well-known/carddav {<br>  <span class="hljs-built_in">return</span> 301 <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>/remote.php/dav;<br>}<br>location = /.well-known/caldav {<br>  <span class="hljs-built_in">return</span> 301 <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>/remote.php/dav;<br>}<br><span class="hljs-comment"># set max upload size</span><br>client_max_body_size 512M;<br>fastcgi_buffers 64 4K;<br><span class="hljs-comment"># Enable gzip but do not remove ETag headers</span><br>gzip on;<br>gzip_vary on;<br>gzip_comp_level 4;<br>gzip_min_length 256;<br>gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;<br>gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;<br><span class="hljs-comment"># Uncomment if your server is build with the ngx_pagespeed module</span><br><span class="hljs-comment"># This module is currently not supported.</span><br><span class="hljs-comment">#pagespeed off;</span><br>location / {<br>    rewrite ^ /index.php;<br>}<br>location ~ ^\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {<br>    deny all;<br>}<br>location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|console) {<br>    deny all;<br>}<br>location ~ ^\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {<br>    fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$path_info</span> <span class="hljs-variable">$fastcgi_path_info</span>;<br>    try_files <span class="hljs-variable">$fastcgi_script_name</span> =404;<br>    include fastcgi_params;<br>    fastcgi_param SCRIPT_FILENAME $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>    fastcgi_param PATH_INFO <span class="hljs-variable">$path_info</span>;<br>    <span class="hljs-comment">#fastcgi_param HTTPS on;</span><br>    <span class="hljs-comment"># Avoid sending the security headers twice</span><br>    fastcgi_param modHeadersAvailable <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment"># Enable pretty urls</span><br>    fastcgi_param front_controller_active <span class="hljs-literal">true</span>;<br>    fastcgi_pass php-handler;<br>    fastcgi_intercept_errors on;<br>    fastcgi_request_buffering off;<br>}<br>location ~ ^\/(?:updater|oc[ms]-provider)(?:$|\/) {<br>    try_files <span class="hljs-variable">$uri</span>/ =404;<br>    index index.php;<br>}<br><span class="hljs-comment"># Adding the cache control header for js, css and map files</span><br><span class="hljs-comment"># Make sure it is BELOW the PHP block</span><br>location ~ \.(?:css|js|woff2?|svg|gif|map)$ {<br>    try_files <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$request_uri</span>;<br>    add_header Cache-Control <span class="hljs-string">"public, max-age=15778463"</span>;<br>    <span class="hljs-comment"># Add headers to serve security related headers (It is intended to</span><br>    <span class="hljs-comment"># have those duplicated to the ones above)</span><br>    <span class="hljs-comment"># Before enabling Strict-Transport-Security headers please read into</span><br>    <span class="hljs-comment"># this topic first.</span><br>    <span class="hljs-comment">#add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;" always;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># WARNING: Only add the preload option once you read about</span><br>    <span class="hljs-comment"># the consequences in https://hstspreload.org/. This option</span><br>    <span class="hljs-comment"># will add the domain to a hardcoded list that is shipped</span><br>    <span class="hljs-comment"># in all major browsers and getting removed from this list</span><br>    <span class="hljs-comment"># could take several months.</span><br>    add_header Referrer-Policy <span class="hljs-string">"no-referrer"</span> always;<br>    add_header X-Content-Type-Options <span class="hljs-string">"nosniff"</span> always;<br>    add_header X-Download-Options <span class="hljs-string">"noopen"</span> always;<br>    add_header X-Frame-Options <span class="hljs-string">"SAMEORIGIN"</span> always;<br>    add_header X-Permitted-Cross-Domain-Policies <span class="hljs-string">"none"</span> always;<br>    add_header X-Robots-Tag <span class="hljs-string">"none"</span> always;<br>    add_header X-XSS-Protection <span class="hljs-string">"1; mode=block"</span> always;<br>    <span class="hljs-comment"># Optional: Don't log access to assets</span><br>    access_log off;<br>}<br>location ~ \.(?:png|html|ttf|ico|jpg|jpeg|bcmap)$ {<br>    try_files <span class="hljs-variable">$uri</span> /index.php<span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-comment"># Optional: Don't log access to other assets</span><br>    access_log off;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>启动各项服务：<code>sudo systemctl restart nginx php7.3-fpm redis-server mariadb</code>。如果系统安装了防火墙，记得放行80端口；<br>打开浏览器，在地址栏输入树莓派的ip，例如：<a href="http://192.168.1.2,将出现nextcloud的设置页面,选择用户名和密码,以及输入数据库用户名和密码,完成设置./">http://192.168.1.2，将出现nextcloud的设置页面，选择用户名和密码，以及输入数据库用户名和密码，完成设置。</a><br>设置完成后，进入了类似百度云盘的操作界面，说明云盘已经初步搭建好了。<br>配置nextcloud，使其性能更好：打开**/var/www/html/nextcloud/config/config.php**文件，在最后的);前添加缓存配置： <code>'memcache.local' =&gt; '\OC\Memcache\Redis','memcache.distributed' =&gt; '\OC\Memcache\Redis','redis' =&gt; ['host' =&gt; 'localhost','port' =&gt; 6379,'dbindex' =&gt; 0,'password' =&gt; '','timeout' =&gt; 1.5,],</code><br>至此，nextcloud的部署和设置全部完毕，在浏览器界面已经能够查看和管理各种数据和功能了。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>树莓派默认的sd卡存储空间很小，实践应该将nextcloud的程序文件托管在外置硬盘上；</li><li>设置外网访问需要用到域名、dns、https配置以及内网穿透，本文不再给出；</li><li>各平台客户端的设置和使用请参考官方教程，本文不再给出<br>启动树莓派，你需要一个显示器，并且连接上键盘，登陆系统用户名pi，密码raspberry。安装openssh-server， 并且使用service ssh start启动ssh-server服务。这可以确保你可以使用ssh远程连接到树莓派。</li></ol><h1 id="安装kodi"><a href="#安装kodi" class="headerlink" title="安装kodi"></a>安装kodi</h1><ul><li>安装 <a href="https://github.com/kodi-pvr">pvr client</a></li><li>配置 kodi 自动启动</li><li>启动 kodi</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ service kodi start<br></code></pre></td></tr></tbody></table></figure><h1 id="安装hexo博客"><a href="#安装hexo博客" class="headerlink" title="安装hexo博客"></a>安装hexo博客</h1><p><a href="https://zhuanlan.zhihu.com/p/127757097">https://zhuanlan.zhihu.com/p/127757097</a></p><p>无效的问题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">"<span class="hljs-variable">$PATH</span>:/usr/local/node-v8.11.3-linux-x64/bin"</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></tbody></table></figure><p><a href="https://github.com/521xueweihan/GitHub520">https://github.com/521xueweihan/GitHub520</a></p><ul><li>解决raw.githubusercontent.com地址DNS污染</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">151.101.0.133 raw.githubusercontent.com<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vi /etc/hosts<br>151.101.0.133 raw.githubusercontent.com<br></code></pre></td></tr></tbody></table></figure><p>pm2 </p><p><a href="https://linkscue.com/posts/2018-05-06-how-to-use-pm2-manage-hexo-blog/">https://linkscue.com/posts/2018-05-06-how-to-use-pm2-manage-hexo-blog/</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start --name blog hexo -- s<br></code></pre></td></tr></tbody></table></figure><p>hexo </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog <br>npm i<br>npm run dev<br></code></pre></td></tr></tbody></table></figure><h2 id="安装wordpress博客"><a href="#安装wordpress博客" class="headerlink" title="安装wordpress博客"></a>安装wordpress博客</h2><h1 id="安装qbittorrent"><a href="#安装qbittorrent" class="headerlink" title="安装qbittorrent"></a>安装qbittorrent</h1><h3 id="安装qBittorrent"><a href="#安装qBittorrent" class="headerlink" title="安装qBittorrent"></a>安装qBittorrent</h3><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt install -y qbittorrent-nox<br></code></pre></td></tr></tbody></table></figure><p>如果提示未找到软件的话可以先update一下：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt update<br></code></pre></td></tr></tbody></table></figure><h3 id="启动qbittorrent"><a href="#启动qbittorrent" class="headerlink" title="启动qbittorrent"></a>启动qbittorrent</h3><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">qbittorrent-nox -d <br></code></pre></td></tr></tbody></table></figure><p>这时候，我们就可以打开浏览器，输入你树莓派的ip地址，qbittorrent默认webui的端口号为8080，比如：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">你的树莓派ip:8080<br></code></pre></td></tr></tbody></table></figure><p>默认账号<code>admin</code> 和密码 <code>adminadmin</code></p><h3 id="服务开机自启"><a href="#服务开机自启" class="headerlink" title="服务开机自启"></a>服务开机自启</h3><p>以上就是这个教程最核心的部分了。还有一个问题就是如何让这个服务开机自启，一般来说有两个办法。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>一个是利用rc.lcal脚本，再exit 0前面加入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/rc.local<br></code></pre></td></tr></tbody></table></figure><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">qbittorrent-nox -d<br></code></pre></td></tr></tbody></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>另一个方法是将qbittorrent加入到系统服务中。首先，用vim创建一个文件</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vim /etc/systemd/system/qbittorrent.service<br></code></pre></td></tr></tbody></table></figure><p>在文件中写入以下内容：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">[Unit]<br>Description=qBittorrent Daemon Service<br>After=network.target<br>[Service]<br>User=pi<br>ExecStart=/usr/bin/qbittorrent-nox<br>ExecStop=/usr/bin/killall -<span class="hljs-keyword">w</span> qbittorrent-nox<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></tbody></table></figure><p>然后，用systemctl命令重新载入daemon：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs octave">systemctl daemon-reload<br></code></pre></td></tr></tbody></table></figure><p>到这里，你就可以使用systemctl命令来查看、启动、停止qbittorrent服务了。如果要让它开机自启，只需要输入以下命令：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">systemctl enable qbittorrent-nox.service<br></code></pre></td></tr></tbody></table></figure><h1 id="安装openwrt"><a href="#安装openwrt" class="headerlink" title="安装openwrt"></a>安装openwrt</h1><p>openwrt 安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">opkg update <br>opkg install <br>opkg install lsblk cfdisk luci luci-base luci-compat block-mount<br>opkg install luci luci-base luci-compat<br>opkg install block-mount <br><br>opkg install docker-ce<br>/tmp下文件 添加 GUI<br>luci-lib-docker_v0.3.2_all.ipk<br>luci-app-dockermon_v0.5.7_all.ipk <br>luci-i18n-base-zh 中文<br></code></pre></td></tr></tbody></table></figure><p>第三方魔改集成openwrt</p><p><a href="https://github.com/SuLingGG/OpenWrt-Rpi/releases/tag/x86-64">Release openwrt-x86-64 · SuLingGG/OpenWrt-Rpi</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh连接树莓派ssh root@192.168.1.1，密码为password<br></code></pre></td></tr></tbody></table></figure><p>格式化</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/sda3 <br></code></pre></td></tr></tbody></table></figure><p>挂载点</p><p><a href="https://www.bilibili.com/read/cv9714518">树莓派4B 亲手打造一款Openwrt软路由(带编译固件-超详细) - RaspberryPi硬核系列(三) - 哔哩哔哩</a></p><p>挂载overlay </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">// disk <br>fdisk -l <br>cfdisk /dev/mmcblk<br>opkg install cfdisk<br>mkfs.ext4 /dev/sda3<br>mount /dev/sda3 /mnt/sda3<br><span class="hljs-built_in">cd</span> /overlay <br><span class="hljs-built_in">ls</span> <br><span class="hljs-built_in">cp</span> -r /overlay/* /mnt/sda3<br><span class="hljs-built_in">ls</span> /mnt/sda3<br>系统挂载目录<br></code></pre></td></tr></tbody></table></figure><p>docke 安装emby-server </p><figure class="highlight docker"><figcaption><span>run -d \</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs docker">// 拉取镜像<br>docker pull emby/embyserver:latest<br>// 容器运行环境<br>// 新建容器 条件按钮 开始配置新的容器参数<br>emby<br>绑定挂载<br>配置文件目录<br>媒体文件目录<br>设备<br>// 启动容器<br></code></pre></td></tr></tbody></table></figure><p>error</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/docker/tmp/GetImageBlob924900034 no such file or directory <br><br>no space left on device<br><br>docker -d 启动 查看异常现象<br><span class="hljs-built_in">cd</span> /var/lib/docker<br><span class="hljs-built_in">mkdir</span> tmp<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>    --name=emby \<br>    --volume /mnt/mmcblk0p3/docker/emby_lib:/config \                   <br>    --volume /mnt/mmcblk0p3/server:/movies \                                    <br>    --device /dev/dri/renderD128 \<br>    --publish 8096:8096 \<br>    --publish 8920:8920 \<br>    --<span class="hljs-built_in">env</span> UID=1000 \<br>    --<span class="hljs-built_in">env</span> GID=100 \<br>    --<span class="hljs-built_in">env</span> GIDLIST=100 \<br>    emby/embyserver:latest<br></code></pre></td></tr></tbody></table></figure><h1 id="安装dns"><a href="#安装dns" class="headerlink" title="安装dns"></a>安装dns</h1><p>树莓派上安装Pi-hole搭建DNS服务器，过滤网页广告 | 科技爱好者博客 -专注于树莓派（Raspberry Pi）<br><a href="https://www.lxx1.com/2422">https://www.lxx1.com/2422</a></p><h1 id="安装Adguard-Home"><a href="#安装Adguard-Home" class="headerlink" title="安装Adguard Home"></a>安装Adguard Home</h1><h1 id="安装ftp"><a href="#安装ftp" class="headerlink" title="安装ftp"></a>安装ftp</h1><p>使用SFTP远程传输树莓派文件 | 树莓派实验室<br><a href="https://shumeipai.nxez.com/2013/09/07/use-the-remote-sftp-file-transfer-raspberry-pi.html">https://shumeipai.nxez.com/2013/09/07/use-the-remote-sftp-file-transfer-raspberry-pi.html</a><br>只需在“快速连接”中输入：<br>主机：s<a href="ftp://192.168.1.102/">ftp://192.168.1.102</a> （换成您的树莓派的IP地址。前面的sftp://一定要加）<br>用户名和密码照实填。（Raspbian默认是pi/raspberry）</p><p>vsftpd是开源的轻量级的常用ftp服务器．</p><p>1,安装vsftpd服务器 (约400KB)</p><p>sudo apt-get install vsftpd</p><p>2,启动ftp服务</p><p>sudo service vsftpd start </p><p>3,编辑vsftdp的配置文件</p><p>sudo nano /etc/vsftpd.conf</p><p>找到以下行，定义一下</p><p>anonymous_enable=NO </p><p>表示：不允许匿名访问</p><p>local_enable=YES  </p><p>设定本地用户可以访问。</p><p>write_enable=YES</p><p>设定可以进行写操作 </p><p>local_umask=022</p><p>设定上传后文件的权限掩码。</p><p>存盘退出</p><p>4, 重启vsftpd服务</p><p>sudo service vsftpd restart </p><p>5, 测试一下, OK</p><p>通过ftp连接树莓派系统，以用户名pi登录，密码是raspberry ，即当前系统的用户名密码</p><p>ftp的根目录是/home/pi，即pi用户的HOME目录</p><p>可上传或下载文件了</p><p>如果设置为其他目录 需要在配置文件中添加以下</p><p>local_root=/home/pi/ftp</p><p>allow_writeable_chroot=YES</p><p>这种情况下可能会出现没有文件夹权限 需要给文件夹设置权限</p><p>在linux下执行 sudo chmod -R 777 /home/pi/ftp</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h1 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h1><p>\\192.168.1.11</p><blockquote><p>树莓派在家中至少三个作用：<code>家庭资源共享中心</code>、<code>无线打印服务器</code>、<code>下载服务器</code>。<br><code>家庭资源共享中心</code>用<code>samba</code>实现家庭局域网共享，树莓派4B的话可以接2个3.0的移动硬盘。<br>实测速度不快，Win读<code>2Mb/s</code>写<code>1Mb/s</code>，Mac读<code>1Mb/s</code>写<code>0.5Mb/s</code>，传小文件比较方便，备份资料可以的，视频不是超高清也能放，但是大文件建议还是直接接电脑。</p></blockquote><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>记得安装前先更新一下源，不然可能有些包安装不全。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></tbody></table></figure><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><ul><li>mount: /mnt: special device /dev/sda does not exist.</li><li>mount: /mnt: wrong fs type, bad option, bad superblock on /dev/sda, missing codepage or helper program, or other error.</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep fsck<br>sudo pkill -f fsck<br><br><br>diskutil eraseDisk JHFS+ UntitledUFS /dev/disk2<br></code></pre></td></tr></tbody></table></figure><p>修复磁盘命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">fsck.ext4 m命令<br>fsck -t ext4 -v /dev/sda1<br>fsck -r /dev/sdb1<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l<br>mount /dev/sda /mnt<br><span class="hljs-built_in">df</span> -h<br>umount /mnt/data<br><br>vi /etc/fstab // 自动挂载<br>添加 <br>/dev/sda /mnt ext4 default  1 1 <br><br><span class="hljs-built_in">cd</span> /mnt<br><br>硬盘测速<br>apt install hdparm<br>hdparm -Tt /dev/sda<br><br><br><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">chown</span> -R root:<span class="hljs-built_in">users</span> /mnt/data<br><span class="hljs-built_in">chmod</span> -R ug=rwx,o=rx /mnt/data<br><br><br>vi /etc/samba/smb.conf<br>// pi 密码 123<br><br>// 查找<br>/Auth<br><br>security = user<br>ready only  = no<br><br>[public]<br> comment = public storage <br> path = /mnt/<br> valid <span class="hljs-built_in">users</span> = @<span class="hljs-built_in">users</span><br> force group = <span class="hljs-built_in">users</span><br> creat maske = 0660<br>directory mask = 0771<br>ready-only = no<br><br><br>smbpasswd -a pi<br><br>apt-get install samba samba-common-bin<br><span class="hljs-comment"># 安装</span><br>sudo nano /etc/samba/smb.conf<br><span class="hljs-comment">#修改配置文件fdis</span><br><span class="hljs-comment"># 在smb.conf文件末尾加入下边两段</span><br>/media/pi/Backup Plus/else/<br>[myshare]                       <span class="hljs-comment"># 显示名称</span><br>comment = my share directory    <span class="hljs-comment"># 共享说明</span><br>path = /home/pi                 <span class="hljs-comment"># 共享目录，可自行修改</span><br>browseable = <span class="hljs-built_in">yes</span>                <span class="hljs-comment"># 可读权限</span><br>writeable = <span class="hljs-built_in">yes</span>                 <span class="hljs-comment"># 写入权限</span><br>guest ok = <span class="hljs-built_in">yes</span>                  <span class="hljs-comment"># 可写可不写</span><br>[portable]                      <span class="hljs-comment"># 移动硬盘</span><br>comment = portable disk        <br>path = /media/pi                <span class="hljs-comment"># 移动硬盘目录，接几个都会显示在这里</span><br>browseable = <span class="hljs-built_in">yes</span>                <br>writeable = <span class="hljs-built_in">yes</span>                 <br>guest ok = <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 保存（ctrl+o）退出（ctrl+x）</span><br>sudo smbpasswd -a pi<br><span class="hljs-comment"># 默认用户pi，设置密码</span><br>sudo smbpasswd -e pi<br><span class="hljs-comment"># 激活用户</span><br>sudo service smbd restart<br><span class="hljs-comment"># 重启服务</span><br>sudo /etc/init.d/samba start<br><span class="hljs-comment"># 如果没有开启，可以手动开启，如果还连不上就重启树莓派吧</span><br>sudo nano /etc/rc.local<br><span class="hljs-comment"># 如需自动启动，可将上一行命令（sudo /etc/init.d/samba start—）加到exit 0 之前</span><br></code></pre></td></tr></tbody></table></figure><p>设置/media/pi 文件夹权限<br><a href="https://www.cnblogs.com/kaerxifa/p/10931523.html">linux文件夹　权限为所有用户可 读写</a><br>使用命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 777 <span class="hljs-built_in">dirname</span> -R<br></code></pre></td></tr></tbody></table></figure><h1 id="安装owv"><a href="#安装owv" class="headerlink" title="安装owv"></a>安装owv</h1><ul><li><strong>OpenMediaVault</strong></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O - https://github.com/OpenMediaVault-Plugin-Developers/installScript/raw/master/install | sudo bash<br></code></pre></td></tr></tbody></table></figure><p>http://&lt;树莓派的IP地址&gt;<br>即可看到 OMV 的登录页，默认的用户名为「admin」，密码「openmediavault」。</p><h1 id="安装阿里网盘"><a href="#安装阿里网盘" class="headerlink" title="安装阿里网盘"></a>安装阿里网盘</h1><h1 id="安装emby"><a href="#安装emby" class="headerlink" title="安装emby"></a>安装emby</h1><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><h1 id="自动化部署博客"><a href="#自动化部署博客" class="headerlink" title="自动化部署博客"></a>自动化部署博客</h1><h1 id="CNS搭建"><a href="#CNS搭建" class="headerlink" title="CNS搭建"></a>CNS搭建</h1><h1 id="搭建免流TinyProxy"><a href="#搭建免流TinyProxy" class="headerlink" title="搭建免流TinyProxy"></a>搭建免流TinyProxy</h1><h1 id="搭建免流面板服务"><a href="#搭建免流面板服务" class="headerlink" title="搭建免流面板服务"></a>搭建免流面板服务</h1><h1 id="DHCP搭建"><a href="#DHCP搭建" class="headerlink" title="DHCP搭建"></a>DHCP搭建</h1><h1 id="自动脚本搭建"><a href="#自动脚本搭建" class="headerlink" title="自动脚本搭建"></a>自动脚本搭建</h1><ul><li>青龙面板</li><li>网易云刷云贝</li><li>定时脚本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>睁眼看世界，科学服务器搭建指南</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="科学对比"><a href="#科学对比" class="headerlink" title="科学对比"></a>科学对比</h2><p>VPN</p><ul><li>VPN<ul><li>OpenVpn</li><li>WireGuard 最新开发的 VPN 协议，比目前主流的 VPN 技术有明显优势，被称为下一代 VPN</li></ul></li></ul><p>socks5(Proxy)代理</p><ul><li>ss(Shadowsocks)<ul><li>SSR(ShadowsocksR)</li></ul></li><li>Trojian<ul><li>Trojan-go <code>Trojan</code> 的加强版</li></ul></li><li>V2ray(<code>Vmess</code> 是基于 V2Ray 内核自研的协议)  WS + TLS<ul><li>VLESS(<code>VLess</code> 是 <code>VMess</code> 轻量版)</li></ul></li><li>MTProto telegram 专用的一款代理软件</li><li>Clash</li></ul><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul><li>购买VPS服务器</li><li>一键部署VPS服务器</li><li>一键加速VPS服务器</li></ul><h2 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h2><blockquote><p>加密方式可选aes-256-gcm</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget<br>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ss-go.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ss-go.sh &amp;&amp; bash ss-go.sh<br><span class="hljs-comment"># bash ss-go.sh 快捷管理命令</span><br></code></pre></td></tr></tbody></table></figure><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><blockquote><p>IP、端口、密码、加密方式、协议插件、混淆插件</p><p>推荐配置</p><ul><li>加密方式：none 协议：origin 混淆：tls1.2_ticket_auth</li><li>加密方式：none 协议：auth_chain_a 混淆：tls1.2_ticket_auth</li><li>高阶篇的SSR+TLS+Caddy</li></ul><p>安装步骤</p><ul><li><p>设置端口：端口号为40-65535之间的数</p><ul><li>特殊的端口：80、143、443、1433、3306、3389、8080</li></ul></li><li><p>设置密码</p></li><li><p>加密方式：auth_256-cfb</p></li><li><p>协议插件：auth_shal_v4</p></li><li><p>是设置协议插件兼容原版</p></li><li><p>混淆选择plain意思是不混淆，有的时期增加混淆有利于突破封锁，有的时期不混淆有利用突破封锁，需要自己来尝试（可以使用免流）</p></li><li><p>准备连接数量</p></li></ul></blockquote><p>ssr安装脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 脚本一</span><br>yum -y install wget<br>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh<br><span class="hljs-built_in">chmod</span> +x shadowsocks-all.sh<br>./shadowsocks-all.sh 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> shadowsocks-all.log<br><span class="hljs-comment"># 脚本二</span><br>yum -y install wget<br>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssr.sh &amp;&amp; bash ssr.sh<br><span class="hljs-comment"># bash ssr.sh 快捷管理命令</span><br>reboot<br><span class="hljs-comment"># 脚本是开机自动启动</span><br></code></pre></td></tr></tbody></table></figure><p>多用户管理脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget<br>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssrmu.sh &amp;&amp; bash ssrmu.sh<br><span class="hljs-comment"># 快捷管理命令 bash ssrmu.sh</span><br><span class="hljs-comment"># 所有用户流量清零命令: bash ssrmu.sh clearall</span><br></code></pre></td></tr></tbody></table></figure><p>常见问题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget: <span class="hljs-built_in">command</span> not found 的错误<br>CentOS<br>yum install -y wget<br>Debian/Ubuntu<br>apt-get install -y wget<br>无法正常使用，创建的是centos7的服务器，需要使用命令关闭防火墙，或者放行端口号<br>查看防火墙状态命令：firewall-cmd --state<br>停止firewall命令：systemctl stop firewalld.service<br>禁止firewall开机启动命令：systemctl <span class="hljs-built_in">disable</span> firewalld.service<br></code></pre></td></tr></tbody></table></figure><p>使用</p><p>客户端</p><ul><li>手动输入</li><li>订阅链接</li><li>扫描二维码订阅</li></ul><p>配置</p><ul><li>系统代理模式<ul><li>直连模式</li><li>PAC模式</li><li>全局模式</li></ul></li><li>PAC</li><li>代理规则</li></ul><p>浏览器插件</p><p>下载插件：<a href="https://github.com/atrandys/trojan/releases/download/1.0.0/SwitchyOmega_Chromium.crx">switchyomega</a></p><blockquote><p>Windows SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases">下载地址</a></p><p>Windows SS客户端 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases">下载地址</a></p><p>Mac SSR客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases">下载地址</a></p><p>Linux SSR客户端 <a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">下载地址</a></p><p>安卓SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases/download/3.4.0.8/shadowsocksr-release.apk">下载地址</a></p></blockquote><h2 id="SSR-TLS-Caddy"><a href="#SSR-TLS-Caddy" class="headerlink" title="SSR+TLS+Caddy"></a>SSR+TLS+Caddy</h2><ul><li>需要<a href="https://github.com/Alvin9999/new-pac/wiki/%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0%E6%95%99%E7%A8%8B">购买域名</a></li><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7ProxySU">一键搭建工具ProxySU使用教程</a><ul><li>ProxySU是一款windows科学上网搭建软件，支持一键搭建V2ray，Trojan，NaiveProxy, Trojan-Go, ShadowsocksR(SSR),Shadowsocks-libev及相关插件一键安装工具。<ul><li><strong>推荐Debain10。不推荐用CentOS7，CentOS7用ProxySU无法自动开启bbr加速</strong></li></ul></li></ul></li></ul><h2 id="SS-插件"><a href="#SS-插件" class="headerlink" title="SS+插件"></a>SS+插件</h2><ul><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7ProxySU">一键搭建工具ProxySU使用教程</a></li></ul><h2 id="TCP网络加速"><a href="#TCP网络加速" class="headerlink" title="TCP网络加速"></a>TCP网络加速</h2><blockquote><p>五合一的TCP网络加速脚本，包括了BBR原版、BBR魔改版、暴力BBR魔改版、BBR plus（首选）、Lotsever(锐速)安装脚本。可用于KVMXen架构，不兼容OpenVZ（OVZ）。支持Centos 6+ / Debian 7+ / Ubuntu 14+，BBR魔改版不支持Debian 8</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -N --no-check-certificate <span class="hljs-string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span><br><span class="hljs-built_in">chmod</span> +x tcp.sh<br>./tcp.sh<br><span class="hljs-comment"># 先安装内核，重启vps让内核生效，再启动对应的加速即可</span><br><span class="hljs-comment"># 安装内核环节出现这样一张图，注意选择NO</span><br></code></pre></td></tr></tbody></table></figure><h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -s -L https://git.io/v2ray.sh)<br></code></pre></td></tr></tbody></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><h2 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h2><p>Trojan 一键安装脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -O https://raw.githubusercontent.com/atrandys/trojan/master/trojan_mult.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x trojan_mult.sh<br></code></pre></td></tr></tbody></table></figure><p>替换<br>第一个替换<br>进入/root目录下，打开trojan_mult.sh文件，完成以下两处替换。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wget https://github.com/atrandys/v2ray-ws-tls/raw/master/web.zip &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>替换为</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wget https://github.com/<span class="hljs-number">454414308</span>/v2ray-ws-tls/raw/master/web.zip &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>第二个替换</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wget https://github.com/atrandys/trojan/raw/master/trojan-cli.zip &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>替换为</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wget https://github.com/<span class="hljs-number">38506243</span>/trojan/raw/master/trojan-cli.zip &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>一键启动<br><a href="http://www.xxx.tk/">www.xxx.tk</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./trojan_mult.sh<br>108.61.182.113<br>45.77.129.82<br>www.xxx.tk<br></code></pre></td></tr></tbody></table></figure><p>输入 1 安装<br>接下来会提示输入网站域名，在这里输入你申请好的域名，比如 <a href="http://www.abc.com/">www.abc.com</a> 或者 abc.com。具体输入时，需要与你域名的DNS设置保持一致。<br>Trojan使用的是TCP流量，我们可以为服务器安装TCP加速工具，比如BBR或锐速，对Trojan进一步优化。这里我们更推荐安装BBR，因为锐速较容易安装失败。</p><p>安装二</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS系统安装curl命令：yum install -y curl<br><br>Debian/Ubuntu系统安装curl命令：apt-get install -y curl<br>键安装trojan脚本代码（系统支持centos7+/debian9+/ubuntu16+）：<br><br>bash -c <span class="hljs-string">"<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/atrandys/trojan/master/trojan_mult.sh)</span>"</span><br></code></pre></td></tr></tbody></table></figure><p>安装过程会先提示输入域名，不要带http或https，只输入域名即可，例如domain.com或 a.domain.com ，之后提示输入密码时输入密码。</p><p>最终安装完成后，配置文件信息会自动展示在屏幕上，对于trojan账号信息，最重要的是域名和密码。以v2rayN客户端为例，填入方法如下图：</p><p>v2rayN客户端——添加trojan服务器——填入账号信息，如上图，重要信息包括：域名、密码、传输层安全tls、SNI。</p><h2 id="BBR-Plus"><a href="#BBR-Plus" class="headerlink" title="BBR Plus"></a><a href="https://ssr.tools/1217">BBR Plus</a></h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate -O tcp.sh https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x tcp.sh &amp;&amp; ./tcp.sh<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./tcp.sh<br></code></pre></td></tr></tbody></table></figure><p>下载得到的Trojan Windows客户端，已经配置好连接参数，解压后运行其中的start.bat，就可以启动Trojan连接服务器了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">======================================================================<br>Trojan已安装完成，请使用以下链接下载trojan客户端，此客户端已配置好所有参数<br>1、复制下面的链接，在浏览器打开，下载客户端，注意此下载链接将在1个小时后失效<br>http://www.heeda0a21b/trojan-cli.zip<br>2、将下载的压缩包解压，打开文件夹，打开start.bat即打开并运行Trojan客户端<br>3、打开stop.bat即关闭Trojan客户端<br>4、Trojan客户端需要搭配浏览器插件使用，例如switchyomega等<br>======================================================================<br></code></pre></td></tr></tbody></table></figure><p>可以通过火狐或Chrome浏览器，安装SwitchyOmega扩展插件，设置代理为Socks5 127.0.0.1：1080，实现浏览器科学上网。<br>也可通过V2ray Windows客户端连接Socks5 127.0.0.1：1080，实现全局科学上网。</p><h2 id="BBRy"><a href="#BBRy" class="headerlink" title="BBRy"></a>BBRy</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x bbr.sh &amp;&amp; ./bbr.sh<br>输入 y 重启服务器<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></tbody></table></figure><h2 id="KCPTUN"><a href="#KCPTUN" class="headerlink" title="KCPTUN"></a><a href="http://www.jouypub.com/2019/9c4df700f0f76848f7042858a2b71a8a/">KCPTUN</a></h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh<br><span class="hljs-built_in">chmod</span> +x ./kcptun.sh<br>./kcptun.sh<br></code></pre></td></tr></tbody></table></figure><h2 id="V2RAY-WS-TLS安装"><a href="#V2RAY-WS-TLS安装" class="headerlink" title="V2RAY+WS+TLS安装"></a>V2RAY+WS+TLS安装</h2><h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><p>V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。<br>要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统<br>推荐<strong>使用 Debian 9 系统</strong>，脚本会自动启用 BBR 优化。<br>备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题<br>安装 V2Ray</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -s -L https://git.io/v2ray.sh)<br></code></pre></td></tr></tbody></table></figure><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update -y &amp;&amp; apt-get install curl -y<br></code></pre></td></tr></tbody></table></figure><p>centos 系统安装 Curl 方法</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update -y &amp;&amp; yum install curl -y<br></code></pre></td></tr></tbody></table></figure><p>安装步骤</p><ul><li>选择安装，即是输入 1 回车，安装</li><li>选择传输协议，如果没有特别的需求，使用<strong>默认的 TCP 传输协议</strong>即可，直接回车</li><li>选择端口，如果没有特别的需求，使用默认的端口即可</li><li>广告拦截默认否，选择是</li><li>配置 Shadowsocks<ul><li>y，配置Shandowsocks</li><li>端口号自选</li><li>密码</li><li>加密协议，默认</li></ul></li></ul><h3 id="快速管理"><a href="#快速管理" class="headerlink" title="快速管理"></a>快速管理</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">v2ray info 查看 V2Ray 配置信息<br>v2ray config 修改 V2Ray 配置<br>v2ray <span class="hljs-built_in">link</span> 生成 V2Ray 配置文件链接<br>v2ray infolink 生成 V2Ray 配置信息链接<br>v2ray qr 生成 V2Ray 配置二维码链接<br>v2ray ss 修改 Shadowsocks 配置<br>v2ray ssinfo 查看 Shadowsocks 配置信息<br>v2ray ssqr 生成 Shadowsocks 配置二维码链接<br>v2ray status 查看 V2Ray 运行状态<br>v2ray start 启动 V2Ray<br>v2ray stop 停止 V2Ray<br>v2ray restart 重启 V2Ray<br>v2ray <span class="hljs-built_in">log</span> 查看 V2Ray 运行日志<br>v2ray update 更新 V2Ray<br>v2ray update.sh 更新 V2Ray 管理脚本<br>v2ray uninstall 卸载 V2Ray<br></code></pre></td></tr></tbody></table></figure><h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h3><p>V2Ray 配置文件路径：/etc/v2ray/config.json<br>Caddy 配置文件路径：/etc/caddy/Caddyfile<br>脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf</p><h3 id="WS-TLS-x2F-HTTP2"><a href="#WS-TLS-x2F-HTTP2" class="headerlink" title="WS+TLS / HTTP2"></a>WS+TLS / HTTP2</h3><p>如果你使用了这两个协议，那么就会使用了脚本自带的 Caddy 集成<br>不管如何，不建议直接去更改 Caddy 的配置：/etc/caddy/Caddyfile<br>如果你需要配置其他网站相关，请将网站的配置文件放到 /etc/caddy/sites 目录下，然后重启 Caddy 进程即可，脚本默认生成的 Caddy 的配置会加载 /etc/caddy/sites 这个目录下的所有配置文件。<br>所以，请将你的网站配置文件放到 /etc/caddy/sites 目录下，完完全全不需要去更改 /etc/caddy/Caddyfile<br>记得重启 Caddy 进程：service caddy restart</p><h3 id="Caddy-插件相关"><a href="#Caddy-插件相关" class="headerlink" title="Caddy 插件相关"></a>Caddy 插件相关</h3><p>本脚本集成了 Caddy，但不集成任何 Caddy 插件，如果你需要安装某些 Caddy 插件，你可以使用官方的 Caddy 安装脚本来一键安装。<br>本人的脚本集成的 Caddy 的安装路径，跟 Caddy 官方的安装脚本是一致的。所以可以直接安装，不会有任何问题<br>举个例子，安装包含 http.filebrowser 插件的 Caddy，执行如下命令即可</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://getcaddy.com | bash -s personal http.filebrowser<br></code></pre></td></tr></tbody></table></figure><p>你可以在 <a href="https://caddyserver.com/download">https://caddyserver.com/download</a> 找到 Caddy 更多插件和安装命令。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>为了避免由于不可抗拒的原因所造成本人主动删除脚本，所以建议请将本脚本 Fork 一份<br>备份地址：<a href="https://github.com/233boy/v2ray/fork"> https://github.com/233boy/v2ray/fork</a><br>安装方法，确保你已经 Fork 了脚本，将 233boy 修改成你的 Github 用户名</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/233boy/v2ray -b master<br><span class="hljs-built_in">cd</span> v2ray<br><span class="hljs-built_in">chmod</span> +x install.sh<br>./install.sh <span class="hljs-built_in">local</span><br></code></pre></td></tr></tbody></table></figure><h3 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h3><p>使用 <code>v2ray update.sh</code> 命令来更新管理脚本。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v2ray update.sh<br></code></pre></td></tr></tbody></table></figure><h2 id="Brook"><a href="#Brook" class="headerlink" title="Brook"></a>Brook</h2><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">方法一（老）：<br>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x brook.sh &amp;&amp; bash brook.sh<br>方法二（新）：<br>curl -L https://github.com/txthinking/brook/releases/download/v20200909/brook_linux_amd64 -o /usr/bin/brook<br><span class="hljs-built_in">chmod</span> +x /usr/bin/brook<br>setsid ./brook server -l :9999 -p password<br>修改brook端口号和密码方法：<br>关闭brook进程命令：killall brook<br>运行第三条命令：setsid ./brook server -l :新端口 -p 新密码<br><br><span class="hljs-built_in">cd</span> /<br><span class="hljs-built_in">mkdir</span> my_brook<br><span class="hljs-built_in">cd</span> my_brook<br>wget https://github.com/txthinking/brook/releases/download/v20181212/brook<br><span class="hljs-comment"># 赋予执行权限</span><br><span class="hljs-built_in">chmod</span> 777 brook<br><span class="hljs-comment"># 开启服务</span><br>./brook server -l :9999 -p password<br><span class="hljs-comment"># 以非阻塞方式开启服务(比较推荐)</span><br>./brook server -l :9999 -p password /dev/null 2&gt;&amp;1 &amp;<br>yum install nodejs<br>npm install pm2 -g<br><span class="hljs-built_in">cd</span> /my_brook<br><span class="hljs-built_in">touch</span> start_brook.sh<br>./brook server -l :9999 -p password<br>pm2 list<br>pm2 delete start_brook<br></code></pre></td></tr></tbody></table></figure><ul><li><p>下载客户端<br>Window客户端下载:<a href="https://github.com/txthinking/brook/releases/download/v20181212/Brook.exe">https://github.com/txthinking/brook/releases/download/v20181212/Brook.exe</a><br>Mac客户端下载:<a href="https://github.com/txthinking/brook/releases/download/v20181212/Brook.dmg">https://github.com/txthinking/brook/releases/download/v20181212/Brook.dmg</a><br>安卓客户端下载:<a href="https://github.com/txthinking/brook/releases/download/v20181212/Brook.apk">https://github.com/txthinking/brook/releases/download/v20181212/Brook.apk</a><br>IOS客户端下载(你可能需要美国区账户): <a href="https://itunes.apple.com/us/app/brook-brook-shadowsocks-vpn-proxy/id1216002642">https://itunes.apple.com/us/app/brook-brook-shadowsocks-vpn-proxy/id1216002642</a></p></li><li><p><a href="https://github.com/txthinking/brook">txthinking/brook: A cross-platform network tool designed for developers. 一个为开发者设计的跨平台网络工具.</a></p></li><li><p><a href="https://www.v2fy.com/p/brook/">[Linux老司机] 用Brook部署一个简单稳定傻瓜的科学上网工具 – V2方圆</a></p></li></ul><p>使用</p><p>Brook Tools v1.0.8 <a href="https://tr61.free4444.xyz/BrookToolsv1.0.8.7z">下载地址</a></p><p>下载Brook Windows命令行版客户端，地址：<a href="https://github.com/txthinking/brook/releases">https://github.com/txthinking/brook/releases</a></p><p>将下载好的Brook Tools压缩包解压出来，解压路径不要包含中文，将重命名好的Brook Windows命令行版客户端放在同一个文件夹</p><p>打开Brook Tools客户端，点击界面上的“浏览”后，打开同一文件夹的brook.exe ,之后点击“保存配置”、“启动”</p><p>Brook Tools客户端有2种代理方式，默认的是<strong>http代理</strong>，如果把前面的勾去掉，则变为<strong>socks5代理</strong>。</p><h2 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h2><ul><li>Clash是一款用Go开发的多平台的代理工具，Clash使用强大的策略组来管理节点。</li><li>Clash的魅力在于可以自动选择节点，不同的网站，在同一时间，可以使用不同的节点去访问，推荐机场订阅用户使用。</li></ul><h3 id="Clash支持"><a href="#Clash支持" class="headerlink" title="Clash支持"></a>Clash支持</h3><ul><li>系统支持：目前支持Win、Mac、Android、软路由端，暂不支持iOS端。</li><li>协议支持：支持当下主流的SS/SSR、v2ray、Trojan等协议。</li></ul><blockquote><p><a href="https://github.com/Dreamacro/clash/releases">clash</a></p></blockquote><p>全局代理</p><ul><li><p>proxifer</p><ul><li>proxifier是付费工具</li><li>proxifier无法像v2ray一样简便的设置路由规则</li></ul></li><li><p>ClashX Pro有增强模式</p><ul><li><a href="https://github.com/Semporia/ClashX-Pro">Semporia/ClashX-Pro: Clash X for Mac 自用稳定分流规则、参考配置</a><ul><li>下载重新安装</li></ul></li></ul></li></ul><h2 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h2><blockquote><p>Wireguard是一种新型的VPN协议，相比目前主流的VPN协议，WireGuard具有轻便、快速、高效、安全的优点，被称为下一代VPN协议。WireGuard最初是为Linux内核开发，但目前已提供跨平台支持，可在Linux、安卓、苹果iOS、MacOS、Openwrt、Windows等多个平台使用 Wireguard可以全局代理电脑所有软件，包括浏览器、游戏软件等</p><p>全局代理软件</p><ul><li>UDP 协议传输，可以搭建在被墙的服务器上使用，复活被墙IP</li><li>UDP 协议传输，不怕被墙，锐速、BBR 这类TCP加速工具也不会对其起到加速作用。</li><li>当地运营商对海外 UDP 链接进行 QOS 限速，那么速度可能不如使用 TCP 链接的代理软件理想。<ul><li>QoS（Quality of Service）服务质量，是网络的一种安全机制, 是用来解决网络延迟和阻塞等问题的一种技术。 在正常情况下，如果网络只用于特定的无时间限制的应用系统，并不需要QoS，比如Web应用，或E-mail设置等。但是对关键应用和多媒体应用就十分必要。当网络过载或拥塞时，QoS 能确保重要业务量不受延迟或丢弃，同时保证网络的高效运行。</li><li>QoS限速就是对局域网内各个IP地址进行流量控制，以达到稳定而优质的上网的目的。这个功能对局域网内使用P2P下载占用大量带宽的情形有非常好的改善</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -O https://raw.githubusercontent.com/atrandys/wireguard/master/wg_mult.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x wg_mult.sh &amp;&amp; ./wg_mult.sh<br><span class="hljs-comment"># cat /etc/wireguard/client.conf</span><br>yum -y install lrzsz<br><span class="hljs-comment"># 把client.conf文件下载到电脑</span><br>sz /etc/wireguard/client.conf<br>增加wireguard多用户方法：<br>进入下载脚本的路径，然后使用以下命令打开脚本<br>./wg_mult.sh<br>add user<br>输入一个用户名<br>获取新用户名.conf文件<br></code></pre></td></tr></tbody></table></figure><p>客户端</p><p>安装</p><p><a href="https://tunsafe.com/download">TunSafe: High Performance WireGuard VPN Client for Windows</a></p><ul><li>第三方WireGuard客户端</li></ul><p><a href="https://www.wireguard.com/">WireGuard: fast, modern, secure VPN tunnel</a></p><p>使用</p><ul><li>电脑端直接导入配置文件就行了</li><li>手机端生成二维码扫码</li></ul><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p><strong>账号无法使用，可能原因：客户端与服务端的设备系统时间相差过大。解决方法如下：</strong></p><p><strong>1、一般国外的VPS的镜像都是默认的国外时区，使用起来不是很方便。可以把它修改成北京时间，就会方便很多。</strong> <strong>修改中国时区代码如下</strong>：</p><p>\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p><p><strong>2、利用NTP同步时间协议</strong></p><p><strong>CentOS系统先安装NTP</strong>：yum install ntp ntpdate -y</p><blockquote><p>如果是Ubuntu/Debian系统执行下面2条命令来安装NTP</p></blockquote><blockquote><p>apt-get update</p></blockquote><blockquote><p>apt-get install ntp ntpdate -y</p></blockquote><p><strong>安装NTP后，按照顺序依次执行以下3条命令，分别是停止NTP服务、同步NTP时间、启动NTP服务</strong>：</p><p>service ntpd stop</p><p>ntpdate us.pool.ntp.org</p><p>service ntpd start</p><p><strong>执行完成后，VPS上就是相对精确的时间设置了。很多依赖于系统时间的应用程序也就能正常工作了。注意：当vps重启后输入date来检查下时间，如果时间不是最新的，再执行以上3条命令即可。</strong></p><blockquote><p>除了通过NTP来同步时间以外，还可以手动修改vps系统时间，需要先修改中国时区，之后输入时间命令，格式（数字改为和自己电脑时间一致，误差30秒以内）：date -s “2020-2-02 19:14:00”</p></blockquote><h2 id="机场面板"><a href="#机场面板" class="headerlink" title="机场面板"></a>机场面板</h2><blockquote><ul><li>宝塔面板</li><li><a href="https://github.com/Anankke/SSPanel-Uim">Anankke/SSPanel-Uim: SSPanel V3 魔改再次修改版</a></li><li><a href="https://github.com/crossfw/Air-Universe">crossfw/Air-Universe: 开源多功能机场后端， 协议支持 V2Ray(VMess), Trojan, Shadowsocks(单端口多用户)；面板支持 SSPanel, v2board, django-sspanel.</a></li><li><a href="https://bbpp222006.github.io/2022/01/11/%E8%87%AA%E5%BB%BA%E6%9C%BA%E5%9C%BA/">自建机场 - Glider的博客 | Glider Blog</a></li></ul></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li><a href="https://www.techfens.com/posts/kexueshangwang.html">科学上网的主流协议大对比！这里面有你在使用的吗？ | TechFen’s Blog</a></li><li><a href="https://wallzhihu.com/tech/">2022全网最全面最详细的翻牆技术大全-含实作 | 墻知乎</a></li><li><a href="https://my.freenom.com/clientarea.php?managedns=xxx.tk&amp;domainid=1095440288">Client Area - Freenom</a></li><li><a href="https://sailorchina.github.io/2019/03/23/%E6%9C%BA%E5%9C%BA%E6%90%AD%E5%BB%BA/#%E5%85%B6%E4%BB%96">机场搭建 | 毓头的折腾事</a></li><li><a href="https://fanqiang.network/174952.html">[搭建自己的机场] 开源免费的SS/V2ray面板:django-sspanel 后端对接教程 - 翻墙网络</a></li><li><a href="https://ssr.tools/1265">Trojan一键安装脚本 傻瓜全自动 搭建伪装网站、续签证书、客户端参数配置</a></li><li><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B">V2Ray搭建详细图文教程 · 233boy/v2ray Wiki</a></li><li><a href="https://github.com/Alvin9999/new-pac/wiki">Home · Alvin9999/new-pac Wiki</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全网最全的Mac系统上手指南</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/MacOS.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/MacOS.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mac系统"><a href="#Mac系统" class="headerlink" title="Mac系统"></a>Mac系统</h1><h2 id="Mac系统学习"><a href="#Mac系统学习" class="headerlink" title="Mac系统学习"></a>Mac系统学习</h2><h2 id="Mac快捷键"><a href="#Mac快捷键" class="headerlink" title="Mac快捷键"></a>Mac快捷键</h2><ul><li>截图  Command - [control] - shift - 4 - [Space]</li><li>Command +  H（Hide） M(Small)  Option + /H  Tab   ` <ul><li>Command + control + F 全屏   Command + option +m  最小化当前程序的所有窗口</li></ul></li><li>复制 无格式  Command＋Shift＋V</li><li>剪贴  Command+C  Command＋Option＋V</li><li>删除   Command + Backspace   Command + Delete  删除  清空废纸篓  Command + shift + Backspace  Command + Delete + Shift  清空垃圾桶</li><li>复制路径 Command</li><li>Command  + D 复制   J 显示   上  返回上一级目录 下  进入一层/打开所选项   [ ]  前进回退   . 设置</li><li>Shift – Command –  +  . 隐藏文件   A (应用程序 App)   H (用户)  C(电脑)  D(桌面)  F(最近文件)   G （前往文件夹）  L  (下载)</li><li>撤销 Command   Z</li><li>sudo killall -HUP mDNSResponder</li><li>ipconfig /flushdns</li><li>Mac 壁纸 <code>/System/Library/Desktop Pictures</code></li></ul><p>Mac工具</p><ul><li>brew</li><li>curl</li><li>mtr📕</li></ul><p>安装软件</p><ul><li>macOS 不允许未知来源开发者的应用<ul><li><code>sudo spctl --master-disable</code>  安全性与隐私”   允许“任何来源</li><li>用 Finder 找到应用程序，用右键菜单打开</li></ul></li></ul><h2 id="Mac环境变量设置"><a href="#Mac环境变量设置" class="headerlink" title="Mac环境变量设置"></a>Mac环境变量设置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">zsh --vesion<br>cat /etc/shells <br></code></pre></td></tr></tbody></table></figure><p>bash</p><ul><li><code>/etc/profile  &gt; /etc/paths 全局  &gt;  ~/.bash_profile 用户  &gt;  ~/.bash_login  &gt;  ~/.profile ~/.bashrc</code><ul><li><code>/etc/profile 与 /etc/paths 系统级别环境变量</code><ul><li><code>/etc/paths</code>  全局配置</li><li><code>/etc/profile </code>  全局（公有）配置</li></ul></li><li><code>~/.bash_profile  &gt;  ~/.bash_login  &gt;  ~/.profile  &gt; ~/.bashrc 用户级别环境变量</code><ul><li>``~/.echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile` 当前用户生效  要重启  /.bash_profile文件存在，则后面的几个文件就会被忽略不读了</li><li>``~/.profile`  为系统的每个用户设置环境信息（登陆时执行）</li><li><code> ~/.bashrc</code>  修改这个文件不用重启，重新打开一个bash即可生效</li></ul></li></ul></li><li>用法<ul><li>设置命令别名</li><li>设置自定义指令操作</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;<br>// 全局配置<br><span class="hljs-built_in">touch</span> /etc/paths.d/xxxfile<br>vim xxxfile<br>/usr/local/xxx/bin  //启动路径<br>// 系统文件<br>vim ~/.bash_profile   //  ./.profile <br><span class="hljs-built_in">source</span> .bash_profile<br>// 别名 设置常用缩写  <br><span class="hljs-built_in">alias</span> xx = <span class="hljs-string">'xxxx'</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> // 查看Path<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">'PATH="$PATH:./node_modules/.bin"'</span> &gt;&gt; ~/.bash_profile<br><br>// mac .bash_profile <br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">'ls -l'</span> <span class="hljs-comment"># 别名</span><br><span class="hljs-built_in">export</span> PATH=/opt/local/bin:/opt/local/sbin:<span class="hljs-variable">$PATH</span> <span class="hljs-comment"># 设置path</span><br><br>// 用Typora打开Hexo博客文章<br><span class="hljs-built_in">alias</span> note=<span class="hljs-string">'cd /Users/administrator/Workspace/Blog/source/_posts'</span><br><span class="hljs-built_in">alias</span> typora=<span class="hljs-string">'note &amp;&amp; open -a /Applications/Typora.app'</span><br>// 上传Blog文章<br><span class="hljs-built_in">alias</span> push=<span class="hljs-string">'cd /Users/administrator/Workspace/Blog &amp;&amp; npm run git</span><br></code></pre></td></tr></tbody></table></figure><p>zsh</p><ul><li>安装了<code>oh my zsh</code>后， <code>.bash_profile</code> 文件中的环境变量就无法起到作用</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br>// 添加<br><span class="hljs-built_in">source</span> ~/.bash_profile<br>// zsh中配置<br></code></pre></td></tr></tbody></table></figure><ul><li>oh my zsh<ul><li>z 是oh-my-zsh默认就装好的，会记录输入过的路径名，z+某个目录直接跳转到该目录</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 主体<br>ZSH_THEME=<span class="hljs-string">"random"</span><br><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/themes &amp;&amp; <span class="hljs-built_in">ls</span><br>plugins=() 插件<br><br>plugins=(<br>git<br>autojump<br>zsh-autosuggestions // 自动补全<br>zsh-syntax-highlighting  // 高亮<br>zsh-z<br>)<br></code></pre></td></tr></tbody></table></figure><ul><li>oh my zsh 插件</li></ul><blockquote><p><a href="https://www.mintimate.cn/2021/02/05/configZsh/">Linux/Mac如何配置zsh并使用Oh-my-zsh？让你的终端更加好用 - 雨月空间站</a></p><p><a href="https://asmcn.icopy.site/awesome/awesome-zsh-plugins/">ZSH 插件 - 超赞合集 awesome list chinese</a></p></blockquote><p>Google</p><blockquote><p><a href="https://github.com/biaochenxuying/blog/issues/58">提升 google 使用效率的 30个快捷键、16个扩展插件与 11个前端调试方法 · Issue #58 · biaochenxuying/blog</a></p></blockquote><p>Linux</p><ul><li><p>ls  <code>-w</code> 显示中文，<code>-l</code> 详细信息， <code>-a</code> 包括隐藏文件</p></li><li><p><code>&gt; &gt;&gt; </code></p><ul><li><code>&gt;</code> 是定向输出到文件，如果文件不存在，就创建文件；如果文件存在，就将其清空；一般我们备份清理日志文件的时候，就是这种方法：先备份日志，再用<code>&gt;</code>，将日志文件清空（文件大小变成0字节）</li><li><code>&gt;&gt;</code> 这个是将输出内容追加到目标文件中。如果文件不存在，就创建文件；如果文件存在，则将新的内容追加到那个文件的末尾，该文件中的原有内容不受影响。</li></ul></li><li><p>cp   cp 参数 源文件 目标文件  参数R表示对目录进行递归操作</p></li><li><p>rm 参数 文件 rm -rf 文件夹</p></li><li><p>mv 移动</p></li><li><p>chmod 参数 权限  文件  (#add  ch代表change)   文件权限</p><ul><li>chmod -R 755  /System/Library/Extensions  R 表示递归，755表示各用户的权限</li></ul></li><li><p>chown 参数  用户:组 文件  文件所有者</p></li></ul><p>Mac文件管理右栏调大</p><p>VSCode删除空行</p><ul><li>正则表达式</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">^\s*(?=\r?$)\n<br></code></pre></td></tr></tbody></table></figure><p>Mac开机自启动</p><ul><li>腾讯柠檬软件 == &gt;开机启动项管理</li></ul><p>状态栏始终显示</p><ul><li>系统设置 ==&gt; 程序坞与菜单栏 ==&gt; 菜单栏 ==&gt; 自动在全屏慕中隐藏和显示菜单栏</li></ul><p>Mac删除快捷键</p><ul><li><strong>删除文件Command + Del</strong></li></ul><p>Mac重命名快捷键</p><blockquote><p><a href="https://blog.zhheo.com/p/378aa5e7.html">mac空格快速预览（QuickLook）webp格式图片、md文件、mkv等</a></p></blockquote><p>mac系统如何修改默认打开方式</p><ol><li>首先选中你要<strong>修改默认打开方式</strong>的文件，右键单击这个文件，在弹出的菜单中，选择“查看简介”；</li><li>在弹出的菜单中，找到“<strong>打开方式</strong>”选项，从下来的菜单中，找到你希望<strong>默认打开</strong>这个文件的程序；</li><li>然后点击下面的“全部更改”，这样以后你双击这种类型的文件，都会<strong>默认</strong>使用你刚刚设置的软件进行<strong>打开</strong>；</li></ol><p>pdf 隐藏打开 PDF 文件时出现的消息“内容准备进度”</p><ul><li><p>转到“编辑”&gt;“首选项”&gt;“朗读”。 在“屏幕阅读器选项”下面，选择“仅阅读当前可见页面”。</p></li><li></li></ul><p>苹果截屏</p><p>苹果自带截图快捷键 alt + shift +  3 4 5</p><ul><li><p>屏幕截图 Command + Shift + 5</p></li><li><p>Cmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。</p></li><li><p>Cmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。 esc 取消截屏</p><ul><li>Cmd+Shift+4+ 空格 窗口截屏 空格第二次按 </li><li>cmd + shift + 4 + ctrl 键保存在剪贴板中</li></ul></li><li><p>Cmd+Shift+5 截屏工具栏- 单击空格键 - 鼠标单击指定窗口：应用窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标移动，单击截取指定窗口，保存截图至桌面文件夹。</p></li></ul><p>录制屏幕</p><ul><li>Cmd+Shift+5 截屏工具栏 录制屏幕</li><li>截图自动上传到</li></ul><h2 id="Mac磁盘分区"><a href="#Mac磁盘分区" class="headerlink" title="Mac磁盘分区"></a>Mac磁盘分区</h2><p>Window 电脑下的磁盘格式</p><blockquote><p><a href="https://www.bilibili.com/video/BV1o7411M7qx?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1o7411M7qx?spm_id_from=333.337.search-card.all.click</a></p></blockquote><p>Mac电脑下的磁盘格式</p><p>格式 </p><ul><li>APFS</li></ul><p>Mac 磁盘合并分区</p><h2 id="Mac磁盘挂载"><a href="#Mac磁盘挂载" class="headerlink" title="Mac磁盘挂载"></a>Mac磁盘挂载</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep fsck<br>sudo pkill -f fsck<br>diskutil eraseDisk JHFS+ UntitledUFS /dev/disk2<br></code></pre></td></tr></tbody></table></figure><h2 id="软件快捷键"><a href="#软件快捷键" class="headerlink" title="软件快捷键"></a>软件快捷键</h2><p><strong>通用快捷键汇总</strong></p><table><thead><tr><th>Ctrl+A 全选</th><th>Ctrl+S 保存</th></tr></thead><tbody><tr><td>Ctrl+Z 撤销</td><td>Ctrl+Y 撤回撤销</td></tr><tr><td>Ctrl+C 复制</td><td>Ctrl+V 粘贴</td></tr><tr><td>Ctrl+X 剪切</td><td>Ctrl+P 打印</td></tr><tr><td>Ctrl+[ 缩小字体</td><td>Ctrl+] 放大字体</td></tr><tr><td>F1 帮助 F2 重命名 F12 另存为</td><td></td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>软件</p><ul><li>keycure<ul><li>长按command键</li></ul></li></ul><p>苹果键盘</p><blockquote><p><a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键 - Apple 支持 (中国)</a></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS/2 键盘<br>⇧ (<span class="hljs-built_in">shift</span>)<br>⌃ (control == ctrl )  ⌥ (Option == win )  ⌘ (Command / Cmd = alt)<br>control ==&gt; ctrl <br>option ==&gt;  win<br><span class="hljs-built_in">command</span> ==&gt; alt <br></code></pre></td></tr></tbody></table></figure><p>Mac 常用快捷键</p><p><code>⌘ (Command / Cmd)、⌥ (Option)、⌃ (control)、⇧ (shift)</code></p><p>alt == command</p><p>win == option ⌥ (</p><p>ctrl == control  ⌃ </p><ul><li><strong>关闭/退出应用Command + Q</strong></li><li><strong>复制粘贴Command + C / V</strong></li><li><strong>剪切内容Command + X / V</strong></li><li><strong>剪切/移动文件Command + Option + V</strong></li><li>截屏<ul><li>屏幕截图 Command + Shift + 5</li><li>Cmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。</li><li>Cmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。</li><li>Cmd+Shift+4 - 单击空格键 - 鼠标单击指定窗口：应用窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标移动，单击截取指定窗口，保存截图至桌面文件夹。</li></ul></li><li><strong>快速切换应用</strong>Command + Tab</li><li><strong>同一个APP多窗口之间切换Command + `</strong></li><li><strong>强制退出应用Command + Option + Esc</strong></li><li><strong>最小化窗口Command + M</strong></li><li><strong>隐藏当前窗口Command + H</strong></li><li><strong>快速显示或隐藏程序坞Command + Option + D</strong></li><li><strong>删除文件Command + Del</strong></li><li><strong>推出选中的磁盘或宗卷Command + E</strong></li><li><strong>打开软件的偏好设置Command</strong>+ ，</li><li><strong>快速插入Emoji表情Control + Command +空格</strong></li><li><strong>立即锁定屏幕Control + Command + Q</strong></li><li><strong>Command-E</strong>：推出所选磁盘或宗卷。</li><li>command + 空格切换输入法</li><li>获取焦点</li></ul><p>文件重命名快捷键</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>系统磁盘格式</p><p>目录结构</p><ul><li>/etc 系统配置文件存放目录</li><li>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin 传统unix命令的存放目录，如<span class="hljs-built_in">ls</span>，<span class="hljs-built_in">rm</span>，<span class="hljs-built_in">mv</span>等。<br>/sbin 传统unix管理类命令存放目录，如fdisk，ifconfig等等。<br>/usr 第三方程序安装目录。<br>/usr/bin, /usr/sbin, /usr/lib，其中/usr/lib目录中存放了共享库（动态链接库）。<br>/etc. 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd。此目录实际为指向/private/etc的链接。<br>/dev 设备文件存放目录，如何代表硬盘的/dev/disk0。<br>/tmp 临时文件存放目录，其权限为所有人任意读写。此目录实际为指向/private/tmp的链接。<br>/var 存放经常变化的文件，如日志文件。此目录实际为指向/private/var的链接。<br>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里；<br>/Library 系统的数据文件、帮助文件、文档等等；<br>/Network 网络节点存放目录；<br>/System 他只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等。<br>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。<br>/Volumes 文件系统挂载点存放目录。<br>/cores 内核转储文件存放目录。当一个进程崩溃时，如果系统允许则会产生转储文件。<br>/private 里面的子目录存放了/tmp, /var, /etc等链接目录的目标目录。<br>/installer.failurerequests 可能是用来记录发生crash时的日志<br></code></pre></td></tr></tbody></table></figure><p>自建重要文件</p><p>文件存储</p><ul><li>Picture</li><li>Download <ul><li>保存</li><li>临时</li><li>垃圾</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /Users/administrator/Pictures/PictureBed 图床<br><span class="hljs-built_in">mkdir</span> /Users/administrator/WorkSpace<br></code></pre></td></tr></tbody></table></figure><h2 id="Mac包管理工具-brew"><a href="#Mac包管理工具-brew" class="headerlink" title="Mac包管理工具 brew"></a>Mac包管理工具 brew</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew<br>brew cask<br><br><span class="hljs-comment"># 安装 homebrew</span><br>/bin/bash -c <span class="hljs-string">"<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span><br><span class="hljs-comment"># 卸载 homebrew</span><br>brew -v<br>brew install wget<br>brew -<span class="hljs-built_in">help</span><br>brew unstall wget<br>brew search git<br>brew list<br>brew update<br>brew upgrade git<br>brew info git 显示软件内容信息<br>brew home <br>brew server web服务器<br>brew cleanup git 删除程序，和upgrade一样，单个软件删除和所有程序老版删除。<br>brew cleanup<br>brew outdated 查看那些已安装的程序需要更新<br></code></pre></td></tr></tbody></table></figure><h2 id="前端开发环境搭建"><a href="#前端开发环境搭建" class="headerlink" title="前端开发环境搭建"></a>前端开发环境搭建</h2><p>安装node</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span><br>nvm install node<br>node<br></code></pre></td></tr></tbody></table></figure><p>安装git</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br>$ git config --global user.name <span class="hljs-string">"user"</span>                       // 设置用户名<br>$ git config --global user.email <span class="hljs-string">"email"</span>           // 设置邮箱<br>ssh-keygen -t rsa -C <span class="hljs-string">"邮箱"</span> -f ~/.ssh/id_rsa<br>ssh-keygen -t rsa -C <span class="hljs-string">"邮箱"</span> -f ~/.ssh/id_rsa_my<br>open ～/.ssh             // 就会自动打开ssh所在目录<br></code></pre></td></tr></tbody></table></figure><p>安装nvm</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install nvm<br></code></pre></td></tr></tbody></table></figure><p>安装nrm</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i nrm -g <br>nrm <span class="hljs-built_in">ls</span><br>nrm use taobao<br></code></pre></td></tr></tbody></table></figure><p>安装cnpm</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i cnpm -g<br></code></pre></td></tr></tbody></table></figure><p>安装nginx</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nginx<br></code></pre></td></tr></tbody></table></figure><p>安装<a href="https://code.visualstudio.com/">vscode</a></p><ul><li><p>vscode美化</p></li><li><p>vscode插件</p></li></ul><p>安装<a href="https://typora.io/">typora软件</a></p><ul><li>配置图床</li><li>配置主题</li></ul><p>安装ITerm</p><p>安装Dash</p><p>安装Google </p><ul><li>扩展插件推荐</li></ul><p>安装搜狗输入法</p><p>安装Xmind</p><p>安装Charles</p><p>安装Postman</p><h2 id="笔记管理"><a href="#笔记管理" class="headerlink" title="笔记管理"></a>笔记管理</h2><ul><li>技术类型文章  ==&gt; Markdown博客 </li><li>文学类型文章 ==&gt; Word类型文件</li><li>笔记类文字 ==&gt; Notion软件</li></ul><h2 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h2><p>动态图管理</p><p>图片切换</p><p>作图软件</p><ul><li>xmind</li></ul><p>图床搭建</p><ul><li>图床网站 <a href="https://sm.ms/home">SM.MS</a></li></ul><p>typora</p><p>上传软件</p><ul><li>upic的使用方法</li></ul><p>Typora中的图床使用方法</p><p>无版权图片</p><p>unsplash 订阅</p><blockquote><p><a href="https://unsplash.com/collections">Beautiful Pictures of the Week | Unsplash</a></p></blockquote><h2 id="Item2-终端软件"><a href="#Item2-终端软件" class="headerlink" title="Item2 终端软件"></a>Item2 终端软件</h2><p>常用配置</p><ul><li>Term = &gt; Make iTerm2 Default Term 设置默认终端</li></ul><p>常用插件</p><ul><li>autojump 记录访问过的所有目录</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install autojump<br></code></pre></td></tr></tbody></table></figure><p>item2 快捷键</p><p>a e u k</p><p>将光标移动到行首：ctrl + a</p><p>将光标移动到行尾：ctrl + e</p><p>清除屏幕：ctrl + l</p><p>搜索以前使用命令：ctrl + r</p><p>清除当前行：ctrl + u</p><p>清除至当前行尾：ctrl + k</p><p>单词为单位移动：option + 方向键</p><p>CTRL+W：删除光标前一个单词（根据空格识别单词分隔）</p><p>CTRL+Y：粘贴之前（CTRL+U/K/W）删除的内容</p><p>ESC+B：光标向左移动一个单词，移动完要放开ESC和B键</p><p>ESC+F：光标向右移动一个单词，移动完要放开ESC和F键</p><p>zsh 配置文件 <code>~/.zshrc</code></p><p>vim .bash_profile</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> showjava=‘ps -ef |grep java’<br><span class="hljs-built_in">alias</span> tom=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Downloads/tomcat/bin;./startup.sh’<br><span class="hljs-built_in">alias</span> killtom=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Downloads/tomcat/bin;./shutdown.sh’<br><span class="hljs-built_in">alias</span> c5=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Desktop/myweb/siang/baiduo’<br><span class="hljs-built_in">alias</span> c6=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Desktop/myweb/banban/banbanjuan’<br><span class="hljs-built_in">alias</span> cdemo=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Desktop/myweb/demo’<br><span class="hljs-built_in">alias</span> ll=‘<span class="hljs-built_in">ls</span> -l’<br><span class="hljs-built_in">alias</span> cs=‘<span class="hljs-built_in">cd</span> /Users/shangfan/shinyway-university’<br><span class="hljs-built_in">alias</span> csf=‘<span class="hljs-built_in">cd</span> /Users/shangfan/shinyway-university/university-frontend/src/main/resources/static’<br><span class="hljs-built_in">alias</span> mc=‘ccc ; mvn clean install’<br><span class="hljs-built_in">alias</span> cmr=‘ccm ; mvn jetty:run’<br><span class="hljs-built_in">alias</span> cwr=‘ccw ; mvn jetty:run’<br><span class="hljs-built_in">alias</span> cvr=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend/chemyun-mall-wx ; mvn jetty:run’<br><span class="hljs-built_in">alias</span> cbr=‘ccb ;mvn jetty:run’<br><span class="hljs-built_in">alias</span> fin=‘mdfind -onlyin .’<br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=‘<span class="hljs-built_in">cd</span> /Users/shangfan/Desktop/print’<br><span class="hljs-built_in">alias</span> reedit=‘vi ~/.bashrc’<br><span class="hljs-built_in">alias</span> reload=‘<span class="hljs-built_in">source</span> ~/.bashrc’<br><span class="hljs-built_in">alias</span> gpl=‘git pull origin’<br><span class="hljs-built_in">alias</span> gb=‘git branch’<br><span class="hljs-built_in">alias</span> gs=‘git status’<br><span class="hljs-built_in">alias</span> gpu=‘git push origin’<br><span class="hljs-built_in">alias</span> ga=‘git add .’<br><span class="hljs-built_in">alias</span> gf=‘git fetch’<br><span class="hljs-built_in">alias</span> gc=‘git commit -m’<br><span class="hljs-built_in">alias</span> gck=‘git checkout’<br><span class="hljs-built_in">alias</span> cb=‘<span class="hljs-built_in">cd</span> /Users/shangfan/IdeaProjects/wetime-backend’<br><span class="hljs-built_in">alias</span> c^\s*(?=\r?$)\nf=‘<span class="hljs-built_in">cd</span> /Users/shangfan/IdeaProjects/wetime-frontend’<br><span class="hljs-built_in">alias</span> ll=‘<span class="hljs-built_in">ls</span> -l’<br><span class="hljs-built_in">alias</span> cmv=‘<span class="hljs-built_in">cd</span> /Users/shangfan/myVue’<br><span class="hljs-built_in">alias</span> ccc=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun’<br><span class="hljs-built_in">alias</span> ccf=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend’<br><span class="hljs-built_in">alias</span> ccw=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend/chemyun-mall-web’<br><span class="hljs-built_in">alias</span> ccv=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend/chemyun-mall-wx/src/main/webapp’<br><span class="hljs-built_in">alias</span> ccb=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend/chemyun-mall-bos’<br><span class="hljs-built_in">alias</span> ccm=‘<span class="hljs-built_in">cd</span> /Users/shangfan/chemyun/chemyun-mall-frontend/chemyun-mall-mall’<br><span class="hljs-built_in">alias</span> f=<span class="hljs-string">'find ./ -name ’</span><br><span class="hljs-string">alias g=’ | xargs grep’</span><br><span class="hljs-string">生效 source ~/.bash_profile</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">上面配置了 oh-my-zsh,所以可以使用 git 命令缩写来操作，缩写配置文件目录如下：<br>~/.oh-my-zsh/plugins/git/.git.plugin.zsh<br><br>基础的缩写命令如下：<br><span class="hljs-built_in">alias</span> | grep <span class="hljs-string">'git'</span>                    // 查看所有git命令别名<br>ga     git add                        // 添加到暂存区<br>gaa    git add -all                   // 添加所有改变到暂存区<br>gst    git status                     // 查看当前仓库状态<br>gss    git status --short(-s)         // 更紧凑地查看状态<br>gsb    git status --short --branch(-sb) // 把分支也显示出来<br>gcam   git commit -a -m                 // 提交所有已经跟踪的文件并输入msg<br>gcmam   git commit --amend -a -m        // 使用一次新的commit，替代上一次提交<br><br>gba    git branch -a                   // 查看所有分支<br>gbvv   git branch -vv                  // 查看本地分支和远程分支对应关系以及最后一个提交版本信息<br>gco    git checkout  [-切换到上一个分支]  // 切换分支<br>gcb    git checkout -b                 // 创建并切换到新分支<br>gbd/gbD    git branch -d/-D            // 删除分支/强制删除<br><br>grv    git remote -v                   // 查看所有远程仓库<br>gl     git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;       // 拉取远程分支并与本地分支合并<br>gp     git push &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;       // 推送本地分支到远程仓库   <br><br></code></pre></td></tr></tbody></table></figure><p>mac host  can/t ioen file for writing</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su<br></code></pre></td></tr></tbody></table></figure><p>su sorry </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo su<br></code></pre></td></tr></tbody></table></figure><h2 id="githun-dns-污染"><a href="#githun-dns-污染" class="headerlink" title="githun dns 污染"></a>githun dns 污染</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br><br>sudo killall -HUP mDNSResponder<br></code></pre></td></tr></tbody></table></figure><h2 id="阿里云盘挂载"><a href="#阿里云盘挂载" class="headerlink" title="阿里云盘挂载"></a>阿里云盘挂载</h2><blockquote><p><a href="https://juejin.cn/post/7004653152012075021">当『Emby、Plex、Jellyfin』遇上『阿里云盘』🎬 - 掘金</a></p><p><a href="https://blog.kimen.com.cn/pages/9b3f3a/#%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF">当『Infuse』遇上『阿里云盘』 🚀 | Kimen’s blog</a></p><p>WebDAV云盘挂载到本地</p><ul><li><a href="https://www.macappbox.com/a/cloudmounter-mac.html">CloundMounter</a> mac 云盘挂载工具</li><li>阿里云盘挂载到本地</li></ul><p><a href="https://blog.fillpit.cn/kai-qi-a-li-yun-pan-de-web-dav-zhi-chi-s/">https://blog.fillpit.cn/kai-qi-a-li-yun-pan-de-web-dav-zhi-chi-s/</a></p></blockquote><p>登录阿里云网页</p><p>在顶上菜单栏点 Application ，然后在左边菜单找到 Local storage 下面的 <a href="https://www.aliyundrive.com/">https://www.aliyundrive.com</a> 这个域名，点到这个域名会看到有一个 token 选项，再点 token ，就找到 refresh_token 了；</p><ul><li>点击右边的token，此时可以看到立main的数据，把其值复制出来即可。（格式为小写字母和数字，不要复制双引号。）</li></ul><p>docker</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">{<span class="hljs-string">"default_sbox_drive_id"</span>:<span class="hljs-string">"56148612"</span>,<span class="hljs-string">"role"</span>:<span class="hljs-string">"user"</span>,<span class="hljs-string">"user_name"</span>:<span class="hljs-string">"1589"</span>,<span class="hljs-string">"need_link"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"expire_time"</span>:<span class="hljs-string">"2021-11-25T05:10:58Z"</span>,<span class="hljs-string">"pin_setup"</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">"need_rp_verify"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"avatar"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"token_type"</span>:<span class="hljs-string">"Bearer"</span>,<span class="hljs-string">"access_token"</span>:<span class="hljs-string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMDZhYTEzMGI1OTM0NmIwYTczMDQxN2VmZTI1M2RmMSIsImN1c3GAkzxTh_8CpzFkcfKTSUG_OJyk_6McNAPUw6fLwTp5WkRzyAT9Jie933-xJiinE5KhK6G2ioO-dttv2DAskUu3f060gEACSo0ADNVl_DYLCkslrEKb2JXPoTA5hr-47LrBfpt1rrMk6xcci1DVQAM5KS0Woj5PMDU0uyic"</span>,<span class="hljs-string">"default_drive_id"</span>:<span class="hljs-string">"46148612"</span>,<span class="hljs-string">"domain_id"</span>:<span class="hljs-string">"bj29"</span>,<span class="hljs-string">"refresh_token"</span>:<span class="hljs-string">"5802ea17b8fb2031aec2469d"</span>,<span class="hljs-string">"is_first_login"</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">"user_id"</span>:<span class="hljs-string">"a06aa130a730417efe253df1"</span>,<span class="hljs-string">"nick_name"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"exist_link"</span>:[],<span class="hljs-string">"state"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"expires_in"</span>:<span class="hljs-number">7200</span>,<span class="hljs-string">"status"</span>:<span class="hljs-string">"enabled"</span>}<br><br>{refresh_token<span class="hljs-string">":"</span><span class="hljs-number">35e203</span>f5fba14303aadebdc092310c39<span class="hljs-string">"}</span><br><span class="hljs-string"></span><br><span class="hljs-string">JSON.parse(window.localStorage.getItem("</span>token<span class="hljs-string">"))["</span>refresh_token<span class="hljs-string">"];</span><br><span class="hljs-string"></span><br><span class="hljs-string"> </span><br><span class="hljs-string">docker run -d --name=webdav-aliyundriver --restart=always -p 8080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e TZ="</span>Asia/Shanghai<span class="hljs-string">" -e ALIYUNDRIVE_REFRESH_TOKEN="</span><span class="hljs-number">5802</span>eabf33304917b8fb2031aec2469d<span class="hljs-string">" -e ALIYUNDRIVE_AUTH_PASSWORD="</span>admin<span class="hljs-string">" -e JAVA_OPTS="</span>-Xmx1g<span class="hljs-string">" zx5253/webdav-aliyundriver </span><br><span class="hljs-string"></span><br><span class="hljs-string">docker run -d \</span><br><span class="hljs-string">    --name=webdav-aliyundriver \</span><br><span class="hljs-string">    --restart=always \</span><br><span class="hljs-string">    -p 8080:8080  \</span><br><span class="hljs-string">    -v /etc/localtime:/etc/localtime \</span><br><span class="hljs-string">    -v /etc/aliyun-driver/:/etc/aliyun-driver/ \</span><br><span class="hljs-string">    -e TZ="</span>Asia/Shanghai<span class="hljs-string">" \</span><br><span class="hljs-string">    -e ALIYUNDRIVE_REFRESH_TOKEN="</span><span class="hljs-number">35e203</span>f5fb92310c39<span class="hljs-string">" \</span><br><span class="hljs-string">    -e ALIYUNDRIVE_AUTH_PASSWORD="</span>admin<span class="hljs-string">" \</span><br><span class="hljs-string">    -e JAVA_OPTS="</span>-Xmx1g<span class="hljs-string">" \</span><br><span class="hljs-string">    zx5253/webdav-aliyundriver</span><br></code></pre></td></tr></tbody></table></figure><p>docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.<br>See ‘docker run –help’</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>sudo service docker restart<br>sudo service docker status <br>sudo docker run hello-world<br></code></pre></td></tr></tbody></table></figure><p>Unable to find image ‘zx5253/webdav-aliyundriver:latest’ locally</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d <br>--name=webdav-aliyundriver <br>--restart=always -p 8080:8080  <br>-v /etc/localtime:/etc/localtime <br>-v /etc/aliyun-driver/:/etc/aliyun-driver/ <br>-e TZ=<span class="hljs-string">"Asia/Shanghai"</span> <br>-e ALIYUNDRIVE_REFRESH_TOKEN=<span class="hljs-string">"your refreshToken"</span> <br>-e ALIYUNDRIVE_AUTH_PASSWORD=<span class="hljs-string">"admin"</span> <br>-e JAVA_OPTS=<span class="hljs-string">"-Xmx1g"</span> <br>zx5253/webdav-aliyundriver <br></code></pre></td></tr></tbody></table></figure><p>其中ALIYUNDRIVE_AUTH_PASSWORD = “admin”中的admin是之后的密码，可以自行更改。ALIYUNDRIVE_REFRESH_TOKEN需要换成自己的token！！！</p><ul><li><a href="http://localhost:8080/">http://localhost:8080/</a> </li><li>admin</li><li>Admin</li></ul><h2 id="Mac使用技巧"><a href="#Mac使用技巧" class="headerlink" title="Mac使用技巧"></a>Mac使用技巧</h2><ul><li>快速搜索软件<ul><li>聚集搜索<ul><li>Mac 自带搜索工具</li></ul></li><li><h2 id="Utool搜索工具"><a href="#Utool搜索工具" class="headerlink" title="Utool搜索工具"></a>Utool搜索工具</h2></li></ul></li><li>快速查单词的方法<ul><li>全局环境下</li><li>局部环境下<ul><li>英文单词命名 vscode</li></ul></li></ul></li><li>命名规则</li><li>状态栏使用技巧</li><li>Dock栏的显示和隐藏</li><li>删除一行</li><li>移动到行头 行尾   </li><li>翻上页  翻下页  </li><li>终端始终获取root权限</li></ul><p>设置常用语</p><p>- </p><p>Option+Command+h键，就能把所有已打开的程序窗口（不包括当前正在运行的应用程序窗口）最小化到Dock栏上。</p><p>解决启动台(launchpad)缺少应用软件图标的bug</p><p>步骤：</p><ol><li>打开Terminal终端机(可以在spotlight找）</li><li>复制并贴上这句命令行，按enter执行</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ~/L*/Application\ Support/Dock/*.db ~/Desktop; killall Dock; <span class="hljs-built_in">exit</span><br></code></pre></td></tr></tbody></table></figure><p>任意输入框中按 「option+shift+K」组合键，就可以召唤出苹果 logo</p><p>按「control+command+空格键」，就召唤出表情包简化版界面进行相关设置</p><h2 id="命令行常用工具"><a href="#命令行常用工具" class="headerlink" title="命令行常用工具"></a>命令行常用工具</h2><p>翻译</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">translate-shell<br>npm install fanyi -g<br>brew install translate-shell<br>trans<br>tldr  say<br></code></pre></td></tr></tbody></table></figure><h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>绕过公证（扩展）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">\Volumes\EFI\Microsoft\Boot\bootmgfw.efi<br>\Volumes\EFI\Microsoft\Boot\bootmgr.efi<br>\Volumes\OSXRESERVED\bootmgr.efi<br>sudo xattr -rd com.apple.quarantine \Applications\xxxxxx.app<br></code></pre></td></tr></tbody></table></figure><h2 id="更改系统默认字体"><a href="#更改系统默认字体" class="headerlink" title="更改系统默认字体"></a>更改系统默认字体</h2><p>更改系统默认字体 | Mac OS X Setup Guide: <a href="https://laoshuterry.gitbooks.io/mac_os_setup_guide/content/3_ChangeDefaultFont.html">https://laoshuterry.gitbooks.io/mac_os_setup_guide/content/3_ChangeDefaultFont.html</a></p><h2 id="Mac-英文字体"><a href="#Mac-英文字体" class="headerlink" title="Mac 英文字体"></a>Mac 英文字体</h2><blockquote><p><a href="https://popdaily.com/my/article/209305">2021超实用35款「英文手写字体」推荐！附上免费下载连结，优美、经典、时尚的英文字体都有～</a></p></blockquote><p><code>Ctrl+上</code>：显示全部桌面及当前桌面的任务（苹果称之为调度中心） <code>Ctrl+左/右</code>：快速切换桌面 <code>Command+Tab</code>：切换应用 <code>Command+空格</code>：打开聚焦搜索（Spotlight） <code>Command+W</code>：关闭当前窗口 <code>Command+H</code>：隐藏当前窗口 <code>Command+Shift+3(#)</code>：截全屏 <code>Command+Shift+4($)</code>：选择截屏 <code>Command+Shift+5(%)</code>：录屏</p><p><em>四指左/右轻扫触控板</em>：向左/右切换桌面；熟练掌握该功能，可以帮你高效的处理多线程工作。</p><p><em>捏拢拇指与其他三指（其实四指也是一样的效果）</em>：唤出启动台；通常用于帮助你快速打开应用</p><p><em>张开拇指与其他三指（或四指）</em>：显示桌面；可以帮你快速隐藏所有任务窗口，回到桌面（通常我们总是把最近需要的文件堆叠在桌面上，所以这个功能也就顺理成章提升了我们从桌面打开新的文件的速度）</p><p><em>四指向上轻扫（与<code>Ctrl+上</code>等效）</em>：唤出调度中心；在同一个桌面开启多个应用窗口时，该操作可以帮你快速定位你要出里的应用窗口。</p><p><em>两只打开合拢</em>：缩放显示的图片、文档或网页等；这是一个在预览器和浏览器上比较常用的功能</p><p>另外还有一个Mac很好用的隐藏触摸板功能，默认是不开启的，就是： <em>将鼠标放在任意打开软件窗口的标题栏位置，用三只在触摸板上游走，可以拖动应用窗口</em>：这个功能可以通过以下步骤开启；<code>右上角苹果-&gt;系统偏好设置-&gt;辅助功能-&gt;鼠标与触控板-&gt;触控板选项-&gt;在启用拖移前面的复选框打钩-&gt;在后面的选择框中选择三只拖移</code></p><h1 id="Mac-软件"><a href="#Mac-软件" class="headerlink" title="Mac 软件"></a>Mac 软件</h1><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="博客工作流"><a href="#博客工作流" class="headerlink" title="博客工作流"></a>博客工作流</h3><p>编辑工具：typora</p><p>文字设置：</p><p>- </p><p>图片设置:</p><ul><li>表情 ==&gt;</li><li>截图 ==&gt; 编辑截图  ==&gt; 本地文件 =&gt; 上传 ==&gt; </li><li>Gif图 ==&gt;</li><li>流程图 ==&gt; </li><li>思维导图 ==&gt;</li></ul><p>字体</p><p>- </p><p>图片</p><ul><li>网络图片 <ul><li>无版权</li></ul></li></ul><p>图标</p><p>- </p><p>同步方法</p><p>- </p><h3 id="笔记工作流"><a href="#笔记工作流" class="headerlink" title="笔记工作流"></a>笔记工作流</h3><p>- </p><h3 id="阅读工作流"><a href="#阅读工作流" class="headerlink" title="阅读工作流"></a>阅读工作流</h3><h3 id="开发工作流"><a href="#开发工作流" class="headerlink" title="开发工作流"></a>开发工作流</h3><h2 id="Google浏览器"><a href="#Google浏览器" class="headerlink" title="Google浏览器"></a>Google浏览器</h2><ul><li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans&amp;co=GENIE.Platform=Desktop#zippy=%2C%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%92%8C%E7%AA%97%E5%8F%A3%E5%BF%AB%E6%8D%B7%E9%94%AE%2Cgoogle-chrome-%E5%8A%9F%E8%83%BD%E5%BF%AB%E6%8D%B7%E9%94%AE%2C%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%BF%AB%E6%8D%B7%E9%94%AE%2C%E7%BD%91%E9%A1%B5%E5%BF%AB%E6%8D%B7%E9%94%AE%2C%E9%BC%A0%E6%A0%87%E5%BF%AB%E6%8D%B7%E9%94%AE">Chrome 键盘快捷键 - 计算机 - Google Chrome帮助</a><ul><li>关闭其他标签页 alt shift + w</li><li>扩展插件 快捷键</li><li>m h q w</li><li>显示或隐藏书签栏⌘ + Shift + b</li><li>y f g ,</li><li>跳转到特定标签页⌘ + 1 到 ⌘ + 8<br>跳转到最后一个标签页⌘ + 9</li><li>跳转到下一个打开的标签页⌘ + Option + 向右箭头键Ctrl + Tab 或 Ctrl + PgDn</li><li>跳转到上一个打开的标签页⌘ + Option + 向左箭头键</li><li>开启或关闭全屏模式⌘ + Ctrl + fF11</li><li>向下滚动网页，一次一个屏幕空格键空格键或 PgDn</li><li>向上滚动网页，一次一个屏幕Shift + 空格键Shift + 空格键或 PgUp</li><li>在新的后台标签页中打开链接按住 ⌘ 键的同时点击链接按住 Ctrl 键的同时点击链接</li><li>打开链接，并跳转到该链接按住 ⌘ + Shift 键的同时点击链接</li></ul></li><li>Google插件推荐<ul><li>彩云小译</li></ul></li><li><a href="https://juejin.cn/post/6844904079903195150">提升 Chrome 使用效率的 30个快捷键、16个扩展插件与 11个前端调试方法 - 掘金</a></li><li>高级搜索应用：<a href="https://www.google.com.hk/advanced_search">Google 高级搜索</a></li><li>聚合搜索方式： <a href="https://programmablesearchengine.google.com/controlpanel/all">可编程搜索 - 所有搜索引擎</a></li><li>自定义搜索引擎：<a href="https://github.com/searx/searx">searx/searx: Privacy-respecting metasearch engine</a></li><li>站内搜索网站</li><li>多语网页搜索的方法：<ul><li>自动翻译搜索各种语言并实现网页聚合显示</li></ul></li><li>SEO个人评分机制</li></ul><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/188499395">在VSCode里面配置Vim的正确姿势（细节解析） - 知乎</a></li></ul><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><ul><li><p><a href="https://juejin.cn/post/7010985866185146399">图床，uPic和阿里oss搭建与使用 - 掘金</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/108819269">2020国内能用的图床集合 - 知乎</a></p><ul><li><p>Github</p></li><li><p>SM.MS</p></li><li><p>Gitee</p></li><li><p>阿里OSS</p><ul><li><h3 id="OSS阿里云-OSS是什么意思-对象储存OSS-阿里云OSS学习路径图-OSS-Learning-Path-阿里云"><a href="#OSS阿里云-OSS是什么意思-对象储存OSS-阿里云OSS学习路径图-OSS-Learning-Path-阿里云" class="headerlink" title="OSS阿里云_ OSS是什么意思_对象储存OSS_阿里云OSS学习路径图_OSS Learning Path - 阿里云"></a><a href="https://help.aliyun.com/learn/learningpath/oss.html?spm=5176.8465980.guide.1.412314505QMC3F">OSS阿里云_ OSS是什么意思_对象储存OSS_阿里云OSS学习路径图_OSS Learning Path - 阿里云</a></h3></li><li><p><a href="https://blog.svend.cc/upic/tutorials/aliyun_oss/">uPic 图床配置教程 - 阿里云 - Svend’s Blog</a></p></li></ul></li></ul></li></ul><h2 id="Snipaste截图"><a href="#Snipaste截图" class="headerlink" title="Snipaste截图"></a>Snipaste截图</h2><p>快捷键 </p><ul><li>f1  截屏</li><li>win f1 截图并复制</li><li>f3  贴图</li></ul><p><img src="https://i.loli.net/2021/11/27/kdgQNMm9EfzlLAO.png" alt="Snipaste快捷键"></p><p>设置图片位置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Users/administrator/Pictures/Snipaste_<span class="hljs-variable">$yyyy</span>-MM-dd_HH-mm-ss$.png<br>/Users/administrator/Pictures/Snipaste_2021-11-27_17-35-33.png<br></code></pre></td></tr></tbody></table></figure><h2 id="图片编辑工具"><a href="#图片编辑工具" class="headerlink" title="图片编辑工具"></a>图片编辑工具</h2><ul><li>mac 自带的截图工具,</li></ul><h2 id="LICEcap-Gif"><a href="#LICEcap-Gif" class="headerlink" title="LICEcap-Gif"></a>LICEcap-Gif</h2><ul><li>Gif软件<ul><li>ReCord 开始记录</li><li>pause 停止</li><li>stop 结束</li></ul></li></ul><p><img src="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/9iRADR.png" alt="9iRADR"></p><h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><ul><li>ctrl + space 输入法切换</li><li>shift 大小写</li><li>特殊需求 输入中文  <ul><li>英文注音-中文字体</li></ul></li></ul><p>在查词方式的多样性上，原生词典是第三方应用无法超越的。目前在 macOS 上，我们可以利用以下途径调用原生词典查单词。</p><ol><li>触控板：选中单词后，用力点按（可在 系统偏好设置 - 触控板 中修改）；</li><li>右键：选中单词后右键，选择「查询……」；</li><li>聚焦搜索：唤醒聚焦搜索后，输入或粘贴单词即可查询；</li></ol><blockquote><p><a href="https://sspai.com/post/43155">https://sspai.com/post/43155</a></p></blockquote><p>输入法高效输入</p><p>1.Tab+部首 可以显示对应偏旁的字 适用于需要翻好几页的生僻字 例如:娴（xian二声）</p><p>2两个字音中间加’ 适用于第二个字是an ang之类的词语 例如:西安</p><p>ctrl + h 定位到首字母</p><p>先先</p><p>s</p><p>3.u模式 </p><p>u+各个部分的读音 例如犇（ben一声)<br>或者<br>u+笔画 例如:upn乄（wu三声）<br>适用于知道怎么写但不知道念什么的字<br>4.v模式<br>v+数字可以显示数字的各种形式<br>v+算式可以直接得到结果<br>5.简写<br>rq得到日期 xq得到星期几 sj得到具体时间<br>6.固定首位<br>光标移到短语下跳出固定首位点击可以让他每次都出现在第一个<br>7.添加快捷短语<br>可以将快递地址 个人信息这种添加为一个快捷短语 输入对应信息就可以跳出来</p><p>全拼输入法</p><p>双拼输入法： 将声母和韵母各用一个字母表示</p><ul><li>声母 + 韵母</li><li>双拼输入法方案<ul><li>智能ABC</li><li>拼音加加</li><li>微软双拼</li><li>自然码</li><li>小鹤双拼</li><li>搜狗双拼</li><li>国标双拼</li></ul></li><li>特殊规则：无声母情况</li></ul><p>五笔输入法</p><h2 id="Paste"><a href="#Paste" class="headerlink" title="Paste"></a>Paste</h2><ul><li>alt + C + shift</li><li>alt + V + shift</li></ul><p><img src="https://i.loli.net/2021/11/27/ezfRAvdWBNqDVj2.png" alt="image-20211127201119473"></p><h2 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a>Magnet</h2><p>分屏软件 </p><ul><li>ctrl  + win + 左右上下</li><li>ctrl + win + U I J K</li><li>ctrl + win + DEFTG 1/3<ul><li>DFG 1/3 </li><li>ET  2/3</li></ul></li><li>最大 ： ctrl + win + 回车键</li><li>居中： ctrl + win + C </li><li>还原： ctrl + wn +  backsoace</li><li>最小化 alt + m</li></ul><p><img src="https://i.loli.net/2021/11/27/GescdKNZlLj4ipf.png" alt="magnet快捷键"></p><h2 id="KeyCure"><a href="#KeyCure" class="headerlink" title="KeyCure"></a>KeyCure</h2><ul><li><p>长按 alt(command)</p></li><li><p>设置 激活动作</p><ul><li>触发 =&gt; 动作 </li><li>左键短击 是点击图标</li><li></li></ul></li></ul><p>![image-20211127220001756](/Users/administrator/Library/Application Support/typora-user-images/image-20211127220001756.png)</p><p>动作</p><ul><li>快捷键</li><li>网址集合 可以设置常用的网址</li><li>文件夹 可以设置指定文件夹 </li><li>表情</li><li>缩略语 设置</li></ul><p>自定义设置</p><ul><li>ctrl + ctrl = emoji</li><li>win + win = 文件夹</li></ul><p>![截屏2022-06-1214.47.08](<a href="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-06-12">https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/截屏2022-06-12</a> 14.47.08.png)</p><h2 id="Bartender-4"><a href="#Bartender-4" class="headerlink" title="Bartender 4"></a>Bartender 4</h2><p>状态栏显示软件 设置状态栏图标的显示和隐藏</p><h2 id="uTool"><a href="#uTool" class="headerlink" title="uTool"></a>uTool</h2><ul><li>右击长按</li><li>option + space 启动</li></ul><h2 id="聚合搜索"><a href="#聚合搜索" class="headerlink" title="聚合搜索"></a>聚合搜索</h2><ul><li>alt + 空格</li><li>使用</li></ul><h2 id="notion"><a href="#notion" class="headerlink" title="notion"></a>notion</h2><h2 id="KAP"><a href="#KAP" class="headerlink" title="KAP"></a>KAP</h2><p>免费、功能全的 macOS 录屏工具</p><p>Kap 是 macOS 平台上一款开源的录屏工具，使用也比较简单：通过菜单栏中的 Kap 或者快捷键打开软件的录制工具栏，选好录制模式后点击中间的开始按钮就可以开始录屏。</p><p>Kap 支持三种录制模式：</p><ul><li>自定义录制区域</li><li>录制指定的应用程序窗口</li><li>录制屏幕</li></ul><h2 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a>draw.io</h2><p>如何绘制好看的图片</p><ul><li>流程图 draw.io </li><li>ps </li><li>Sketch</li><li>Figma</li><li>Keynote</li></ul><p>保存流程</p><ul><li>保存 =&gt; 导出为图片 =&gt; 上传到图床</li></ul><p><img src="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/TEST%E7%BB%98%E5%9B%BE.drawio.png" alt="TEST绘图.drawio"></p><h2 id="番茄闹钟"><a href="#番茄闹钟" class="headerlink" title="番茄闹钟"></a>番茄闹钟</h2><ul><li>每个小时细分为两个番茄时钟</li><li>番茄钟软件</li></ul><h2 id="thing"><a href="#thing" class="headerlink" title="thing"></a>thing</h2><p>管理每年每月每天的目标</p><p>目标细化管理软件</p><h2 id="xmind"><a href="#xmind" class="headerlink" title="xmind"></a>xmind</h2><p>在列好写作大纲后，即可开始专注于内容输出。这时候就可以用到上文介绍的 Markdown 语法了。XMind 支持导出 Markdown 格式，你可以直接打开 Markdown 编辑器，在列好的大纲直接进行内容的填充。</p><p>细化每个目标</p><p>长时间不息屏</p><ul><li>xmind 导出 ==&gt; 上传到云图</li></ul><h2 id="gitmind"><a href="#gitmind" class="headerlink" title="gitmind"></a>gitmind</h2><ul><li>xmind iframe 框架</li></ul><h2 id="启动台"><a href="#启动台" class="headerlink" title="启动台"></a>启动台</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock springboard-columns -int 7 <br><br>defaults write com.apple.dock springboard-rows -int 7 <br><br>defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock <br><br><br>// 恢复默认<br>defaults write com.apple.dock springboard-rows Default<br>defaults write com.apple.dock springboard-columns Default<br>defaults write com.apple.dock ResetLaunchPad -bool TRUE<br>killall Dock<br></code></pre></td></tr></tbody></table></figure><h2 id="lateX"><a href="#lateX" class="headerlink" title="lateX"></a>lateX</h2><blockquote><p><a href="https://wh0.is/p/%E5%9C%A8mac%E4%B8%8A%E7%94%A8vscode%E8%B6%85%E9%A1%BA%E6%BB%91%E5%86%99%E4%BD%9Clatex%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E5%86%99%E4%BD%9C/">在Mac上用VScode超顺滑写作LaTex｜从安装到写作</a></p><p><a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版 | 始终</a></p></blockquote><p>方案</p><ul><li>MacTeX+Sublime+Skim(3G)</li><li>BasicTex(700M)</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew update<br>brew install --cask basictex<br></code></pre></td></tr></tbody></table></figure><p>Latex pdf markdown</p><h2 id="Bob"><a href="#Bob" class="headerlink" title="Bob"></a>Bob</h2><ul><li>OCR工具</li></ul><h2 id="Afred"><a href="#Afred" class="headerlink" title="Afred"></a>Afred</h2><ul><li>如何打开当前目录的终端</li></ul><blockquote><ul><li><input disabled="" type="checkbox"> <a href="https://sspai.com/post/32979">从零开始学习 Alfred：基础功能及设置 - 少数派</a></li><li><input checked="" disabled="" type="checkbox"> <a href="http://louiszhai.github.io/2018/05/31/alfred/">Alfred神器使用手册 | louis blog</a></li><li><input disabled="" type="checkbox"> <a href="https://ihtcboy.com/2020/02/09/2020-02-09_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9A%E9%AB%98%E6%95%88Alfred%E8%BF%9B%E9%98%B6/">程序员的macOS系列：高效Alfred进阶 | iHTCboy’s blog</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://opensourcelibs.com/libs/alfred-workflow">306+ Best Alfred Workflow Open Source Software Projects</a></li></ul></blockquote><p><img src="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/MaaZXb.png"></p><p>基本</p><ul><li><p>wq 自定义搜索</p></li><li><p>通过<code>'</code>或 <code>spacebar</code>空格键可以可以快速查找文件</p></li><li><p>op(open) 打开文件</p></li><li><p>find(fd) 快速打开文件所在的文件夹</p></li><li><p>in 在文件内搜索内容 in + 文件内容的搜索词</p></li><li><p><code>/</code>：在 Alfred 输入栏中首先输入“/”，会带你进入 macOS根目录；</p></li><li><p><code>~</code>：在 Alfred 输入栏中首先输入“~”，会带你进入当前的用户目录；</p></li><li><p><code>Filtering</code> 启动模糊搜索。比如有一些目录可能我们不记得，例如 Documents、Desktop、Downloads 目录，我们可以搜索 <code>d*n</code>，用<code>*</code> 来进行模糊搜索。</p><ul><li>逆序排列，快捷键：<code>⇧Shift + ⌘Command + S</code></li><li>隐藏预览面板，快捷键：<code>⇧Shift + ⌘Command + I</code></li></ul></li><li><p>df 字典</p></li><li><p><code>&gt;</code> ls 直接唤起终端</p></li><li><p>Action</p><ul><li>alt + win + \</li></ul></li><li><p>Web bookmarks 前缀<code>w</code>为搜索书签。</p></li><li><p>Clipboard History（剪切版历史） win alt + c  <code>alt + commaand + C</code>）打开<code>剪切版历史视图</code>：</p></li></ul><p><code>erging</code>（合并） 比如你复制了三段文本，可以你需要把它们组合成一段话，默认情况下需要你按3次快捷键，但是如果你勾选了这个 <code>Merging</code> 功能，就可以实现快速的合并一段剪切的内容。具体的使用也很简单，勾选 Merging 标签的 <code>Fast append selected text</code>后就可以，剪切的文本，默认是 <code>⌘ + C</code> 剪切一次，再按一次 <code>⌘ + C</code>（按住<code>⌘</code>不动，再按下<code>C</code>键），就是触发合并操作，此时的剪切的内容会与上一次剪切的内容合并为一个。合并内容的格式可以选择是用空格、换行或者不分隔的方式来分隔文本的</p><p>字典</p><ul><li><p><code>Screen Saver</code>（显示待机屏幕）、<code>Empty Trash</code>（清空回收站）、<code>Log Out</code>（登出当前用户）、<code>Sleep</code>（睡眠模式）、<code>Sleep Displays</code>（关闭屏幕显示）、<code>Lock</code>（锁屏）、 <code>Restart</code>（重启）、<code>Shut Down</code>（关机）、<code>Volume Up</code>（增加音量）、<code>Volume Down</code>（减少音量）、<code>Toggle Mute</code>（静音）等快捷命令。</p></li><li><p>针对应用程序可以：<code>Hide</code>（隐藏）、<code>Quit</code>（退出程序）、<code>Force Quit</code>（强制退出）、<code>Quit All</code>（退出所有程序）。</p></li><li><p>Large Type（放大镜风格）</p><ul><li><p>一个手指直接点击，类似Windows中鼠标左键功能，同时在<a href="https://www.zhihu.com/search?q=%E8%8B%B9%E6%9E%9CSafari&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:35557703%7D">苹果Safari</a>等浏览器中，这个手势还支持快速查询功能；</p></li><li><p>一个手指轻轻点击，可以选中目标；</p></li><li><p>两个手指同时点击，类似Windows中鼠标右键功能；</p></li><li><p>两个手指上下拖移滑动,，即可实现翻页；</p></li><li><p>两个手指分开或捏合，可以放大缩小图片、网页等内容；</p></li><li><p>两个手指旋转，可以旋转图片等对象；</p></li><li><p>两个手指从触控板右侧边缘向左滑动，可以调出通知窗口；</p></li><li><p>两个手指在网页中左右滑动，可以推出或前进网页；</p></li><li><p>三个手指左右滑动，可以在全屏应用桌相互切换；</p></li><li><p>三个手指向上滑动，可以打开所有正在使用的软件窗口；</p></li><li><p>三个手指向下滑动，可以打开同一个软件的不同窗口；</p></li><li><p>四个手指同时捏合，可以调出<a href="https://www.zhihu.com/search?q=%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%AA%97%E5%8F%A3&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:35557703%7D">应用程序窗口</a>；</p></li><li><p>四个手指同时张开，可以显示桌面；</p></li></ul></li><li><p>nfo + 空格+文件名.后缀</p></li></ul><p>workflow</p><ul><li>App Store：app mas </li><li>翻译：yd、cc</li><li>Recent Document/App: ra rr rd（） rfw(最近文件夹)</li><li>colors: c hsl rgb #</li><li>dash api 查询： dash、编程语言名</li><li>codervar: xt dt xh cl zh</li><li>豆瓣： dbb dbm dby</li><li>emoji</li><li>faker: faker 随机</li><li>ip </li><li>kill</li><li>new</li></ul><p>Window Search</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">掘金搜索：`alfred://customsearch/Search%20Juejin%20for%20%27%7Bquery%7D%27/jj/utf8/nospace/https%3A%2F%2Fjuejin.im%2Fsearch%3Ftype%3Dall%26query%3D%7Bquery%7D`<br><br>简书搜索：`alfred://customsearch/Search%20Jianshu%20for%20%27%7Bquery%7D%27/js/utf8/nospace/https%3A%2F%2Fwww.jianshu.com%2Fsearch%3Futf8%3D%25E2%259C%2593%26q%3D%7Bquery%7D`<br><br>微信文章：`alfred://customsearch/Search%20Weixin%20for%20%27%7Bquery%7D%27/gzh/utf8/nospace/https%3A%2F%2Fweixin.sogou.com%2Fweixin%3Ftype%3D2%26query%3D%7Bquery%7D`<br><br>知乎内容：`alfred://customsearch/Search%20Zhihu%20for%20%27%7Bquery%7D%27/zh/utf8/nospace/https%3A%2F%2Fwww.zhihu.com%2Fsearch%3Ftype%3Dcontent%26q%3D%7Bquery%7D`<br><br>苹果文档：`alfred://customsearch/Search%20%EF%A3%BFDeveloper%20for%20%27%7Bquery%7D%27/ad/utf8/nospace/https%3A%2F%2Fdeveloper.apple.com%2Fsearch%2F%3Fq%3D%7Bquery%7D`<br><br>淘宝搜索：`alfred://customsearch/Search%20Taobao%20for%20%27%7Bquery%7D%27/tb/utf8/nospace/https%3A%2F%2Fs.taobao.com%2Fsearch%3Foe%3Dutf-8%26f%3D8%26q%3D%7Bquery%7D`<br><br>京东搜索：`alfred://customsearch/Search%20JD%20for%20%27%7Bquery%7D%27/jd/utf8/nospace/https%3A%2F%2Fsearch.jd.com%2FSearch%3Fenc%3Dutf-8%26keyword%3D%7Bquery%7D`<br><br>GitHub：`alfred://customsearch/Search%20Github%20for%20%27%7Bquery%7D%27/sh/utf8/nospace/https%3A%2F%2Fgithub.com%2Fsearch%3Futf8%3D%25E2%259C%2593%26q%3D%7Bquery%7D`<br><br>StackOverflow：`alfred://customsearch/Search%20StackOverflow%20for%20%27%7Bquery%7D%27/so/utf8/nospace/https%3A%2F%2Fwww.stackoverflow.com%2Fsearch%3Fq%3D%7Bquery%7D`<br>https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;ch=&amp;tn=baidu&amp;bar=&amp;wd={query}<br></code></pre></td></tr></tbody></table></figure><h2 id="AltTab"><a href="#AltTab" class="headerlink" title="AltTab"></a>AltTab</h2><p>win + tab</p><ul><li>按⌥ option+ ⇥ tab显示缩略图。</li><li>按住⌥ option并⇥ tab选择下一个缩略图。</li><li>按住⌥ option并按⇧ shift+ ⇥ tab选择上一个缩略图。</li><li>释放⌥ option以将焦点切换到窗口。</li><li>额外：</li><li>您将鼠标悬停并单击 ️ mouse。</li><li>您使用⇦ <a href="https://www.zhihu.com/search?q=left+arrow&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:134612491%7D">left arrow</a>和循环⇨ right arrow。</li><li>您可以用取消⎋ escape。</li></ul><p>PD Runner 正在尝试安装新帮助程序工具</p><ul><li><p>打开PD Runner时提示，“PD Runner 正在尝试安装新帮助程序工具”，需要输入密码，输入密码后提示“帮助程序安装失败，Error Domain=CFErrorDomainLaunchd Code=4 “(null)””</p></li><li><p>运行了<code>sudo launchctl enable system/com.lihaoyun6.PD-Runner-Helper</code>也没反应<br>用其它工具卸载了再重装也不行</p></li></ul><p>安装emby</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull emby/embyserver:latest<br><br><br>docker run -d \<br>--name emby \<br>--restart=always \<br>-v /home/docker/emby/config:/config \<br>-v /home/docker/emby/share1:/mnt/share1 \<br>-v /home/docker/emby/share2:/mnt/share2 \<br>-p 1900:1900 \<br>-p 7359:7359 \<br>-p 7359:7359/udp \<br>-p 8096:8096 \<br>-p 8920:8920 \<br>--<span class="hljs-built_in">env</span> UID=1000 \<br>--<span class="hljs-built_in">env</span> GID=100 \<br>emby/embyserver:latest<br><br>docker run -d \<br>--name emby \<br>--restart=always \<br>-v /home/docker/emby/config:/config \<br>-v /home/docker/emby/share1:/mnt/share1 \<br>-v /home/docker/emby/share2:/mnt/share2 \<br>-p 1900:1900 \<br>-p 7359:7359 \<br>-p 7359:7359/udp \<br>-p 8096:8096 \<br>-p 8920:8920 \<br>--<span class="hljs-built_in">env</span> UID=1000 \<br>--<span class="hljs-built_in">env</span> GID=100 \<br></code></pre></td></tr></tbody></table></figure><p>用快捷键找到library目录，快捷键「shift+cmmand+g」，输入【/library】。</p><h2 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h2><p>笔记软件</p><blockquote><p><a href="https://www.bilibili.com/video/BV18a411r7mt?from=search&amp;seid=12050054948125981762&amp;spm_id_from=333.337.0.0">也许是B站最好的Obsidian新手教程！爆肝30天，一站式入门双向链接笔记软件_哔哩哔哩_bilibili</a></p></blockquote><h2 id="ublacklisl"><a href="#ublacklisl" class="headerlink" title="ublacklisl"></a>ublacklisl</h2><blockquote><p><a href="https://github.com/eallion/uBlacklist-subscription-compilation">eallion/uBlacklist-subscription-compilation: 🚫 uBlacklist subscription compilation 订阅合集</a></p><p><a href="https://github.com/cobaltdisco/Google-Chinese-Results-Blocklist">Cobaltdisco/Google-Chinese-Results-Blocklist: 我终于能用谷歌搜中文了……</a></p><p><a href="https://github.com/Aierklk/uBlacklist-blacklist">Aierklk/uBlacklist-blacklist: 使用uBlacklist插件对域名进行屏蔽</a></p></blockquote><h2 id="uPic"><a href="#uPic" class="headerlink" title="uPic"></a>uPic</h2><ul><li><a href="https://blog.svend.cc/upic/">简洁的 Mac 图床客户端 uPic - Svend’s Blog</a></li></ul><p>上传方式</p><p>![截屏2022-06-1214.01.48](<a href="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-06-12">https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/截屏2022-06-12</a> 14.01.48.png)</p><p>截图上传方法</p><ul><li>cmd + shift + 4 + 空格 拖动 图片到upic，然后获取图片（空格获取窗口）</li><li>将图片复制到剪贴板中然后自动上传图片 cmd + shift + 4 + ctrl + 空格 （ctrl获取到剪贴板）<ul><li>然后点击图标从剪贴板上传图片</li></ul></li></ul><p><img src="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/PiUKYN.png" alt="PiUKYN"></p><p>设置自定义快捷键</p><ul><li>cmd + shift + 6  截图上传</li></ul><p>![截屏2022-06-1214.05.36](<a href="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-06-12">https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/截屏2022-06-12</a> 14.05.36.png)</p><p>高级设置</p><ul><li>设置快捷键<ul><li>自动截图上传</li></ul></li></ul><p>![截屏2022-06-1214.05.36](<a href="https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-06-12">https://cscbucket.oss-cn-hangzhou.aliyuncs.com/uPic/截屏2022-06-12</a> 14.05.36.png)</p><h2 id="Amphetamine"><a href="#Amphetamine" class="headerlink" title="Amphetamine"></a>Amphetamine</h2><p>免睡眠实用程序</p><h2 id="clash-x-pro-ap"><a href="#clash-x-pro-ap" class="headerlink" title="clash x pro .ap"></a>clash x pro .ap</h2><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="Donie"><a href="#Donie" class="headerlink" title="Donie"></a>Donie</h2><h2 id="ishot"><a href="#ishot" class="headerlink" title="ishot"></a>ishot</h2><h2 id="keycue"><a href="#keycue" class="headerlink" title="keycue"></a>keycue</h2><h2 id="keynote"><a href="#keynote" class="headerlink" title="keynote"></a>keynote</h2><h2 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h2><h2 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h2><h2 id="moom"><a href="#moom" class="headerlink" title="moom"></a>moom</h2><h2 id="numbers"><a href="#numbers" class="headerlink" title="numbers"></a>numbers</h2><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><h2 id="omnigraffle-标注"><a href="#omnigraffle-标注" class="headerlink" title="omnigraffle 标注"></a>omnigraffle 标注</h2><p>绘制流程图</p><h2 id="reader"><a href="#reader" class="headerlink" title="reader"></a>reader</h2><h2 id="sketch"><a href="#sketch" class="headerlink" title="sketch"></a>sketch</h2><p>管理原型图</p><p>- </p><h2 id="sourcetree"><a href="#sourcetree" class="headerlink" title="sourcetree"></a>sourcetree</h2><p>- </p><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><ul><li><p>Echart  折线图</p></li><li><p><strong>ProcessOn</strong></p><p><strong><a href="https://link.zhihu.com/?target=https://www.processon.com/">https://www.processon.com/</a></strong></p></li></ul><h2 id="Transmit"><a href="#Transmit" class="headerlink" title="Transmit"></a>Transmit</h2><h2 id="Theine"><a href="#Theine" class="headerlink" title="Theine"></a>Theine</h2><h2 id="Things"><a href="#Things" class="headerlink" title="Things"></a>Things</h2><h2 id="StickyWidgetMemo"><a href="#StickyWidgetMemo" class="headerlink" title="StickyWidgetMemo"></a>StickyWidgetMemo</h2><h2 id="Tencent-Lemon"><a href="#Tencent-Lemon" class="headerlink" title="Tencent Lemon"></a>Tencent Lemon</h2><ul><li>腾讯柠檬 推荐官网下载 苹果商城不完全</li></ul><h2 id="Typeface"><a href="#Typeface" class="headerlink" title="Typeface"></a>Typeface</h2><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><h2 id="yoink"><a href="#yoink" class="headerlink" title="yoink"></a>yoink</h2><h2 id="zotero"><a href="#zotero" class="headerlink" title="zotero"></a>zotero</h2>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客必备黑苹果安装适配指南</title>
      <link href="/%E7%88%B1%E5%A5%BD%E7%AF%87/%E9%BB%91%E8%8B%B9%E6%9E%9C.html"/>
      <url>/%E7%88%B1%E5%A5%BD%E7%AF%87/%E9%BB%91%E8%8B%B9%E6%9E%9C.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hackintoch"><a href="#Hackintoch" class="headerlink" title="Hackintoch"></a>Hackintoch</h1><blockquote><p>网站推荐</p><ul><li><a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></li><li><a href="http://imacos.top/">黑果屋 – 黑苹果屋—Hackintosh|黑苹果单双系统安装全套完整教程资源软件下载</a></li><li><a href="https://macx.top/">苹果地带</a></li><li><a href="https://github.com/tunglamvghy/AsusS530UN-hackintosh">AsusS530UN-hackintosh: Install macOS BigSur/Monterey on laptop ASUS Vivobook S530UN</a></li><li><strong><a href="https://github.com/tunglamvghy/AsusS530UN-hackintosh"> AsusS530UN-hackintosh</a></strong></li><li><a href="https://github.com/Jie2GG/Hackintosh-ASUS-S5300FN">Hackintosh-ASUS-S5300FN</a></li></ul><p>教程推荐：</p><ul><li><a href="https://apple.sqlsec.com/">国光的黑苹果安装教程</a></li><li><a href="https://szhshp.org/tech/2021/01/17/hackintonishinandroid">优雅地 Hack 一台黑苹果</a></li></ul></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>基础</p><p>UEFI</p><ul><li>UEFI 是 Unified Extensible Firmware Interface（统一可扩展固件接口），可以让 PC 从预启动的操作环境，加载到操作系统上。大家可以理解为 UEFI 是一种系统引导方式，基本上 2010 年后的电脑都是支持 UEFI 引导方式的。</li><li>UEFI 引导常配合 GPT 分区表来使用，在 DiskGenius 中，选中磁盘，右键选【转换分区表类型为 GUID 格式】即可将磁盘转换为 GPT 分区表。</li></ul><p>ESP</p><ul><li>ESP引导分区（分区必须&gt;200M）</li><li>ESP分区：EFI system partition，该分区用于采用了EFI BIOS的电脑系统，用来启动操作系统。分区内存放引导管理程序、驱动程序、系统维护工具等。如果电脑采用了EFI系统，或当前磁盘用于在EFI平台上启动操作系统，则应建议ESP分区。</li></ul><p>GUID vs MBR</p><ul><li>磁盘分区格式有两种：GUID(GPT 全局唯一标识磁盘分区表 )和MBR(主引导记录)</li><li>MBR分区表：Master Boot Record，即硬盘主引导记录分区表，存在于磁盘驱动器开始部分的一个特殊的启动扇区。这个扇区包含了已安装的操作系统系统信息，并用一小段代码来启动系统，只支持容量在 2.1TB 以下的硬盘，超过2.1TB的硬盘只能管理2.1TB，最多只支持4个主分区或三个主分区和一个扩展分区，扩展分区下可以有多个逻辑分区。<ul><li>启动主板自带的BIOS系统，bios加载MBR，MBR再启动Windows</li></ul></li><li>GPT分区表：GPT，全局唯一标识分区表(GUID Partition Table)，与MBR最大4个分区表项的限制相比，GPT对分区数量没有限制，但Windows最大仅支持128个GPT分区，GPT可管理硬盘大小达到了18EB。只有基于UEFI平台的主板才支持GPT分区引导启动<ul><li>启动方式：使用UEFI启动的磁盘组织方式</li><li>GPT分区表下的隐藏分区： ESP分区：EFI system partition，该分区用于采用了EFI BIOS的电脑系统，用来启动操作系统。分区内存放引导管理程序、驱动程序、系统维护工具等。如果电脑采用了EFI系统，或当前磁盘用于在EFI平台上启动操作系统，则应建议ESP分区。MSR分区：即微软保留分区，是GPT磁盘上用于保留空间以备用的分区，例如在将磁盘转换为动态磁盘时需要使用这些分区空间。</li></ul></li></ul><table><thead><tr><th align="left">名词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>Hackintosh</strong></td><td align="left">将 macOS 安装到非苹果官方 PC 的过程，请注意<strong>Hackintosh 不是操作系统</strong></td></tr><tr><td align="left"><strong>Bootloader</strong></td><td align="left">加载操作系统的软件，通常由操作系统创建者制作</td></tr><tr><td align="left"><strong>Boot Manager</strong></td><td align="left">管理引导加载程序的软件比如：Clover、OpenCore 等</td></tr><tr><td align="left"><strong>Clover</strong></td><td align="left">被 OpenCore 逐步替代的一个引导方式</td></tr><tr><td align="left"><strong>OpenCore</strong></td><td align="left">由<a href="https://github.com/acidanthera">Acidanthera 团队</a>在打造的 Hackintosh 新的更完美的引导方式</td></tr><tr><td align="left"><strong>ACPI</strong></td><td align="left">高级配置和电源接口 ，可以让系统更好的识别硬件信息</td></tr><tr><td align="left"><strong>DSDT/SSDT</strong></td><td align="left">ACPI 中的表格，描述设备以及操作系统应如何与它们交互</td></tr><tr><td align="left"><strong>.AML</strong></td><td align="left">ACPI 的编译文件格式</td></tr><tr><td align="left"><strong>.DSL</strong></td><td align="left">ACPI 的源代码文件</td></tr><tr><td align="left"><strong>Kexts</strong></td><td align="left">全程叫 <strong>K</strong>ernel <strong>Ext</strong>ensions 内核扩展，我们国内可以通俗的翻译为驱动</td></tr><tr><td align="left"><strong>BIOS</strong></td><td align="left">基本输出输入系统，可以通俗的理解为主板的操作系统</td></tr><tr><td align="left"><strong>UEFI</strong></td><td align="left">统一可扩展固件接口，可以让 PC 从预启动的操作环境，加载到操作系统上</td></tr><tr><td align="left"><strong>UEFI 驱动</strong></td><td align="left">与任何其他操作系统一样，UEFI 具有驱动程序，它们由 Clover 或 OpenCore 加载</td></tr><tr><td align="left"><strong>NVRAM</strong></td><td align="left">非易失性随机访问存储器，主板自带的，UEFI 启动的时候会先加载 NVRM</td></tr></tbody></table><p>ACPI</p><table><thead><tr><th align="left">名词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>EC</strong></td><td align="left">嵌入式控制器。在主板和嵌入式外围设备（如热键、端口或电池）之间进行通信</td></tr><tr><td align="left"><strong>PLUG</strong></td><td align="left">允许连接 XCPM、Apple XNU 电源管理，以实现更好的整体 CPU 控制</td></tr><tr><td align="left"><strong>AWAC</strong></td><td align="left">ACPI Wake Alarm Counter Clock，板的内部时钟，Hackintosh 必须对其进行修补</td></tr><tr><td align="left"><strong>PMC</strong></td><td align="left">电源管理控制器，部分主板需要 SSDT-PMC 来进行修补</td></tr><tr><td align="left"><strong>PNLF</strong></td><td align="left">内部背光显示，macOS 使用此 PNLF 设备发送和接收信息以进行亮度控制</td></tr><tr><td align="left"><strong>XOSI/_OSI</strong></td><td align="left"><code>_OSI</code> 用于确定正在启动的操作系统，重命名为 XOSI 允许我们欺骗硬件</td></tr><tr><td align="left"><strong>HPET</strong></td><td align="left">高精度事件定时器，macOS 对设备的设置方式非常挑剔，因此我们有时需要修补 HPET</td></tr><tr><td align="left"><strong>RHUB</strong></td><td align="left">根 USB 集线器，其中定义了 USB 端口。</td></tr><tr><td align="left"><strong>IMEI</strong></td><td align="left">英特尔管理引擎接口，处理杂项任务。macOS 依靠 IMEI 来实现 Intel GPU 加速</td></tr><tr><td align="left"><strong>UNC</strong></td><td align="left">Uncore Bridge，类似于北桥，它处理许多与缓存相关的功能</td></tr><tr><td align="left"><strong>SMBS</strong></td><td align="left">系统管理总线，用于允许设备之间轻松通信。</td></tr></tbody></table><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>自从苹果采用<a href="https://baike.baidu.com/item/Intel">Intel</a>的处理器，<a href="https://baike.baidu.com/item/OS/688">OS</a> X被黑客破解后可以安装在Intel CPU与部分<a href="https://baike.baidu.com/item/AMD/5905">AMD</a> CPU的机器上。从而出现了一大批非苹果设备而使用苹果操作系统的机器，被称为黑苹果(<a href="https://baike.baidu.com/item/Hackintosh">Hackintosh</a>)；在Mac苹果机上面安装原版Mac系统的被称为白苹果（<a href="https://baike.baidu.com/item/Macintosh">Macintosh</a>），与黑苹果相对。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><a href="https://zh.wikipedia.org/wiki/Mac_OS_X">Mac OS X</a> 是<a href="https://zh.wikipedia.org/wiki/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91">苹果电脑</a>作业系统产品线最新的 <a href="https://zh.wikipedia.org/wiki/Mac_OS">Mac OS</a>。尽管官方上简单地说是 Mac OS 的 “版本10”，但是在历史上看来它与早期的 Mac OS 版本有本质区别。</p><p>历代版本</p><p>2020年6月22日，macOS Big Sur（版本11.0）是苹果公司用于麦金塔电脑的桌面操作系统macOS 的第17个主要版本。其為macOS Catalina 的继任者</p><table><thead><tr><th align="left">macOS</th><th>最新版本</th></tr></thead><tbody><tr><td align="left">macOS Monterey</td><td>12.0.0</td></tr><tr><td align="left">macOS Big Sur</td><td>11.0</td></tr><tr><td align="left"><a href="https://support.apple.com/zh-cn/HT201475">macOS Catalina</a></td><td>10.15.3</td></tr><tr><td align="left"><a href="https://support.apple.com/zh-cn/HT210190">macOS Mojave</a></td><td>10.14.6</td></tr><tr><td align="left"><a href="https://support.apple.com/zh-cn/HT208969">macOS High Sierra</a></td><td>10.13.6</td></tr></tbody></table><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>苹果设备</p><ul><li>iMac</li><li>Macbook Pro</li><li>Macbook Air</li></ul><p>电脑硬件知识</p><blockquote><ul><li>CPU + 显卡 + 主板（主要关系到黑苹果的安装）</li><li>无线网卡（外置USB无线网卡 ）</li><li>机箱 + 电源 + 风扇</li><li>内存 + 硬盘（固态 + 机械）<ul><li>M.2接口</li><li>sata接口固态</li></ul></li><li>intel CPU + AMD显卡</li><li>博通BCM型号的网卡</li><li>主板要看具体的Clover文件</li></ul></blockquote><p>CPU</p><p>Intel CPU</p><ul><li>11代和12代的CPU本身是可以驱动的，关键是GPU核显能不能正常工作，选购显卡的时候要选择免驱的独显，而笔记本电脑的独显大部分是没有办法驱动的，通常驱动的是笔记本的核显</li><li>intel 11代 核显（UHD 730/750）无法驱动</li><li>12 代酷睿仿冒 10 代酷睿，在 OpenCore 的 config.plist → Kernel → Emulate 添加以下内容即可：<ul><li><strong>Cpuid1Data</strong>：<code>55060A00 00000000 00000000 00000000</code></li><li><strong>Cpuid1Mask</strong>：<code>FFFFFFFF 00000000 00000000 00000000</code></li></ul></li></ul><p>AMD CPU</p><ul><li>AMD的CPU可以配合免驱的独显，获得良好的黑苹果体验</li></ul><p>GPU</p><ul><li>AMD的GPU</li><li>Intel的GPU</li><li>NVIDIA的GPU</li></ul><p>主板</p><ul><li>绝大多数的主板都可以驱动，个人还是建议尽量选择 BIOS 功能多的主板</li></ul><p>硬盘</p><p>网卡</p><p>有线网卡</p><ul><li>几乎所有的有线网络适配器macOS都支持</li></ul><p>无线网卡</p><p>最好选购博通Broadcom网卡</p><ul><li>博通PCIe网卡</li><li>博通Mini PCIe</li><li>博通M.2</li></ul><p><a href="https://openintelwireless.github.io/">intel 网卡支持情况</a></p><blockquote><ul><li>Wifi: Intel 8265/8275 M2 NGFF (802.11 AC (2x2)) (working unstable!!)</li><li>声卡: 瑞昱 Audio @ 英特尔 High Definition Audio 控制器</li><li>网卡: 英特尔 Dual Band Wireless-AC 8265</li><li>网卡数据 <a href="https://ark.intel.com/content/www/us/en/ark/products/94150/intel-dual-band-wirelessac-8265.html">Intel Dual Band WirelessAC 8265 Product Specifications</a></li></ul></blockquote><p>英特尔无线网卡在<a href="https://imacosx.com/tag/%E9%BB%91%E8%8B%B9%E6%9E%9C">黑苹果</a>里之前一直是无法驱动的，现在只要利用itlwm.kext 驱动，就能轻松实现wifi功能了。</p><ul><li>itlwm.kext和Airportitlwm.kext 不要同时使用！</li></ul><blockquote><p>教程：<a href="https://www.pipiqiang.cn/2020/04/06/%E9%BB%91%E8%8B%B9%E6%9E%9Cintel%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/">黑苹果Intel无线网卡驱动 </a></p><p>适配的网卡：</p><ul><li><a href="https://github.com/AppleIntelWifi/adapter">AppleIntelWifi/adapter: Kext providing initial support for Intel wireless devices</a></li></ul><p>自定义配置：</p><ul><li><a href="https://www.itpwd.com/441.html">黑苹果春天：macOS英特尔/Intel无线驱动 itlwm v2.0.0 stable_黑苹果_IT密码</a></li><li><a href="https://github.com/OpenIntelWireless/itlwm">OpenIntelWireless/itlwm：适用于 macOS 的英特尔 Wi-Fi 驱动程序</a></li><li><a href="https://github.com/ammulder/AppleIntelWiFiMVM">ammulder/AppleIntelWiFiMVM: OS X driver for Intel WiFi cards based on the MVM firmware (e.g. 7265, 8260)</a></li></ul><p>免驱网卡：<a href="https://heipg.cn/tutorial/wifi-bluetooth-card-for-hackintosh.html">黑苹果无线网卡购买&amp;安装&amp;使用指南2021年版-黑苹果星球</a></p><p>视频教程：<a href="https://www.bilibili.com/video/BV1Jv411b76d/?spm_id_from=333.788.recommend_more_video.-1">OC引导黑苹果Intel无线网卡驱动原生Wi-Fi方式，支持Big Sur/Catalina/Mojave/High Sierra，告别USB外接网卡！_哔哩哔哩_bilibili</a></p></blockquote><ul><li>修改工具：<a href="https://github.com/corpnewt/ProperTree">corpnewt/ProperTree</a></li><li>驱动程序</li></ul><p>OC/Kexts</p><p>添加到引导文件</p><blockquote><p>内核设置 =&gt;  添加驱动程序名字  拖动添加 ==&gt; 启用</p><p>卡白苹果 ==&gt;</p></blockquote><p>声卡</p><ul><li>声卡依赖于AppleALC开源kexts来驱动</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>UEFI启动<br><img src="https://i.loli.net/2020/10/07/YCAuwm7HVegjoBp.png" alt="image-20200312122815443"><br><img src="https://i.loli.net/2020/10/07/iIarZn8oCgYfsGq.png" alt="image-20200312122648318"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>怎么判断自已的电脑能不能装黑苹果系统？</p><ol><li>可以询问淘宝装黑苹果的商家。</li><li>安装黑苹果要有一定的电脑基础，不同的电脑安装会出现不同的问题。</li><li>笔记本电脑的网卡99%的网卡型号不行。<br>解决方法：<ul><li>黑苹果USB无线网卡</li><li>黑苹果Mac无线免驱动（博通BCM型号的网卡）// DW型号的网卡</li></ul></li><li>AMD CPU基本不行。</li></ol></blockquote><h3 id="软件-1"><a href="#软件-1" class="headerlink" title="软件"></a>软件</h3><ul><li>DiskGenius</li><li>balenaEtcher</li><li>镜像：withClover镜像或者是withOC的镜像</li><li>clover configurator OpenCore Configurator Mac版本</li><li>Hackintool</li><li>OCAuxiliaryTools 跨平台 有Windows版本的</li></ul><h3 id="制作黑苹果镜像"><a href="#制作黑苹果镜像" class="headerlink" title="制作黑苹果镜像"></a>制作黑苹果镜像</h3><ul><li>原生镜像要自已制作黑苹果镜像，不推荐小白使用这个方法<ul><li>App Store下载系统镜像 制作镜像</li><li><a href="https://dortania.github.io/OpenCore-Install-Guide/installer-guide/">创建 USB | OpenCore 安装指南</a></li></ul></li></ul><h3 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h3><p>使用懒人包制作U盘</p><ul><li>带clover引导的镜像</li><li>带oc引导的镜像</li></ul><p>制作启动U盘流程</p><ul><li>下载黑苹果镜像<a href="https://blog.daliansky.net/macOS-Monterey-12.1-21C52-Release-version-with-OC-0.7.6-CLOVER-5143-and-FirPE-original-image.html#more">【黑果小兵】【微信首发】macOS Monterey 12.1 21C52 Installer for OpenCore 0.7.6 and CLOVER 5143 and WEPE 三 EFI 分区原版镜像 | 黑果小兵的部落阁</a></li><li>使用<a href="https://www.balena.io/etcher/">balenaEtcher - Flash OS images to SD cards &amp; USB drives</a>刷入镜像</li></ul><p>U盘文件结构</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">EFI<br>- BOOT<br>- MICROSOFT<br>WEPE<br></code></pre></td></tr></tbody></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.sqlsec.com/2018/08/clover.html">B站黑苹果安装教程 | 国光</a></p><blockquote><p>两种引导方式：</p><p>变色龙 ==&gt; clover ==&gt; OC<br>安装流程</p></blockquote><ul><li>U盘刷入系统镜像withclover，安装oc引导的可以直接替换clover文件夹</li><li>下载适用EFI  用DiskGenius  替换U盘EFI文件<ul><li>配置适合EFI，可以把自已的电脑型号的配置去搜索，找到适配的EFI，或者可以去找相近的EFI，再去修改不同的硬件的驱动文件。</li></ul></li><li>进入PE系统在 DiskGenius 中，选中磁盘，右键选【转换分区表类型为 GUID 格式】即可将磁盘转换为 GPT 分区表。</li><li>进入BIOS  修改从U盘启动</li><li>使用mac系统的磁盘工具 格式化选择「APFS」格式</li><li>安装mac系统</li><li>开机进入系统  U盘EFI   复制到磁盘</li><li>检查系统出现什么问题<ul><li>修改 EFI 中的 OC中config.list 或者 是 Clover 中config.list</li></ul></li><li>双系统的话，就要进入PE修复UEFI序列</li><li>修改BIOS 从硬盘驱动</li><li>安装完成</li></ul><p><code>Command/Windows + V</code>键，这样就进入了 <code>-v</code> 啰嗦模式。如果你快捷键没有效果的话，说明你的 EFI 没有配置好苹果热键，那么可去 boot-args 启动项里面手动添加 <code>-v</code></p><p>单磁盘多系统</p><ul><li>无需手动使用工具添加引导项也可以，直接将 OC 的 EFI 引导文件拷贝到 <strong>磁盘B</strong> 的 EFI 引导分区下，然后在 BIOS 里面将 <strong>磁盘 B</strong>的引导设置第 1 启动即可。</li></ul><p>多磁盘多系统</p><ul><li>用下面的 DG 或者 EasyUEFI 手动添加引导<ul><li>来到 Windows 下我们可以使用 EasyUEFI 工具来添加引导，当然也有一些替代品如 Bootice，</li><li><a href="https://sqlsec.lanzouw.com/i4amxzmj1cj">EasyUEFI 4.0 破解版.zip - 蓝奏云</a></li><li>EFI/OC/ 目录下的 OpenCpre.efi</li></ul></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li>小版本直接更新：安装完更新之后可能重启几次，总之这启动项还在的话，就一直选择这个新的启动项「Macintosh HD」来启动，更新成功后，启动项恢复正常了，我们选择原本的启动项 「Macintosh」来启动</li></ul><h2 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h2><h3 id="Clover-引导"><a href="#Clover-引导" class="headerlink" title="Clover 引导"></a>Clover 引导</h3><p>四叶草（clover）<br>作用：关于什么是<a href="https://imac.hk/tag/clover/">Clover</a><a href="https://imac.hk/tag/%E5%9B%9B%E5%8F%B6%E8%8D%89/">四叶草</a>？很显然这不是生长在地上草。这是一款软件，一种新型的系统引导程序。让我们普通的个人电脑可以安装和使用Mac OS 系统。<br><a href="https://macx.top/5673.html">原版黑苹果安装教程【新】 – 苹果地带</a></p><h3 id="OS-引导"><a href="#OS-引导" class="headerlink" title="OS 引导"></a>OS 引导</h3><p><a href="http://imacos.top/2020/04/04/1616/">OpenCore</a><br>Open Core(OC)是 Clover EFI 或 Chameleon 的替代引导程序。它不仅适用于Hackintosh，还可以在实际的 Mac 上用于需要模拟EFI的目的。它还旨在无需使用其他acpi表即可启动Windows和Linux。它具有纯净的代码库，在与真正的Mac bootloader保持密切联系。Kext驱动已大大改善。未来的主流引导工具应该是OC引导，如果你喜欢研究这些，可以尝试一下，给未来做点小贡献。不过如果你的黑苹果是主要生产力工具，有稳定系统的情况下，就别轻易尝试了。Open Core(OC)作为一种新的引导方式，随着越来越多的kexts开始放弃Clover, 我相信提早使用OC会对你未来使用黑苹果会有很大的帮助。这是一个自然的现象，就像变色龙被Clover淘汰，而现在OC代替Clover也是大势所趋。</p><h3 id="Clover-转-OC"><a href="#Clover-转-OC" class="headerlink" title="Clover 转 OC"></a>Clover 转 OC</h3><p><a href="https://www.mfpud.com/topics/1981/">【kealOS】macOS Big Sur 11 2020/09/16 黑苹果系统镜像自带通用的OpenCore OC引导EFI-思羽布丁</a></p><blockquote><p>EFI配置和OC配置为进阶内容</p></blockquote><h2 id="EFI配置"><a href="#EFI配置" class="headerlink" title="EFI配置"></a>EFI配置</h2><p>BIOS设置</p><p><a href="https://apple.sqlsec.com/3-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/3-1.html#reloaded">BIOS设置 · 国光的黑苹果安装教程</a></p><p>OS引导配置</p><h3 id="OC文件"><a href="#OC文件" class="headerlink" title="OC文件"></a>OC文件</h3><p><a href="https://github.com/acidanthera/OpenCorePkg">acidanthera/OpenCorePkg：OpenCore 引导加载程序</a></p><p>文件目录</p><p>EFI</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── BOOT                          <span class="hljs-comment"># 引导文件夹</span><br>│   └── BOOTx64.efi               <span class="hljs-comment"># 引导文件</span><br>└── OC                            <span class="hljs-comment"># OC 文件夹</span><br>    ├── ACPI                      <span class="hljs-comment"># ACPI 存放的文件夹 放这 SSDT 编译好的文件，格式均为 .aml 格式，</span><br>    │   ├── SSDT-EC.aml<br>    │   ├── SSDT-PLUG.aml<br>    │   │── SSDT-PNLF.aml<br>    │       ...<br>    ├── Drivers                   <span class="hljs-comment"># OC 驱动的文件夹</span><br>    │   ├── AudioDxe.efi  启动的时候播放 Duang 的声音<br>    │   ├── CrScreenshotDxe.efi OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下<br>    │   ├── HiiDatabase.efi 用于支持 UEFI 字体渲染，四代酷睿后一般不需要<br>            OpenCanopy.efi：使用图形化 OC 主题必备驱动<br>            OpenHfsPlus.efi：文件系统驱动，用于支持识别 HFS+ 的磁盘格式<br>            OpenLinuxBoot.efi：OC 0.7.3 新增的驱动，用于引导 Linux 系统<br>            OpenPartitionDxe.efi：分区管理驱动程序。用于加载旧版 macOS 的 DMG 映像<br>            OpenRuntime.efi：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行<br>            OpenUsbKbDxe.efi：USB 键盘驱动，用于模拟苹果热键，是 KeySupport 的等效方案<br>            Ps2KeyboardDxe.efi：PS/2 键盘驱动，这个 PS/2 键盘也太老了吧，我好多年没见过了<br>            Ps2MouseDxe.efi：PS/2 鼠标驱动，同样也太老了，很多年没有见过了<br>            UsbMouseDxe.efi：USB 鼠标驱动，有些虚拟机需要依赖改驱动才可以在引导界面使用鼠标<br>            XhciDxe.efi：XHCI USB controller 驱动程序，基本上 2 代酷睿开始大多数固件都自带这个驱动程序了<br>    ├── Kexts                     <span class="hljs-comment"># 存放内核拓展 kexts 的文件夹</span><br>    │   ├── AppleALC.kext<br>    │   ├── Lilu.kext<br>    │   ├── WhateverGreen.kext<br>    │       ...<br>    ├── OpenCore.efi              <span class="hljs-comment"># OC 的核心文件</span><br>    ├── Resources                 <span class="hljs-comment"># OC 的主题样式</span><br>    │   ├── Audio<br>    │   ├── Font<br>    │   ├── Image<br>    │   └── Label<br>    └── Tools                     <span class="hljs-comment"># OC 小工具文件夹</span><br>        ├── BootKicker.efi<br>        ├── ChipTune.efi<br>        ├── CleanNvram.efi<br>            ...<br></code></pre></td></tr></tbody></table></figure><h3 id="ACPI"><a href="#ACPI" class="headerlink" title="ACPI"></a>ACPI</h3><p>高级配置与电源接口（Advanced Configuration and Power Interface），是 1997 年由英特尔、微软、东芝共同提出、制定的操作系统电源管理、硬件配置接口，ACPI 定义了系统固件 BIOS 或 UEFI 和操作系统之间的硬件抽象接口。</p><p>它帮助操作系统合理控制和分配计算机硬件设备的电量，有 了 ACPI ，操作系统可以根据设备实际情况，根据需要把不同的硬件设备关闭。</p><ol><li>System power management（系统电源管理）</li><li>Device power management（设备电源管理）</li><li>Processor power management（处理器电源管理）</li><li>Device and processor performance management（设备及处理器性能管理）</li><li>Configuration / Plug and Play（配置/即插即用）</li><li>System Events（系统事件）</li><li>Battery management（电池管理）</li><li>Thermal management（温度管理）</li><li>Embedded Controller（嵌入式控制器）</li><li>SMBus Controller（SMBus控制器）</li></ol><h3 id="Kexts"><a href="#Kexts" class="headerlink" title="Kexts"></a>Kexts</h3><blockquote><p><a href="https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Kexts.md">OpenCorePkg/Kexts.md at master · acidanthera/OpenCorePkg Kexts 大全</a></p><p><a href="https://dortania.github.io/builds/">Kexts 下载列表</a></p></blockquote><p>Kext 的英文全称叫做 <strong>K</strong>ernel <strong>Ext</strong>ension，即内核扩展，我们可以通俗的理解为这个就是 macOS 的驱动，使用方法只需要将这些 kext 文件放入到 <code>EFI/OC/kexts</code> 文件夹下面，然后编辑 OC 配置文件加载这些 kexts 并调节好顺序即可。</p><p>Kexts 有顺序的要求，而且有些 Kexts 会冲突无法开机，</p><p>自动调整Kexts顺序</p><ul><li>OpenCore Configurator 也有这个功能，点击底部的「检查 Kexts」即可</li></ul><p>必备 Kexts 的加载顺序</p><ol><li>Lilu.kext</li><li>VirtualSMC.kext</li><li>WhateverGreen.kext</li><li>SMCBatteryManager.kext （台式机不需要）</li><li>SMCLightSensor.kext （台式机不需要）</li><li>SMCProcessor.kext</li><li>SMCSuperIO.kext</li><li>AppleALC.kext</li></ol><p>常用Kexts</p><ul><li><a href="https://github.com/acidanthera/VirtualSMC/releases"><strong>VirtualSMC.kext</strong></a>：</li><li><a href="https://github.com/acidanthera/Lilu/releases"><strong>Lilu.kext</strong></a>：很多著名 kexts 的依赖，没有 Liu 就无法正常使用 AppleALC、WhateverGreen、VirtualSMC 等</li><li><a href="https://github.com/acidanthera/WhateverGreen/releases"><strong>WhateverGreen.kext</strong></a> 显卡驱动</li><li>声卡驱动<ul><li><a href="https://github.com/acidanthera/AppleALC/releases"><strong>AppleALC.kext</strong></a></li><li><a href="https://sourceforge.net/projects/voodoohda/"><strong>VoodooHDA.kext</strong></a></li></ul></li><li>usb驱动<ul><li><a href="https://apple.sqlsec.com/6-%E5%AE%9E%E7%94%A8%E5%A7%BF%E5%8A%BF/6-1.html#reloaded"><strong>USBToolBox.kext 与 UTBMap.kext</strong></a></li></ul></li><li>有线网卡<ul><li><strong>AtherosE2200Ethernet.kext</strong></li><li><strong>IntelMausi.kext</strong>：大多数 Intel 因特尔的网卡驱动</li><li><strong>LucyRTL8125Ethernet.kext</strong>：Realtek 的 2.5Gb 的网卡驱动</li><li><strong>RealtekRTL8111.kext</strong>：大多数 Realtek 的千兆网卡驱动</li><li><strong>SmallTreeIntel82576.kext</strong>I 211 有线网卡驱动</li></ul></li><li>无线网卡<ul><li>Intel 网卡的 WiFi 驱动<ul><li><a href="https://github.com/OpenIntelWireless/itlwm/releases"><strong>AirportItlwm.kext</strong></a><ul><li>支持驱动的 intel 无线网卡型号表：<a href="https://docs.oiw.workers.dev/itlwm/Compat.html">https://docs.oiw.workers.dev/itlwm/Compat.html</a></li></ul></li><li><a href="https://github.com/OpenIntelWireless/IntelBluetoothFirmware/releases"><strong>IntelBluetoothFirmware.kext 与 IntelBluetoothFirmware.kext</strong></a></li></ul></li><li>Broadcom 博通免驱系列<ul><li><a href="https://github.com/acidanthera/AirportBrcmFixup/releases"><strong>AirportBrcmFixup.kext</strong></a></li><li><a href="https://github.com/acidanthera/BrcmPatchRAM/releases"><strong>BrcmPatchRAM 系列</strong></a></li></ul></li></ul></li></ul><h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><code>OC/Drivers</code> 里放着一些驱动文件，这些驱动均已 .efi 后缀结尾，OC 官方默认的驱动文件以及说明如下：</p><p>必备Dirver(精简Drivers)</p><ul><li><strong>CrScreenshotDxe.efi</strong>：OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下</li><li><strong>OpenCanopy.efi</strong>：使用图形化 OC 主题必备驱动</li><li><strong>OpenHfsPlus.efi</strong>：文件系统驱动，用于支持识别 HFS+ 的磁盘格式</li><li><strong>OpenRuntime.efi</strong>：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行</li></ul><p>常用Diver</p><ul><li><strong>AudioDxe.efi</strong>：用与启动的时候播放 Duang 的声音，就像白苹果那样</li><li><strong>CrScreenshotDxe.efi</strong>：OC 引导界面截图驱动，按 F10 会保存当前界面的截图到 EFI 分区的根目录下</li><li><strong>HiiDatabase.efi</strong>：用于支持 UEFI 字体渲染，四代酷睿后一般不需要</li><li><strong>NvmExpressDxe.efi</strong>：用于让老主板支持 NVME Express 设备，四代酷睿后一般不需要</li><li><strong>OpenCanopy.efi</strong>：使用图形化 OC 主题必备驱动</li><li><strong>OpenHfsPlus.efi</strong>：文件系统驱动，用于支持识别 HFS+ 的磁盘格式</li><li><strong>OpenLinuxBoot.efi</strong>：OC 0.7.3 新增的驱动，用于引导 Linux 系统</li><li><strong>OpenPartitionDxe.efi</strong>：分区管理驱动程序。用于加载旧版 macOS 的 DMG 映像</li><li><strong>OpenRuntime.efi</strong>：OC 核心必备驱动，功能比较强大，大家记住这个是必备的驱动就行</li><li><strong>OpenUsbKbDxe.efi</strong>：USB 键盘驱动，用于模拟苹果热键，是 KeySupport 的等效方案</li><li><strong>Ps2KeyboardDxe.efi</strong>：PS/2 键盘驱动，这个 PS/2 键盘也太老了吧，我好多年没见过了</li><li><strong>Ps2MouseDxe.efi</strong>：PS/2 鼠标驱动，同样也太老了，很多年没有见过了</li><li><strong>UsbMouseDxe.efi</strong>：USB 鼠标驱动，有些虚拟机需要依赖改驱动才可以在引导界面使用鼠标</li><li><strong>XhciDxe.efi</strong>：XHCI USB controller 驱动程序，基本上 2 代酷睿开始大多数固件都自带这个驱动程序了</li></ul><h2 id="OC配置"><a href="#OC配置" class="headerlink" title="OC配置"></a>OC配置</h2><p>Config.list</p><p><img src="https://s2.loli.net/2022/05/14/SgyJI6rioZhKkMD.png" alt="截屏2022-05-14 14.27.31"></p><h3 id="ACPI-1"><a href="#ACPI-1" class="headerlink" title="ACPI"></a>ACPI</h3><p>高级配置与电源接口（Advanced Configuration and Power Interface），是 1997 年由英特尔、微软、东芝共同提出、制定的操作系统电源管理、硬件配置接口，ACPI 定义了系统固件 BIOS 或 UEFI 和操作系统之间的硬件抽象接口。</p><p>它帮助操作系统合理控制和分配计算机硬件设备的电量，有 了 ACPI ，操作系统可以根据设备实际情况，根据需要把不同的硬件设备关闭。</p><p>ACPI 由很多表组成，包括：RSDP，SDTH，RSDT，FADT，FACS，<strong>DSDT</strong>，<strong>SSDT</strong>，MADT，SBST，XSDT，ECDT，SLIT，SRAT。其中 <strong>DSDT</strong> 就是它的一个重要的描述表。</p><h3 id="Booter"><a href="#Booter" class="headerlink" title="Booter"></a>Booter</h3><p>对操作系统引导加载程序应用不同类型的UEFI修改，主要是Apple引导加载程序（boot.efi）。</p><h3 id="DeviceProperties"><a href="#DeviceProperties" class="headerlink" title="DeviceProperties"></a>DeviceProperties</h3><p>设备配置通过专用缓冲区提供给 macOS，用于设置 PCI 设备属性，如英特尔缓冲帧补丁，声卡 Layout ID 等。当然声卡的 ID 也可以直接通过启动项添加 <code>alcid=xx</code> 这种形式</p><h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><p>内核相关的选项设置。</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>Misc 杂项部分</p><h3 id="NVRAM"><a href="#NVRAM" class="headerlink" title="NVRAM"></a>NVRAM</h3><h3 id="PLatformInfo"><a href="#PLatformInfo" class="headerlink" title="PLatformInfo"></a>PLatformInfo</h3><p>机型相关的信息，使用 OCC 这类工具一键生成，选择和自己 CPU 相近的即可</p><h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>关于声卡出现故障的解决方案</p><blockquote><p>VendorCodecRevisions and layoutsMinKernel<br>RealtekALC256/ALC3246layout 5, 11, 13, 14, 21, 22, 28, 56, 5713 (10.9)ALC256<br>DEV_0256</p><ol><li><p>确定自己声卡型号id。我的是Realtek的声卡，我以Realtek为例来查看自己声卡的型号，其他型号的声卡自己百度查询一下吧!每一种声卡型号查看方式是不一样，建议用度娘搜索一下都会有介绍，我这里就不一一讲解了，可通过windows系统查看，右键我的电脑——管理——设备管理器——声音、视频和游戏控制器——右键设备属性——详细信息——属性中选择硬件id,查看第一行“值”，注意dev后面的值，0282，那么型号就是ALC282.</p></li><li><p>回到Mac系统上，把自己安装过的所有声卡驱动全部清除，例如你的万能声卡VoodooHDA.kext 、FakePCllD_ Intel. HDMI_ Audio.kext等等，只要涉及声卡驱动的全部删除。我的之前只装过一个万能声卡驱动，已经被我删除了。</p></li><li><p>下载最新版本的AppleALC.kext驱动，地址：<a href="http://imacos.top/2019/08/26/1505/%EF%BC%8CAppleALC.kext%E9%A9%B1%E5%8A%A8%E9%9C%80%E8%A6%81%E9%85%8D%E5%90%88Lilu.kex%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%9C%B0%E5%9D%80%EF%BC%9Ahttp://imacos.top/2019/07/02/1534/%EF%BC%8C%E6%89%93%E5%BC%80AppleALC.kext%E9%A9%B1%E5%8A%A8%E6%94%AF%E6%8C%81%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%9E%8B%E5%8F%B7%E4%B8%8EID%E9%80%9F%E6%9F%A5%E5%88%97%E8%A1%A8%EF%BC%8C%E5%9C%B0%E5%9D%80%EF%BC%9Ahttp://imacos.top/2019/09/07/1920/%EF%BC%8C%E5%88%A9%E7%94%A8Ctrl+A%E4%B8%8ECtrl+F%E6%96%B9%E5%BC%8F%E6%90%9C%E7%B4%A2ALC282%E5%A3%B0%E5%8D%A1%E7%9A%84ID%EF%BC%8C%E6%9F%A5%E8%AF%A2%E5%88%B0ID%E5%80%BC%E4%B8%BAlayout">http://imacos.top/2019/08/26/1505/，AppleALC.kext驱动需要配合Lilu.kex驱动使用，地址：http://imacos.top/2019/07/02/1534/，打开AppleALC.kext驱动支持的硬件型号与ID速查列表，地址：http://imacos.top/2019/09/07/1920/，利用Ctrl+A与Ctrl+F方式搜索ALC282声卡的ID，查询到ID值为layout</a> 3, 4, 13, 22, 27, 28, 29, 41, 43, 51, 76, 86, 127。</p></li><li><p>用四叶草分区工具Clover Configurator打开EFI隐藏分区，把AppleALC.kext、Lilu.kex拷贝到EFI/CLOVER/kexts/Other驱动目录里，让后打开config.plist文件——Devices(设备设置)——Audio——Inject（注入）——输入之前查询到的ID值3，重新启动，如果还是没有驱动成功或者是声音图标亮了可以点击，但是没有声音，就把每一个值都测试一下。</p></li></ol><p>INTELAUDIO\FUNC_01&amp;VEN_10EC&amp;DEV_0256&amp;SUBSYS_10431061&amp;REV_1000<br>INTELAUDIO\FUNC_01&amp;VEN_10EC&amp;DEV_0256&amp;SUBSYS_10431061</p></blockquote><blockquote><p>解决的问题<br><a href="https://www.bilibili.com/video/av50809670/">https://www.bilibili.com/video/av50809670/</a><br>声卡驱动<br><a href="https://www.bilibili.com/video/av67570044/">https://www.bilibili.com/video/av67570044/</a><br><a href="http://imacos.top/2019/09/08/2300/">http://imacos.top/2019/09/08/2300/</a></p><p><a href="https://www.jianshu.com/p/5a7dc5f5def4">https://www.jianshu.com/p/5a7dc5f5def4</a><br>无线网卡<br>usb网卡<br><a href="http://imacos.top/2019/10/23/1025-2/">http://imacos.top/2019/10/23/1025-2/</a></p></blockquote><h2 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h2><blockquote><p><a href="https://zhizhizhi.com/a/xianka-pinpai-paihangbang/">显卡什么牌子好？10大显卡品牌排行榜（2020） – 网购值值值</a><br><a href="https://heipg.cn/tutorial/diy-hackintosh-2020.html">2020年黑苹果硬件配置推荐表-黑苹果星球</a><br><a href="http://k61.org/i7-9700K-ga-Z390-GAMING-X-CF">【台式机】i7-9700K 技嘉 Z390 GAMING X-CF RX 5700 XT ALC892 10.15.2黑苹果引导_Hackintosh_Clover | 老吴黑苹果工作室</a><br><a href="https://macx.top/864.html">可驱动显卡支持列表 – 苹果地带</a></p></blockquote><h3 id="笔记本电脑"><a href="#笔记本电脑" class="headerlink" title="笔记本电脑"></a>笔记本电脑</h3><blockquote><p><a href="https://github.com/xxx88/ASUSVivoBookS2-Hackintosh">xxx88/ASUSVivoBookS2-Hackintosh: 本项目是一个采用了Clover引导的华硕灵耀s2笔记本的黑苹果和window10的双系统配置文件，该项目基本完成了苹果系统的98%的体验，可以正常完成基本功能。</a></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">电脑型号: 华硕 VivoBook S15 X530UN 笔记本电脑<br>操作系统: Windows 10 专业版 64位<br>主板: 华硕 X530UN<br>内存: 8 GB ( 三星 DDR4 2400MHz )<br>主硬盘: 镁光 _1100_MTFDDAV512TBN ( 512 GB / 固态硬盘 )<br>显卡: Nvidia GeForce MX150 ( 2 GB )<br>显示器: 友达 AUO21ED ( 15.5 英寸  )<br>声卡: 瑞昱 Audio @ 英特尔 High Definition Audio 控制器<br>网卡: 英特尔 Dual Band Wireless-AC 8265<br></code></pre></td></tr></tbody></table></figure><h3 id="ATX机箱配置"><a href="#ATX机箱配置" class="headerlink" title="ATX机箱配置"></a>ATX机箱配置</h3><p>无线网卡</p><p>一般主板板载的蓝牙和WiFi黑苹果都不能驱动，需要额外购买；</p><p>买显卡看什么？</p><p>核心流处理器（SP）数量、显存频率、显存带宽、核心频率</p><ul><li>华硕（ASUS） 创于1989年台湾，消费性笔记本电脑<strong>品牌</strong>，全球大型主板/<strong>显卡</strong>生产商，领先的3C解决方案提供商。</li><li>技嘉（GIGABYTE）</li><li>微星（msi）</li><li>蓝宝石（SAPPHIRE）</li><li>七彩虹（Colorful）</li><li>影驰（GALAXY）</li><li>索泰（Zotac）</li><li>迪兰（Dataland）<br>  对于固态硬盘，Nvme SSD选择三星、惠普、金士顿之类的都不会有什么问题。注意三星散装OEM版本的PM981(MZVLB)是有问题的，不能作为安装盘。SATA口的硬盘就随意了。<br>  内存和电源也没有什么需要特别注意的，仁者见仁智者见智，大家根据自己的喜欢搭配即可。</li></ul><p>配置方案：2020年</p><p>配置一</p><table><thead><tr><th>电脑型号 技嘉 Z390 GAMING X 台式电脑</th><th></th><th>价格</th><th></th></tr></thead><tbody><tr><td>处理器</td><td>英特尔 Core i7-9700K @ 3.60GHz 八核</td><td>2299</td><td></td></tr><tr><td>主板</td><td>技嘉 Z390 GAMING X-CF ( Z390 芯片组 )</td><td>1000</td><td></td></tr><tr><td>内存</td><td>32 GB ( 金士顿 DDR4 3200MHz )</td><td>1200</td><td></td></tr><tr><td>主硬盘</td><td>Lexar SSD (1 T / 固态硬盘 ) 500G</td><td>819</td><td></td></tr><tr><td>显卡</td><td>AMD Radeon RX 5700 XT ( 8 GB / AMD )</td><td>3400</td><td></td></tr><tr><td>机箱</td><td></td><td></td><td></td></tr><tr><td>风扇</td><td>玄冰400</td><td>89</td><td></td></tr><tr><td>电源</td><td></td><td></td><td></td></tr><tr><td>网卡1</td><td>Fenvi/博通 BCM94360CD</td><td>219-298</td><td></td></tr><tr><td>网卡2</td><td>苹果/博通 BCM94360CS2</td><td>130-170</td><td></td></tr></tbody></table><p>配置二</p><table><thead><tr><th>配件</th><th>品牌</th><th>型号</th><th>说明</th></tr></thead><tbody><tr><td>处理器</td><td>英特尔</td><td>i7 9700K/KF</td><td>KF无核显</td></tr><tr><td>主板</td><td>技嘉/华硕/微星</td><td>Z370/Z390</td><td></td></tr><tr><td>内存</td><td>芝奇/海盗船</td><td>皇家戟/复仇者 3200Mhz 16GB</td><td>8GB x2套装，按需加配</td></tr><tr><td>显卡</td><td>AMD/华硕/蓝宝石</td><td>RX 5700XT</td><td>50周年版也免驱</td></tr><tr><td>固态硬盘</td><td>三星</td><td>970 EVO/PLUS/PRO</td><td>500G</td></tr><tr><td>电源</td><td>海盗船</td><td>RM650x/RM750x</td><td>650w/750w</td></tr><tr><td>定制电源线</td><td>定制模组线</td><td>定制</td><td>可选RGB</td></tr><tr><td>机箱</td><td>NZXT/恩杰</td><td>H510/H710</td><td>ATX塔式机箱</td></tr><tr><td>处理器散热</td><td>NZXT/恩杰</td><td>X62/X72</td><td>一体式水冷，看喜好选</td></tr><tr><td>机械硬盘</td><td>希捷酷鱼/西数黑盘</td><td>3T/4T/6T/8T</td><td>选配</td></tr></tbody></table><p>配置三</p><table><thead><tr><th>配件</th><th>品牌</th><th>型号</th><th>说明</th></tr></thead><tbody><tr><td>处理器</td><td>英特尔</td><td>i5 9600K/KF</td><td>KF无核显</td></tr><tr><td>主板</td><td>技嘉/华硕/微星</td><td>B365/H370/Z370/Z390</td><td></td></tr><tr><td>内存</td><td>芝奇/海盗船</td><td>幻光戟/复仇者 3200Mhz 16GB</td><td>8GB x2套装，按需加配</td></tr><tr><td>显卡</td><td>AMD/华硕/蓝宝石</td><td>RX 5600XT/5700</td><td></td></tr><tr><td>固态硬盘</td><td>三星</td><td>970 EVO/PLUS</td><td>250G/500G/1T看具体需求</td></tr><tr><td>机械硬盘</td><td>希捷酷鱼/西数黑盘</td><td>3T/4T/6T/8T</td><td>选配</td></tr><tr><td>电源</td><td>海盗船</td><td>RM550x/RM650x</td><td>550w/650w</td></tr><tr><td>定制电源线</td><td>定制模组线</td><td>定制</td><td>选配</td></tr><tr><td>处理器散热①</td><td>NZXT/恩杰</td><td>X52/X62</td><td>水冷风冷二选一</td></tr><tr><td>处理器散热②</td><td>酷冷至尊/利民/Tt</td><td>塔式风冷</td><td>水冷风冷二选一</td></tr><tr><td>机箱</td><td>NZXT/恩杰</td><td>H510/H710</td><td>ATX塔式机箱</td></tr></tbody></table><p>免驱显卡</p><blockquote><p><a href="http://bbs.pcbeta.com/viewthread-1799271-1-1.html">macOS Mojave 台式机黑苹果硬件选购指南-远景论坛-微软极客社区</a></p></blockquote><ul><li>讯景的卡装黑苹果会出现各种各样的问题，比较玄学不推荐购买</li></ul><table><thead><tr><th>Mojave免驱的A卡：</th><th></th></tr></thead><tbody><tr><td>首选 蓝宝石，微星，迪兰，技嘉，华硕 的</td><td></td></tr><tr><td>Radeon VII</td><td></td></tr><tr><td>Vega FE</td><td></td></tr><tr><td>Vega 64</td><td></td></tr><tr><td>Vega 56</td><td></td></tr><tr><td>Vega Nano</td><td></td></tr><tr><td>Pro SSG</td><td></td></tr><tr><td>WX 9100</td><td></td></tr><tr><td>WX 8200</td><td></td></tr><tr><td>RX 590</td><td></td></tr><tr><td>RX 580      （注意，缩水的阉割版2048SP的RX580马甲卡不是免驱的，标准2304SP才是免驱卡）</td><td></td></tr><tr><td>RX 570</td><td></td></tr><tr><td>RX 560      （个别型号的HDMI/DVI输出黑屏，需要改FB，DP输出没问题）</td><td></td></tr><tr><td>RX 560D</td><td></td></tr><tr><td>RX 480</td><td></td></tr><tr><td>RX 470</td><td></td></tr><tr><td>RX 470D     （个别型号的HDMI/DVI输出黑屏，需要改FB，DP输出没问题）</td><td></td></tr><tr><td>RX 460</td><td></td></tr><tr><td>WX 7100</td><td></td></tr><tr><td>WX 5100</td><td></td></tr><tr><td>WX 4100</td><td></td></tr><tr><td>Pro Duo (Fiji)</td><td></td></tr><tr><td>W9100</td><td></td></tr><tr><td>W9100 32GB</td><td></td></tr><tr><td>W9000</td><td></td></tr><tr><td>W8100</td><td></td></tr><tr><td>W8000</td><td></td></tr><tr><td>W7100</td><td></td></tr><tr><td>W7000</td><td></td></tr><tr><td>W5100</td><td></td></tr><tr><td>W5000</td><td></td></tr></tbody></table><p>无线网卡选购买指南</p><ul><li>10.15.2又不支持三星EVO 970 PLUS固态了</li></ul><table><thead><tr><th>配件</th><th>品牌</th><th>型号</th><th>2.4G</th></tr></thead><tbody><tr><td>蓝牙&amp;WiFi</td><td>Fenvi/博通</td><td>BCM94360AC</td><td>600M</td></tr><tr><td>蓝牙&amp;Wifi</td><td>苹果/博通</td><td>BCM94360CS2</td><td>300M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>苹果/博通</td><td>BCM94360CS</td><td>450M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>华硕/博通</td><td>BCM94360HMB</td><td>300M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>苹果/博通</td><td>BCM943602CS</td><td>450M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>苹果/博通</td><td>BCM943602CDP</td><td>450M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>苹果/博通</td><td>BCM94331CD</td><td>450M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>苹果/博通</td><td>BCM94331CSAX</td><td>300M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>戴尔/博通</td><td>BCM943602BAED</td><td>300M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>戴尔/博通</td><td>BCM94350ZAE</td><td>300M</td></tr><tr><td>蓝牙&amp;WiFi</td><td>Fenvi/博通</td><td>BCM94360CD</td><td>450M</td></tr></tbody></table><h3 id="ITX机箱配置"><a href="#ITX机箱配置" class="headerlink" title="ITX机箱配置"></a>ITX机箱配置</h3><table><thead><tr><th align="left">配件</th><th align="left">品牌</th><th align="left">型号</th><th align="left">平台</th><th>估价</th></tr></thead><tbody><tr><td align="left">主板</td><td align="left">技嘉</td><td align="left">Z370 I AORUS PRO WIFI</td><td align="left">京东</td><td>1300</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">Z490</td><td align="left"></td><td></td></tr><tr><td align="left">显卡</td><td align="left">蓝宝石</td><td align="left">RX 5500XT</td><td align="left">京东</td><td>1500</td></tr><tr><td align="left"></td><td align="left">蓝宝石</td><td align="left">RX5700XT</td><td align="left">京东</td><td>3200（6期）</td></tr><tr><td align="left">电源</td><td align="left">全汉SFX（带定制模组线）</td><td align="left">600W</td><td align="left">京东</td><td>630</td></tr><tr><td align="left">处理器</td><td align="left">英特尔</td><td align="left">i5 9600K 散片</td><td align="left">淘宝</td><td>1000</td></tr><tr><td align="left"></td><td align="left">英特尔</td><td align="left">i5 10600K 散片</td><td align="left">淘宝</td><td></td></tr><tr><td align="left"></td><td align="left">英特尔</td><td align="left">i7 10600K 散片</td><td align="left">淘宝</td><td>2400</td></tr><tr><td align="left">处理器散热</td><td align="left">乔思伯240水冷</td><td align="left">240水冷</td><td align="left">淘宝</td><td>400</td></tr><tr><td align="left">机箱</td><td align="left">乔思伯</td><td align="left">A4</td><td align="left">淘宝</td><td>699</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td>1068</td></tr><tr><td align="left">内存</td><td align="left">芝奇</td><td align="left">16G DDR4 3200Hz</td><td align="left">拼多多</td><td>530</td></tr><tr><td align="left">固态硬盘</td><td align="left">西部数据</td><td align="left">SN550 500G</td><td align="left">拼多多</td><td>449</td></tr><tr><td align="left">合计</td><td align="left"></td><td align="left"></td><td align="left"></td><td>6400</td></tr></tbody></table><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p>检测软件</p><ul><li><a href="https://www.intel.com/content/www/us/en/developer/articles/tool/power-gadget.html">Intel Power Gadget</a></li><li><a href="https://github.com/headkaze/Hackintool/releases">Hackintool</a></li><li>VideoProc</li><li>Geekbench5</li><li>系统信息</li><li>触控板</li><li>快捷键</li><li>电池</li></ul><p>互联</p><ul><li>信息</li><li>iCloud</li><li>隔空投送</li><li>跨设备粘贴</li><li>随航</li><li>通用控制</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)pinia</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/pinia.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/pinia.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h1><h2 id="piniaApi"><a href="#piniaApi" class="headerlink" title="piniaApi"></a><em>pinia</em>Api</h2><blockquote><p>pinia vs vuex</p><ul><li>抛弃传统的 <code>Mutation</code> ，只有 <code>state, getter</code> 和 <code>action</code> ，简化状态管理库</li><li>不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化</li><li>TS支持</li><li>代码自动分割</li><li>小 1K</li></ul></blockquote><blockquote><p>store 仓库</p><ul><li>state 数据<ul><li>定义 <code>export const mainStore = defineStore('main',{ state:{}  })</code></li><li>使用<ul><li><code>const store = mainStore()</code></li><li><code>const { name } = storeToRefs(store)</code></li><li>组件 store.name name</li></ul></li><li>修改<ul><li><code>store.属性名</code> 单个数据修改</li><li><code>store.$path</code>多个数据修改（类似辅助函数）<ul><li><code>$path((state)=&gt;{ })</code>  + <code>$path({})</code></li></ul></li></ul></li></ul></li><li>getters 计算<ul><li>定义 <code> export const mainStore = definStore('main',{ getters:{} })</code></li><li>使用 导入 + 文件名() + <code>store.getters名</code></li></ul></li><li>actions 方法<ul><li>定义 <code>export const mainStore = definStore('main',{ actions:{} })</code></li><li>使用  导入 + 文件名() + store.action方法()</li></ul></li><li>store 文件分割</li></ul></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">// vue-cli vue create<br>vue create &lt;project-name&gt;<br>// vite  xxx create vite<br>npm/yarn/pnpm create vite my-vue-app --template vue   <br>// xxx create vite 项目名  --temlate vue<br>yarn add pinia<br>npm i pinia<br>// vue2<br>npm i @vue/composition-api<br>// vue-cli<br>vue add vue-cli-plugin-pinia<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue3</span><br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// vuex createStore</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> { createPinia } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">creaetApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br>app.<span class="hljs-title function_">use</span>(pinia).<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// vue2</span><br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// vuex new Vue({ store }) // store文件导入</span><br><span class="hljs-keyword">import</span> { createPinia, <span class="hljs-title class_">PiniaVuePlugin</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">PiniaVuePlugin</span>)<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">'#app'</span>,<br>  pinia,<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="state数据"><a href="#state数据" class="headerlink" title="state数据"></a>state数据</h2><blockquote><ul><li>定义 <code>export const mainStore = defineStore('main',{ state:()=&gt;{}  })</code></li><li>使用<ul><li><code>const store = mainStore()</code></li><li><code>const { name } = storeToRefs(store)</code></li></ul></li><li>修改<ul><li><code>store.属性名</code> 单个数据修改</li><li><code>store.$path</code>多个数据修改（类似辅助函数）<ul><li><code>store.$path((state)=&gt;{ })</code>  + <code>store.$path({})</code></li></ul></li></ul></li></ul></blockquote><p>定义</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pinia main.js</span><br><span class="hljs-keyword">import</span> { createPinia } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>()).<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// vuex  stores.js</span><br><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>({ <span class="hljs-attr">state</span>:{} })<br><br><span class="hljs-comment">// pinia stores.js 定义</span><br><span class="hljs-comment">// 可以添加别名</span><br><span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><span class="hljs-comment">// 第一个参数唯一名称 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">'main'</span>,{<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">() =&gt;</span> { <br>    <span class="hljs-keyword">return</span>{  <span class="hljs-attr">count</span>:<span class="hljs-number">100</span>  }   <br>  },<br>  <span class="hljs-attr">getters</span>:{},<br>  <span class="hljs-attr">actions</span>: {<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>    },<br>  },<br>})<br><br><span class="hljs-comment">// xxx.vue 使用 setup()</span><br><span class="hljs-keyword">import</span> { mainStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/stores.js'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">mainStore</span>()<br>    store.<span class="hljs-property">count</span>++<br>    store.$patch({ <span class="hljs-attr">count</span>: store.<span class="hljs-property">count</span> + <span class="hljs-number">1</span> })<br>    store.<span class="hljs-title function_">increment</span>() <br>    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br>    <span class="hljs-keyword">return</span>{<br>      store<br>    }<br>  },<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>使用(解构store)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">{{ store.<span class="hljs-property">count</span><span class="hljs-comment">//count }}</span><br><br><span class="hljs-comment">// setup</span><br>&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> { storeToRefs } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br>  <span class="hljs-keyword">import</span> { mainStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/stores.js</span><br><span class="hljs-string">  const store = mainStore()</span><br><span class="hljs-string">  const { count } = storeToRefs(store) </span><br><span class="hljs-string">&lt;/script&gt;  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">// 响应式调用</span><br><span class="hljs-string">import { storeToRefs, } from '</span>pinia<span class="hljs-string">'</span><br><span class="hljs-string">export default defineComponent({</span><br><span class="hljs-string">  setup(){</span><br><span class="hljs-string">    const store = useStore()</span><br><span class="hljs-string">    const { name, doubleCount } = storeToRefs(store) // 添加响应式属性</span><br><span class="hljs-string">    const { count } = storeToRefs(store) OR const { count } = store ES解构没有响应性</span><br><span class="hljs-string">    return{</span><br><span class="hljs-string">      name,</span><br><span class="hljs-string">      doubleCount</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">  }</span><br><span class="hljs-string">})</span><br></code></pre></td></tr></tbody></table></figure><p>修改</p><ul><li><code>store.属性名</code> 单个数据修改</li><li><code>store.$path</code>多个数据修改（类似辅助函数）<ul><li><code>$path((state)=&gt;{ })</code>  + <code>$path({})</code></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// xxx.vue</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; {<br>  store.<span class="hljs-property">count</span>++<br>}<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">plus</span> = (<span class="hljs-params"></span>) =&gt;{<br>  store.$path({ <br>  <span class="hljs-attr">count</span>:store.<span class="hljs-property">count</span> + <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">msg</span>:<span class="hljs-string">'Hello'</span> + store.<span class="hljs-property">msg</span> <br>  })<br>}<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">del</span> = (<span class="hljs-params"></span>) =&gt;{<br>  store.$path(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> { <br>  state.<span class="hljs-property">count</span> = state.<span class="hljs-property">count</span> + <span class="hljs-number">100</span>,<br>    state.<span class="hljs-property">msg</span> = state.<span class="hljs-property">msg</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">10</span>? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span> <br>  })<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="getters计算"><a href="#getters计算" class="headerlink" title="getters计算"></a>getters计算</h2><blockquote><ul><li>定义 <code> export const mainStore = definStore('main',{ getters:{} })</code></li><li>使用 导入 + 文件名() + <code>store.getters名</code></li></ul></blockquote><ul><li>与vue的计算属性集合一样 有缓存 值没有改变多次调用同一个</li></ul><p>定义</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">definStore</span>(<span class="hljs-string">'main'</span>,{<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>{ <br>  <span class="hljs-keyword">return</span>{<br>      <span class="hljs-attr">msg</span>:<span class="hljs-string">'Message'</span>,<br>      <span class="hljs-attr">count</span>:<span class="hljs-number">1000</span><br>    }<br>  },<br>  <span class="hljs-attr">getters</span>:{<br>    <span class="hljs-title function_">reduceCount</span>(<span class="hljs-params"></span>){<br>      state.<span class="hljs-property">count</span>-- <span class="hljs-comment">//  this.count--</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'-1'</span>)<br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1&gt; store.<span class="hljs-property">reduceCount</span> &lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> store.reduceCount <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> store.reduceCount <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><br><span class="hljs-keyword">import</span> { mainStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'./stores.js'</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">mainStore</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store)<br></code></pre></td></tr></tbody></table></figure><h2 id="actions方法"><a href="#actions方法" class="headerlink" title="actions方法"></a>actions方法</h2><blockquote><ul><li>定义 <code>export const mainStore = definStore('main',{ actions:{} })</code></li><li>使用  store.action方法()</li></ul></blockquote><p>定义</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">definStore</span>(<span class="hljs-string">'main'</span>,{<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>{ <br>  <span class="hljs-keyword">return</span>{<br>      <span class="hljs-attr">msg</span>:<span class="hljs-string">'Message'</span>,<br>      <span class="hljs-attr">count</span>:<span class="hljs-number">1000</span><br>    }<br>  },<br>  <span class="hljs-attr">getters</span>:{},<br>  <span class="hljs-attr">actions</span>:{<br>    <span class="hljs-title function_">addCounter</span>(<span class="hljs-params"></span>){<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">`Hello<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.msg}</span> `</span>+ <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span><br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><ul><li>使用</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1&gt;{{ store.msg }}&lt;/h1&gt;<br>&lt;button @click="actionClickk"&gt;Action&lt;/button&gt;<br><br>&lt;script setup&gt;<br> import { mainStore } from './store.js'<br>   const store = mainStore()<br>   // 变更action<br>   const actionClick = () =&gt;{<br>     store.addCounter()<br>   }<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="store仓库"><a href="#store仓库" class="headerlink" title="store仓库"></a>store仓库</h2><ul><li>分离store文件<ul><li>使用 导入 + 文件().xxx //</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// use.js</span><br><span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">userStore</span>(<span class="hljs-string">'user'</span>,{<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>{<br>    <span class="hljs-keyword">return</span>{<br>       <span class="hljs-attr">msg</span>:<span class="hljs-string">"Hello Pinia"</span><br>    }<br>  }<br>})<br><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> { userStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'./use.js'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">mainStore</span>(<span class="hljs-string">'main'</span>,{<br>  <span class="hljs-attr">getters</span>:{<br>    <span class="hljs-title function_">addYear</span>(<span class="hljs-params"></span>){<br>       <span class="hljs-comment">// return this.msg + new Date()</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-title function_">userStore</span>().<span class="hljs-property">msg</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(tools)Google</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/Google.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/Google.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>搜索技巧</p><ul><li><p>国际化</p></li><li><p>aauw垂直化 指定的站内搜索</p></li><li><p>语法化</p></li><li><p>高级化</p><ul><li><p><code>“”</code></p></li><li><p>通配符*号</p></li><li><p>多个关键词空格隔开:</p></li><li><p><code>《》</code></p></li><li><p>filetype:pdf</p></li><li><p>and or <code>+ 与 -  非 | 或  </code></p></li><li><p><code>时间..时间 2016..2018</code></p></li><li><p>intitle inurl:gov.cn/:video   <code>allintitle allurl</code>   intext</p></li><li><p>site:xxx.com</p></li><li><p>SO/GH等站内搜索</p></li><li><p>Wiki(维基百科) Jira(项目管理系统) web archive(互联网档案馆)</p></li></ul></li></ul><p><strong>搜索结果要****搜索结果至少包含多个关键字中的任意一个</strong></p><p>GOOGLE用大写的OR表示逻辑“或”操作。OR一定是大写，小写查询时会被忽略。<strong>求包含两个或两个以上关键字</strong></p><p>用“+”或空格，如“围城钱钟书”和“围城+钱钟书”同效，搜索结果也是一样的。</p><p><strong>搜索结果要求不包含某些特定信息</strong></p><p>搜索：校园民谣（空格） –高晓松，注意第一个关键词后面要空格。</p><p><strong>搜索结果至少包含多个关键字中的任意一个</strong></p><p>GOOGLE用大写的OR表示逻辑“或”操作。OR一定是大写，小写查询时会被忽略。</p><p><strong>用“+”和“-”减少冗余信息</strong></p><p>通常情况下，用一个关键词查询，会得到很多和查询目的不相关的冗余信息。“+”和“-”能起到缩小搜索结果的范围，以提高查询结果的命中率。</p><p>例：查询天龙八部具体是哪八部</p><p>如果你不知道八部中的任何一部，但知道这与佛教相关，可以排除与金庸小说相关的记录。可以用“<a href="">天龙八部</a>+佛教–金庸”，可以迅速找到需要的资料。</p><p><strong>用句子做关键字，必须加英文引号。</strong></p><p><strong>1、对搜索的网站进行限制</strong></p><p>“site”表示搜索结果局限于某个具体的网站或者网站频道，如“sina.com.cn”,如果要排除某个网站或者域名范围内网页，只需要“-网站/域名”。</p><p>示例：搜索中文教育科研网站（edu.cn）上所有包含“钱钟书”和“杨绛”的页面。</p><p>搜索：钱钟书杨绛site:edu.cn”</p><p><strong>2、查询某一类文件</strong></p><p>“filetype：”搜索需要的查询内容结果以怎么样的文件格式体现，用得最多的文档搜索是PDF搜索。</p><p>示例：搜索关于儿童教育的pdf文档。</p><p>搜索：儿童教育filetype:PDF</p><p><strong>搜索的关键词包含在URL链接中</strong></p><p>“inurl”语法返回的网页链接中包含第一个关键字，后面的关键字则出现在链接中或者网页文档中。INURL语法和基本搜索语法的最大区别在于，前者通常能提供非常精准的专题资料。</p><p>示例：查询mv曲沧海一声笑</p><p>搜索：intul:mv沧海一声笑</p><p><strong>搜索的关键词包含在网页标题中</strong></p><p>“intitle”对网页标题栏进行查询,查询标题栏,通常可以找到高相关率的专题页面。</p><p>示例：查询明星刘若英的照片集</p><p>搜索：”intitle:刘若英写真”</p><p>百度</p><p>黑洞、旋转、<strong>流星雨</strong>，<strong>失重****嚼薯片</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)linux</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/Linux.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/Linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>基础</p><ul><li><p>安装</p><ul><li>yum(Centos)  yum update/list/   remove/search/clean package</li><li>apt(Ubuntu) apt update/upgrade (升级)</li></ul></li><li><p>远程</p><ul><li>ssh-keygen -t rsa -C “”</li><li>mkdir /root/.ssh  、 chmod 700 /root/.ssh 、vim /root/.ssh/authorized_keys public key</li></ul></li><li><p>文件目录</p><ul><li>文件查找</li><li>目录 ls（ll ls -l） cd pwd mkdir rm rmdif mv cp touch cat nl more less head tail</li></ul></li><li><p>用户权限</p></li><li><p>磁盘管理 df du</p></li><li><p>性能监控和优化 top free vmstat lostat lsof</p></li><li><p>网络命令 ipconfig route ping traceroute netstat telnet</p></li><li><p>其他命令 lin diff grep wc ps watch at crontab</p></li><li><p>cd / ~ cd cd 回退到上一层</p></li><li><p>ls -a 查看隐藏目录</p></li></ul><p>安装</p><ul><li>samba\dhcp\dns\ftp\mysql\nginx\</li><li>sercice xxx status/start/stop/restart</li><li>systemctl status/start/stop/restart xxx</li><li>开机自启 systemctl list-unit-files|grep xxx  systemctl list-unit-files|grep xxx</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(tools)vscode</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/VSCode.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/VSCode.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>代码截图</p><p> f1 polacode</p><p>Windows+R 命令输入mstsc命令，按Enter键即可</p><p>F12 或 Ctrl + Shift + I 打开开发者工具，在任意tab上按 Ctrl + Shift + P ，在弹出的输入框里输入 full size screenshot （其实不需要输入完整，可以自动补全），然后按回车即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)ajax</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/ajax.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/ajax.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>创建XHR(XMLHttpRequest) ==&gt; 请求 =&gt; 响应 =&gt; 发送</p><ul><li>创建XHR<ul><li>new XMLHttpRequest</li><li>new ActiveXObject(“Microsoft.XMLHTTP”)</li></ul></li><li>XHR请求 <code>open(method,URL,true)</code></li><li>onreadyStateChange事件<ul><li>readyState  = 4</li><li>status = 200</li></ul></li><li>XHR响应 responseText/XML<ul><li>responseText 获得字符串形式的响应数据</li><li>responseXML 获得 XML 形式的响应数据</li></ul></li><li>XHR发送 send()</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-string">''</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>){<br>xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>}<span class="hljs-keyword">else</span>{<br>xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcitveXObject</span>(<span class="hljs-string">"Microsoft.XMLHTTP"</span>);<br>}<br><br><span class="hljs-comment">// xlhttp.setRequestHeader("Content-type","application/x-www-form-unclencoded");</span><br><span class="hljs-comment">// 添加 HTTP 头向请求添加 HTTP 头。*header*: 规定头的名称*value*: 规定头的值</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">"GET"</span>,<span class="hljs-string">"/api"</span>,<span class="hljs-literal">true</span>)<br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>){<br>        <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>){<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>        }<br>    }<br>}<br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>({<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">'test.php'</span>,    <span class="hljs-comment">// 请求地址</span><br>  <span class="hljs-attr">jsonp</span>: <span class="hljs-string">'jsonpCallback'</span>,  <span class="hljs-comment">// 采用jsonp请求，且回调函数名为"jsonpCallbak"，可以设置为合法的字符串</span><br>  <span class="hljs-attr">data</span>: {<span class="hljs-string">'b'</span>: <span class="hljs-string">'异步请求'</span>},   <span class="hljs-comment">// 传输数据</span><br>  <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>){   <span class="hljs-comment">// 请求成功的回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  },<br>  <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) {}   <span class="hljs-comment">// 请求失败的回调函数</span><br>});<br></code></pre></td></tr></tbody></table></figure><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html">Fetch API 教程 - 阮一峰的网络日志</a></li></ul><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><ul><li>stringify 字符串化 parse 解析</li><li><code>JSON.parse('JS字符串')</code> 解析JS字符串（单引号）<code>JSON.parse('{"name":"zs"}')</code></li><li><code>JSON.stringify({})</code> 字符串化  <code>JSON.stringify({name:"zs"})</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)axios</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/axios.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/axios.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><h3 id="superfast"><a href="#superfast" class="headerlink" title="superfast"></a>superfast</h3><p>基于Promise的HTTP库 可以用在浏览器和Node.js</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">// axios<br>npm i axios <br>yarn add axios<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// vue-axios<br>npm install --save axios vue-axios<br><br>import Vue from <span class="hljs-string">'vue'</span><br>import axios from <span class="hljs-string">'axios'</span><br>import VueAxios from <span class="hljs-string">'vue-axios'</span><br>Vue.use(VueAxios, axios)<br>// Vue.axios == axios == this.axios == this.<span class="hljs-variable">$http</span><br>axios/Vue.axios/this.axios/this.<span class="hljs-variable">$http</span>.get(<span class="hljs-string">'xxx'</span>).<span class="hljs-keyword">then</span>(()=&gt;{}).catch(()=&gt;{})<br></code></pre></td></tr></tbody></table></figure><blockquote><p>API</p><ul><li>axios.xxx 请求方法的别名<ul><li>.then((response) =&gt; {}) 数据处理部分</li><li>.catch((error) =&gt;{}) 错误处理部分</li><li>请求方法别名 <code>axios.xxx</code><ul><li>request(config) 请求方法提供了别名、可以直接使用别名来发起请求</li><li>get、delete、head、option(url[, config])</li><li>post、put、patch(url[, data[, config]])</li></ul></li><li>并发 <ul><li>all([fuc(),fuc()]) [] 数组</li><li>spread(callback) 回调函数</li></ul></li><li>创建实例 create()</li></ul></li><li>axios({config})<ul><li>config: <ul><li>method url data:{ key:value }  params:{}  timeout: 1000  responseType:’xxx’ proxy:{}  auth: { } // <code>Authorization</code> 头</li></ul></li><li>.then((response) =&gt; {}) 数据处理部分</li><li>.catch((error) =&gt;{}) 错误处理部分</li></ul></li></ul><p>功能</p><ul><li>默认值 axios/instance.defaults.xxx = xx  create({ baseURL:xxx })<ul><li>baseURL headers.common[‘Authorization’]= AUTH_TOKEN headers.post[‘Content-Type’] = ‘application/x-www-form-urlencoded’</li></ul></li><li>超时 xxx.defaults.timeout = 1000  create({ timeout:1000 })</li><li>拦截器 <ul><li>添加拦截  axios/xxx.interceptors.request/response.use()  const xxx = axios.create()</li><li>移除拦截  axios.interceptors.request.eject(Interceptor)</li></ul></li><li>错误处理   if (error.response == 200) {} else if(){ }  validateStatus:(status) =&gt;{ return status &lt; 500 }</li><li>取消请求  axios.CancelToken.source()   cancelToken: source.token  source.cancel(‘xxx’);</li><li>JSON解析  ES6：qs.stringify(data)  Node：querystring.stringify({ foo: ‘bar’ }</li></ul></blockquote><h3 id="axios-xxx"><a href="#axios-xxx" class="headerlink" title="axios.xxx"></a>axios.xxx</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//GET GET方法传递参数 URL （/user?ID=12345） 和  params :{ } 传递参数 (传递参数的两种方式)</span><br>v-<span class="hljs-keyword">for</span>=msg  {{ msg.<span class="hljs-property">item</span> }}<br><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){ <span class="hljs-attr">msg</span>:[] }<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'url'</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> { <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = response.<span class="hljs-property">data</span> })<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { error })<br>}<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/user?ID=12345'</span>).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/user'</span>, {<br>    <span class="hljs-attr">params</span>: {<br>      <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>    }<br>}).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>){}).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>){})<br><span class="hljs-comment">//POST</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">''</span>).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">'/user'</span>,{ <span class="hljs-attr">firstName</span>:<span class="hljs-string">''</span>,<span class="hljs-attr">lastName</span>:<span class="hljs-string">''</span> }).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br><span class="hljs-comment">// 并发 axios.all</span><br>axios.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">fuc1</span>(),<span class="hljs-title function_">fuc2</span>()]).<span class="hljs-title function_">then</span>()<br></code></pre></td></tr></tbody></table></figure><h3 id="axios-1"><a href="#axios-1" class="headerlink" title="axios({})"></a>axios({})</h3><ul><li><code>axios({methods、url、data}).then().catch()</code></li><li><code>axios({ })  或 axios('')</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建实例</span><br>axios.<span class="hljs-title function_">create</span>([config])<br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>({<br>baseURL = <span class="hljs-string">''</span>,<br><span class="hljs-attr">timeout</span>:<span class="hljs-number">1000</span>,  <span class="hljs-comment">// 超时时间</span><br><span class="hljs-attr">headers</span>: {<span class="hljs-string">'X-Custom-Header'</span>: <span class="hljs-string">'foobar'</span>} <span class="hljs-comment">//头信息</span><br>}<br><span class="hljs-comment">// post                              </span><br><span class="hljs-title function_">axios</span>({methods、url、data})<br><span class="hljs-title function_">axios</span>({<br><span class="hljs-attr">methods</span>:<span class="hljs-string">'post'</span>,<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">'/user/12344'</span>,<br>  <span class="hljs-attr">data</span>:{<br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">''</span>,<br>    <span class="hljs-title class_">LastName</span>:<span class="hljs-string">''</span><br>  }<br>})<br><span class="hljs-comment">// get</span><br><span class="hljs-title function_">axios</span>({<br>  <span class="hljs-attr">method</span>:<span class="hljs-string">'get'</span>,<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">'http://bit.ly/2mTM3nY'</span>,<br>  <span class="hljs-attr">responseType</span>:<span class="hljs-string">'stream'</span><br>}).<span class="hljs-title function_">then</span>()<br><span class="hljs-comment">// 发送 GET 请求（默认的方法）</span><br><span class="hljs-title function_">axios</span>(<span class="hljs-string">'/user/12345'</span>);<br></code></pre></td></tr></tbody></table></figure><p>响应数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br><span class="hljs-comment">// data 由服务器提供的响应 数据</span><br>    data<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// status HTTP 状态码</span><br>    status<span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//  statusTest 来自服务器响应的HTTP状态信息</span><br>    statusText<span class="hljs-punctuation">:</span><span class="hljs-string">"OK"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// headers 服务器响应的头信息</span><br>    headers<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><br>    <span class="hljs-comment">// config 是为请求提供的配置信息</span><br>    config<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>配置默认值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全局默认值</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">'https://api.example.com'</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">'Authorization'</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'application/x-www-form-urlencoded'</span>;<br><span class="hljs-comment">// 自定义默认值</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>({<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'https://api.example.com'</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span><br>});<br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">'Authorization'</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br><span class="hljs-comment">// 配置指定时间</span><br><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>()<br>instance.<span class="hljs-property">default</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">1000</span><br>instance.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/longRequest'</span>, {<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>});<br></code></pre></td></tr></tbody></table></figure><p>拦截器</p><ul><li>添加和移除</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加拦截  axios/xxx.interceptors.request/response.use()</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) {<br>    <span class="hljs-keyword">return</span> config;<br>  }, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  });<br><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) {<br>    <span class="hljs-keyword">return</span> response;<br>  }, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  });<br><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>();<br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {});<br><br><span class="hljs-comment">// 移除拦截  axios.interceptors.request.eject(Interceptor)</span><br><span class="hljs-keyword">const</span> myInterceptor = axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<span class="hljs-comment">/*...*/</span>});<br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">eject</span>(myInterceptor);<br></code></pre></td></tr></tbody></table></figure><p>错误处理</p><ul><li>处理状态码</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">''</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span>{<br> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>) {}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(){} <span class="hljs-keyword">else</span>{ }<br>   <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) {  <span class="hljs-keyword">return</span> status &lt; <span class="hljs-number">500</span>; }<span class="hljs-comment">// 状态码范围</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>取消</p><ul><li><em>cancel token</em> 取消请求</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CancelToken</span> = axios.<span class="hljs-property">CancelToken</span>;<br><span class="hljs-keyword">const</span> source = <span class="hljs-title class_">CancelToken</span>.<span class="hljs-title function_">source</span>();<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">''</span>,{ <span class="hljs-attr">cancelToken</span>: source.<span class="hljs-property">token</span> })<br>source.<span class="hljs-title function_">cancel</span>(<span class="hljs-string">'Operation canceled by the user.'</span>);<br></code></pre></td></tr></tbody></table></figure><p>JSON解析</p><ul><li>ES</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span>;<br><span class="hljs-keyword">const</span> options = <br><span class="hljs-title function_">axios</span>({<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,<br>  <span class="hljs-attr">headers</span>: { <span class="hljs-string">'content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span> },<br>  <span class="hljs-attr">data</span>: qs.<span class="hljs-title function_">stringify</span>({ <span class="hljs-string">'bar'</span>: <span class="hljs-number">123</span> }),<br>  url,<br>});<br></code></pre></td></tr></tbody></table></figure><ul><li>Node</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">'querystring'</span>);  <br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">'http://something.com/'</span>, querystring.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">foo</span>: <span class="hljs-string">'bar'</span> }));<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)es6</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/es6.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/es6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h1><ul><li><a href="https://juejin.cn/post/6844903959283367950#heading-11">1.5万字概括ES6全部特性(已更新ES2020) - 掘金</a></li></ul><p>es6</p><ul><li>es6 js的下一代标准、ES2018(ES6第四个版本)、「ES8(实质上是ES2017) 不规范的概念」</li><li>let 变量 const 常量(大写) var<ul><li>全局 var 、函数 function、块级 let</li><li>TDZ</li></ul></li><li>解构赋值<ul><li>字符串解构  let [a,b,c] = “VCD” let {length:len} = “FBI”</li><li>数值和布尔解构 数值和布尔值会先转为对象 let {toString:s} = 124/true let {prop:x} = undefined/null</li><li>对象结构 const { x, y = 2 } = { x: 1 } 改名：const { x, y: z } = { x: 1, y: 2 }</li><li>数组结构  let [a=300,b,c] =[,200,300]</li><li>函数参数解构  function A([]) function B({})</li></ul></li><li>扩展<ul><li>字符串<ul><li>扩展<ul><li>模板字符串</li></ul></li><li>方法<ul><li>js<ul><li>charAt charCodeAt codePointAt localeCompare</li><li>search slice split sub substr substring</li><li>toLocaleLowerCase toLocaleUpperCase toLocaleCase toUpperCase toString valueOf</li></ul></li><li>String.raw 格式化转义字符</li><li>实例方法<ul><li>normalize Unicode 正规化</li><li>indexOf 字符串首次出现的位置 { includes startsWith endsWith 包含 返回布尔值 }</li><li>repeat 重复</li><li>padStart（补全长度，补全字符串） padEnd 补全长度<ul><li>123456’.padStart(10, ‘0’) // “0000123456”</li><li>‘01-30’.padStart(10, ‘YYYY-MM-DD’) // “YYYY-01-30”</li></ul></li><li>trimStart trimEnd 去除空格 trimRIght trimLeft trimLeft()是trimStart()的别名，trimRight()是trimEnd()</li><li>matchAll 返回所有匹配的 replaceAll 替换所有匹配 replace 替换一个</li><li>at 负索引 at[-1]</li></ul></li></ul></li></ul></li><li>正则</li><li>数值</li><li>函数<ul><li>箭头函数</li><li>函数参数的默认值</li><li>rest参数</li><li><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2></li></ul></li><li>数组<ul><li>Array.<ul><li>from 将类数组转化成数组</li><li>of 创建数组(10,23,90)/弥补Array(3)和new Array()的不足</li></ul></li><li>Array.prototype.<ul><li>copyWithin 把指定位置的成员复制到其他位置，返回原数组</li><li>find、findIndex、findLast、findLastIndex 找值和键</li><li>fill 填充数组</li><li>entries、keys、values 遍历数组</li><li>include</li><li>flat、flatMap</li><li>at</li><li>group、groupToMp (提案) 数组成员分组</li><li>数组的空位</li><li>sort</li><li>reduce</li><li>filter</li></ul></li></ul></li><li>对象<ul><li>对象的简化写法</li></ul></li><li>运算符<ul><li><code>指数 **</code></li><li><code>链式判断 ?.</code></li><li><code>Null判断 ??</code></li><li><code>逻辑赋值</code></li><li><code>扩展运算符</code></li></ul></li></ul></li><li>数据结构<ul><li>BigInt</li><li>Set &amp;&amp; Map</li><li>Symbol<ul><li>内置属性</li></ul></li><li>Array Buffer</li><li>迭代器</li></ul></li><li><code>操作对象</code>：<ul><li>Proxy</li><li>Reflect</li><li>Decorator</li></ul></li><li>类和模块<ul><li>class 类</li><li>module 模块</li></ul></li><li><code>异步编程</code><ul><li>回调函数和事件</li><li>Iterator 和 for..of 循环</li><li>async/await</li><li>Promise</li><li>Generator</li><li>异步遍历器</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)git</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/git.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/git.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单 - 阮一峰的网络日志</a></li><li><a href="https://ruanyifeng.com/blog/2019/12/git-undo.html">如何撤销 Git 操作？ - 阮一峰的网络日志</a></li></ul><p>基础</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1d538d63559402fbcfd82d68b08061c~tplv-k3u1fbpfcp-watermark.awebp" alt="Git经典流程图"></p><p>checkout == checkout HEAD / diff HEAD</p><p>Respository =&gt; Index   reset</p><p>Index =&gt; workspace checkout/diff /restore</p><p>暂存区恢复文件到工作区  git restore .</p><ul><li>ssh-keygen -t rsa -C “<a href="mailto:xxxxx@xxxxx.com">xxxxx@xxxxx.com</a>“</li><li>cat ~/.ssh/id_rsa.pub</li><li>ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></li><li>git config –global user.name “”</li><li>git config –global user.email “”</li></ul><p>查询</p><ul><li><p>git status git reflog (show) 查看历史操作记录</p><ul><li>git log 查看版本详细信息</li><li>git reflog 查看版本信息，以便确定要<strong>回到未来的哪个版本</strong><ul><li>git reflog git reflog –pretty=oneline</li></ul></li><li>git log -oneline –graph –all 图示显示所有分支的历史</li><li>git log –graph // graph 图git log –graph –pretty=oneline –abbrev-commit<ul><li>-oneline 一行</li><li>-n n个commit</li><li>xx 文件名</li><li>-p xx 某个文件的所有修改 git log 参数-p展开每次提交的内容差异，用-2显示最近的两次更新，如git log -p -2</li><li>–pretty=oneline xx  –pretty=raw    查看commit之间的父子关系（root commit是没有父提交的  git log –graph  # → 查看当前分支commit生成的树状图</li><li><code>git log --graph图</code>  查看分支合并图</li><li>git log –pretty=oneline xx  # → 查看xx文件提交的历史记录（只显示哈希值和提交说明）</li></ul></li></ul></li><li><p>git help git version</p></li></ul><p>基础</p><ul><li>git init [project-name]</li><li>git add . add 添加历史副本</li><li>git commit  -m “”  git commit -am “” (-a -m) 提交所有修改 git commit -amend 将暂存区和当前commit合并创建一个新commit去替换当前commit 添加标签<ul><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：git commit -a -m “commit_info” == git add . git commit -m “xxx”</li></ul></li><li>git remote -v 查看关联的远程仓库  + show origin  +<code>add origin &lt;git url&gt;</code>  rm [remote-name]  移除远程仓库 rename [old-name] [new-name] 修改某个远程仓库在本地的简称 git remote prune orign 删除远端 origin 已不存在的所有本地分支<ul><li>git remote add origin master / git remote add gitee [.gitUrl]</li></ul></li><li>git clone [url]</li><li>git rm –cached [file name] 从暂存区中删除文件，但是工作区依然还有该文件</li><li>git mv [file-original] [file-renamed] 重命名文件，并将已改名文件提交到暂存区</li><li>git blame <code>&lt;file&gt;</code></li><li><code>git reset --hard commit_id</code>  恢复到某个commit  git log 获取commit_id</li><li>git rebase xxx：假设当前分支与xxx分支存在共同部分common，该指令用xxx分支包括common在内的整体替换当前分支的common部分（原先xxx分支内容为common-&gt;diversityA，当前分支内容为common-&gt;diversityB，执行完该指令后当前分支内容为common-&gt;diversityA-&gt;diversityB）git rebase master</li></ul><p>暂存</p><ul><li>git stask list/clear/pop/apply/drop 解决开发功能没有完成，但是线上有bug要处理，可以先暂存取起来，保存起来，再切换分支 未处理完的变更先保存到stash 把当前的工作隐藏起来 等以后恢复现场后继续工作<ul><li>git stask list 查看暂存列表</li><li>git stash clear 删除全部暂存 <code>git stash drop &lt;stash@{ID}&gt;</code> 删除暂存</li><li>git stash  暂存</li><li>git  stash save -a “message” 标识储藏记录</li><li><code>git stash pop &lt;stash@{ID}&gt;</code> 恢复暂存改动 git stash apply 保留<ul><li>git stash pop 可取出最近一次储藏的修改到工作区中，并同时将该储藏从储藏记录列表中删除</li><li>git stash pop stash@{数字n} 取回某次stash的变更</li><li>git stash apply stash@{index}  取出指定index的储藏的修改到工作区 不删除暂存记录</li></ul></li><li>git stash drop stash@{index} 将指定index的储藏记录中删除</li></ul></li></ul><p>差异</p><ul><li>git diff<ul><li><code>git diff &lt;commit ID&gt;&lt;commit ID&gt;</code> 两个commit的差异</li><li>git diff [文件] 工作区和暂存区的差异 diff/[checkout]</li><li>git diff -cached [文件]</li><li>git diff -HEAD [文件]   工作区和本地仓库的差异 diff HEAD</li></ul></li><li>git difftool 提交1 提交2 比较两个commit 差异</li><li>git rebase 变基<ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul></li></ul><p>分支</p><ul><li><p>git branch r/v/av/a  m d 分支名</p><ul><li><p>查看分支 git branch 查看本地分支 -r(romte) 远程分支 -v 查看当前工作分支及本地分支 -av 查看本地分支和远端分支  -a 本地和远程分支</p></li><li><p>重命名分支 git branch -m 旧分支 新分支 / git branch -M main 强制</p></li><li><p>创建分支 git branch 分支名 创建分支  <code>git branch 新分支 指定分支</code> （基于指定分支创建新分支 git branch 新分支 commit的id （基于某个commit创建分支)</p><p>删除分支 git branch -d(delete) 分支名 / git branch -D 分支名 强行删除分支</p></li><li><p><code>git branch --set-upstream branch-name origin/branch-name</code> 建立本地分支和远程分支的关联</p></li></ul></li><li><p>git checkout -b 创建分支  分支名 切换分支</p><ul><li>git checkout 切换分支 // git switch 切换分支</li><li>git checkoub -b(branch) 分支名 （创建并切换分支） // git switch -c <name> 创建切换分支</name></li><li>git checkout -b 本地分支 origin/远程分支 拉取远程分支并创建新分支</li></ul></li><li><p>git merge 合并分支</p><ul><li>git merge A分支 （A合并到当前分支） git merge A分支 B分支 (A分支合并到B分支)</li><li>查看合并分支<ul><li>查看哪些分支与指定分支合并 git branch –merged</li><li>查看哪些分支没有合并到当前分支 git branch –no-merged</li></ul></li></ul></li><li><p>git fetch 取回分支 远程仓库 =&gt; 本地仓库 将远程仓库内容更新到本地</p><ul><li>git fetch -all 将远程仓库的所有更新取回本地</li><li><code>git fetch &lt;remote&gt;</code>  取回远程仓库的所有更新</li><li><code>git fetch &lt;远程仓库&gt; &lt;分支名&gt;</code>  取回远程仓库特定分支</li><li><code>git fetch origin &lt;branch-name&gt; &lt;local-name&gt;</code> 取回远程仓库的特定分支到本地仓库的具体分支</li><li><code>git fetch --p</code>  更新远程分支到本地仓库分支</li></ul></li><li><p>git push vs git pull</p><ul><li>git push 推送代码  git remote add gitee git<ul><li>git push (-f强制) origin master</li><li><code>git push origin --delete(-d) &lt;branch&gt; </code>  删除远程分支</li><li><code>git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt;</code>推送本地分支到远程仓库不同名分支</li><li>git push github master / git push gitee master</li></ul></li><li>git pull 拉取代码 类似 git fetch + git merge 远程仓库 =&gt; 工作区<ul><li>git pull / git pull origin master:master origin的master合并到当前master</li></ul></li><li>git pull –rebase origin master</li></ul></li></ul><p>撤销</p><ul><li><p>git checkout 撤销工作区的修改 暂存区 =&gt; 工作区(暂存区没有 本地仓库到工作区) 暂存区暂存了文件 工作区</p><ul><li>git checkout 文件名</li><li>git checkout 文件1 文件2 文件3 暂存区 =&gt; 工作区</li></ul></li><li><p>git revert HEAD 撤销提交 首选方式，没有任何丢失代码的风险 只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交</p><ul><li>git revert [倒数第一个提交]【第二个】</li></ul></li><li><p>git reset  丢弃提交  希望以前的提交在历史中彻底消失，而不是被抵消掉</p></li><li><p><code>git reset -hard HEAD</code>  git reflog</p></li><li><p>git reset 回滚 git</p><ul><li>暂存区 撤销<ul><li>本地仓库 =&gt; 暂存区</li><li>git revert <commit> // 版本号 // 回滚 到本地 不删除云端回滚记录</commit></li><li>git reset –hard <commit> // 回滚 删除云端回滚记录</commit></li><li>git reset –hard HEAD^  //下一个版本</li><li>git reset –hard 版本号 //版本号不用写</li></ul></li></ul></li><li><p>替换上一次提交 git commit –amend -m “Fixes bug #42”</p></li><li><p>从暂存区撤销文件 git  rm –cached [filename]</p></li></ul><p>标签 标签也是版本库的一个快照 发布一个版本时，我们通常先在版本库中打一个标签（tag）</p><ul><li><p><code>git show &lt;tagname&gt; git show v0.1 v1.4</code> 显示所有标签信息 / git show</p></li><li><p>git tag 列出所有标签  git tag -l “v1.4.2.*” 特定的搜索模式搜索</p><ul><li>两种标签<ul><li>轻量级标签<ul><li><code>git tag &lt;tagname v1.5&gt;</code></li><li>git tag -a v1.4 -m “tag message”  <code>git tag -a &lt;tagname&gt; -m "标签信息" </code></li></ul></li><li>含附注（带有说明的标签）的  -a/-s -m<ul><li><code>git tag -s v1.5 -m "tag message" </code>用GPG来签署标签</li></ul></li></ul></li><li>git tag -v1.5 验证已签署的标签</li><li>git tag -d 删除本地标签</li><li>git push origin :refs/tags/v0.9 删除远程标签</li></ul></li><li><p>git push origin 将标签推送到远程仓库</p></li><li><p>git push origin –tage 将本地所有标签推送到远程仓库</p></li></ul><p>功能分支工作流 Github flow</p><ul><li>创建feature统一合并到maste</li></ul><p>Gitflow WorkFlow</p><ul><li>git pull</li><li>git checkout -b feat-login_2020 创建开发分支</li><li>git push 推送分支</li><li>暂存 git stash 暂存 git stash pop 恢复</li><li>git status</li><li>git diff 查看文件diff文件修改</li><li>git add . / git add 文件</li><li>git commit . 提交本次修改 git commit –amend 将暂存区和当前commit合并创建一个新commit去替换当前commit</li><li>git fetch –all 拉取所有远程仓库代码</li><li>git merge origin/maste git merge origin/develop  如果是多人协作，merge同事的修改到当前分支（先人后己原则）  合并远程仓库</li><li>git push</li><li>git merge –no-ff origin/develop  // 同事review code之后管理员合并origin/develop到远端主干origin/master</li><li>git rm 删除工作区文件，并且将这次删除放入暂存区</li></ul><p>.gitignore git忽略文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)html5</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/html5.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/html5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h1><p>html 超文本标记语言</p><ul><li><p><code>&lt;!DOCTYPE html&gt; 文档声明类型、head、body</code></p><ul><li>head title base link meta script style meta(页面元信息) base 定义了页面链接标签的默认链接地址</li><li>link <code>rel href media=“”</code></li><li>meta<ul><li>content  http-equiv（Content-Type、refresh、text/html;charset=UTF-8） name（author 作者 、description 描述、keywords 关键字、viewport  视图） charset （UTF-8） scheme   content【固定属性】</li><li><code>&lt;meta http-equiv="refresh" content="30"&gt;</code></li><li><code>&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;</code></li><li><code> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</code></li><li><code>&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;</code></li></ul></li></ul></li><li><p><code>&lt;标签名 属性1="属性值1" 属性2="属性值2" …&gt; 内容 &lt;/标签名&gt;  </code></p></li><li><p>块级元素： div、h1-h6[10~+2 24]、ul、ol、li、dl、table、p、hr、form 独占一行 width\height\padding\margin可改变</p></li><li><p>内联元素：span、a、img、input、textarea、label、select 并联 width、height、padding-top/padding-bottom、margin-top/margin-bottom都不可改变，就是里面文字或图片的大小</p></li><li><p>line-height = height 单行文字居中</p></li><li><p>h1~h6、p、br、hr、div、span、</p><ul><li>文本格式化 i/em b/strong sub/sup  u/ins s/del small</li><li>计算机输出 code kdb samp var per 预定义格式</li><li>引文、引用、标签定义 abbr(缩写) address(地址) bdo(文字方向) dfn(定义一个项目) blockquote(长引用) q(短引用) cite(斜体)</li></ul></li><li><p>ul(无序)/ol(有序) li   dl dt dd(ltd 描述列表)</p></li><li><p>单标签 <code>&lt;br/&gt; &lt;input/&gt;</code></p></li><li><p>img(src alt) map 图形地图 area 地图可点区域</p><ul><li>img srcset sizes align图片对齐方式</li><li><code>srcset</code>属性和<code>sizes</code>属性分别解决了像素密度和屏幕大小的适配</li><li><code>&lt;srcset&gt;属性</code>：指定<code>多张图像，适应不同像素密度的屏幕</code>。它的值是一个逗号分隔的字符串，每个部分都是一张图像的 URL，后面接一个空格，然后是像素密度的描述符<ul><li><code>&lt;img srcset="foo-320w.jpg,foo-480w.jpg 1.5x,foo-640w.jpg 2x" src="foo-640w.jpg"&gt;</code> 像素密度描述符，格式是像素密度倍数 + 字母x。1x表示单倍像素密度，可以省略。浏览器根据当前设备的像素密度，选择需要加载的图像</li><li><code>&lt;sizes&gt;属性</code>:像素密度的适配，只适合显示区域一样大小的图像。如果希望不同尺寸的屏幕，显示不同大小的图像，<code>srcset</code>属性就不够用了，必须搭配<code>sizes</code>属性<ul><li><code>sizes="(max-width: 440px) 100vw,(max-width: 900px) 33vw,254px"</code></li></ul></li></ul></li><li>base64 图片压缩模式 精灵图 雪碧图</li></ul></li><li><p><code>&lt;picture&gt;&lt; source&gt;</code></p></li><li><p><code>figure  figcaption</code> <code>&lt;figure&gt;</code>标签可以理解为一个图像区块 <code>&lt;figcaption&gt;</code> 图片的文本描述 放置标题</p></li><li><p>a 锚点 <code>href="mailto: tel: "</code> <code>target  </code>title name download</p><ul><li><code>&lt;a href="" title="" target="" id="" download="" rel="" type="" ping=""&gt;&lt;/a&gt;</code></li><li><code>target </code> _blank _self _parent _top</li><li>referrerpolicy crossorigin loading 懒加载</li></ul></li><li><p>table</p><ul><li>table th tr td colgroup col</li><li>属性：width、border、align、frame rules</li><li>caption 表格标题</li><li>table thead tbody tfoot + tr + td</li><li>table th 标题栏  tr 行  td 列<ul><li>border=”0”</li><li>cellspacing 表格单元格之间的空间</li><li>cellpadding 单元格与单元格内容之间的距离</li></ul></li><li>合并单元格 作用在 td 上<ul><li>colspan 合并列</li><li>rowspan  合并行</li></ul></li><li>colgroup 表格列的组</li><li>col 列属性</li></ul></li><li><p>form</p><ul><li>form 表单域</li><li>label 提升信息</li><li>input 输入框/select下拉菜单/textarea文本域：表单控件（表单元素）</li></ul></li><li><p>iframe width height src name frameborder</p></li><li><p>表单 form</p><ul><li>form<ul><li>action=“URL”(规定当提交表单时向何处发送表单数据。)<br>name(名称)、<br>method(get、post)(规定用于发送表单数据的 HTTP 方法)、<br>target（_black、_self、_parent、_top）、<br>enctype （application/x-www-form-urlencoded、multipart/form-data、text/plain)(规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=”post” 的情况）)<br>accept=”MIME_type”(HTML5 不支持。规定服务器接收到的文件的类型。（文件是通过文件上传提交的）)<br>navalidate=”navalidate”(如果使用该属性，则提交表单时不进行验证。)<br>accept-charset(规定服务器可处理的表单数据字符集。)<br>autocomplete=”on/off”(规定是否启用表单的自动完成功能。)</li></ul></li><li>input 输入框<ul><li><p>type=”text(文本域)/password(密码)/radio(单选按钮)/checkbox(复选框)/submit(提交按钮)/button(按钮)/reset(重置按钮)/file(文件上传)email(电子邮箱)”</p></li><li><p>button（按钮） 、checkbox（复选框） 、radio（单选框） 、reset、submit 、image (图像作为提交按钮)</p></li><li><p>color （拾色器）</p></li><li><p>date（date 控件（包括年、月、日，不包括时间）） 、datetime （ date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，基于 UTC 时区））、datetime-local （ date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，不带时区））、time（用于输入时间的控件（不带时区）） 、month ( month 和 year 控件（不带时区）)、week( week 和 year 控件（不带时区）)</p></li><li><p>email 、search、tel 用于输入电话号码的字段、text 、 url、password</p></li><li><p>file (文件选择字段和 “浏览…” 按钮，供文件上传)</p></li><li><p>hidden (隐藏输入字段)</p></li><li><p>number (用于输入数字的字段)、range 用于精确值不重要的输入数字的控件（比如 slider 控件） 滑动控件</p><ul><li><a href="https://www.runoob.com/tags/att-input-max.html">max</a> - 规定允许的最大值。</li><li><a href="https://www.runoob.com/tags/att-input-min.html">min</a> - 规定允许的最小值。</li><li><a href="https://www.runoob.com/tags/att-input-step.html">step</a> - 规定合法数字间隔。</li><li><a href="https://www.runoob.com/tags/att-input-value.html">value</a> - 规定默认值。</li></ul></li></ul></li><li>textarea 文本域 rows cols<ul><li>name（名称）、rows=”10”(文本区域内可见的行数。)、cols=”30”(文本区域内可见的宽度)、maxlength(规定文本区域允许的最大字符数)、disabled=”disabled”(规定禁用文本区域)、readonly</li></ul></li><li>fieldset 一组相关的表单元素，并使用外框包含起来</li><li>legend <code>filedset</code>元素的标题</li><li>select option  optgroup 下拉列表选项<ul><li><code>&lt;option selected="selected"&gt;</code></li></ul></li><li>label  标签</li><li>button 按钮  name(名称)、type=”button/reset/submit”(按钮类型)、value(按钮的初始值，可由脚本修改)</li><li>datalist 输入控件选项列表  keygen  密钥对  output 计算结果</li></ul></li><li><p>符号实体 字符实体 &amp; + lt/glt/reg/copy/trade/amp(和号)/deg(摄氏度)/yen/nbsp+;</p></li><li><p>iframe src width height  frameborder=”0”  class id style title  所有主流浏览器都支持 <code>&lt;iframe&gt; </code>标签</p><ul><li>frameset标签 HTML5 不支持 src</li><li>name 名字 src 文档的url</li><li>设置高度和宽度 <code>width</code> 和 <code>height</code></li><li>移除边框: <code>frameborder="0"</code></li><li><code>scrolling </code>  去除滚动条</li></ul></li><li><p>media</p><ul><li>video audio</li><li>插件<ul><li>object 插件  插入对象Java 小程序 PDF阅读器 Flash 播放器<code>object</code> data type height width usemap name form</li><li>embed</li></ul></li></ul></li><li><p>属性 class id style title</p></li><li><p>color</p><ul><li>RGB 和 RGBA（Color RGBA） color: rgba(red, green, blue, alpha);</li><li>HSL 和 HSLA<ul><li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li><li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li><li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li><li>A：Alpha透明度。取值0~1之间。</li></ul></li><li>颜色名</li><li>颜色值（十六进制颜色(Color HEX)） #000000  ~ #FFFFFF</li><li>预定义/跨浏览器颜色名</li></ul></li><li><p>单位 px em rem % vh/vw/vmin/vmzx</p></li><li><p>em 是父元素 字体大小</p></li><li><p>rem 移动端布局方式  root em 相对单位 rem的基准是相对 html元素的字体大小 <code>html font-size=12px 非根设置 width:2rem// 24px</code> 修改html rem 从而修改页面中所有的元素大小</p></li></ul><p>html5</p><ul><li>新特性：新元素、新属性、canvas和svg video 和 audio<ul><li>表单元素 和 属性</li><li>本地存储、SQL数据、应用程序缓存</li><li>Web 应用 （地理位置、拖放、Workers、SSE、WebSocket）</li></ul></li><li><code>&lt;!DOCTYPE html&gt;</code> html5shiv</li><li>结构元素<ul><li>主体结构元素<ul><li>article 代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容</li><li>section 对页面中的内容进行分块</li><li>nav 导航</li><li>aside 当前页面或文章的附属信息部分，包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类似的有别于主要内容的部分</li><li>time</li></ul></li><li>非主体结构元素 header address main footer<ul><li>每一个网页内部只能放置 一个main元素。不能将main元素放置在任何article、aside、footer、header、nav元素内部</li></ul></li></ul></li><li>新增元素<ul><li>绘画元素  1个<ul><li>canvas 标签定义图形，比如图表和其他图像。该标签基于 JavaScript 的绘图 API</li></ul></li><li>多媒体元素 5个<ul><li>audio 定义音频内容</li><li>video  定义视频（video 或者 movie）</li><li>source 定义多媒体资源 <code>&lt;video&gt;</code> 和<code> &lt;audio&gt;</code></li><li>embed 定义嵌入的内容，比如插件。</li><li>track 为诸如<code> &lt;video&gt;</code> 和<code> &lt;audio&gt;</code> 元素之类的媒介规定外部文本轨道。</li></ul></li><li>新表单元素 3个<ul><li>datalish 定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。</li><li>keygen 规定用于表单的密钥对生成器字段。</li><li>output 定义不同类型的输出，比如脚本的输出。</li><li>input<ul><li>color 颜色</li><li>email 邮箱</li><li>tel （电话号码）</li><li>number 数值的输入域</li><li>range  类型显示为滑动条</li><li>search 搜索</li><li>url 网址</li><li>file 文件</li><li>date（日期）、datetime(datetime 类型允许你选择一个日期（UTC 时间）)、datatime-local(允许你选择一个日期和时间 (无时区))、month(月份)、time（时间）、week（周和年）</li><li>min max</li></ul></li></ul></li></ul></li><li>语义元素 语义元素 = 有意义的元素 23个<ul><li>header nav article aside section footer</li><li>figure figcaption dialog</li><li>pogress meter mark time</li><li>datails summary</li><li>dbi wbr</li><li>注音 ruby rt rp</li><li>command</li></ul></li></ul><p>结构命名</p><ul><li>header 页头</li><li>main 页面主体</li><li>footer 页尾</li><li>content/container 内容</li><li>container 容器</li><li>nav  导航<ul><li>miannav 主导航</li><li>subnav 子导航</li><li>topnav 顶导航</li><li>sidebar 边导航</li><li>leftsidebar 左导航</li><li>rightsidebar 右导航</li></ul></li><li>menu 菜单<ul><li>submenu 子菜单</li></ul></li><li>title 标题</li><li>summary 摘要</li><li>sidebar 侧栏</li><li>column 栏目</li><li>wrapper 页面外围控制</li><li>logo 标志</li><li>banner 广告</li><li>login 登陆</li><li>loginbar 登录条</li><li>register 注册</li><li>search 搜索</li><li>shop 功能</li><li>title 标题</li></ul><p>位置</p><ul><li>left center right 左中右</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)js</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/javascript.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/javascript.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>输入&amp;输出<ul><li>输入 <code>prompt()、confirm()</code></li><li>输出 <code>console.log()、document.write()、innerHTML ="" alert()</code></li></ul></li><li>变量和常量<ul><li>var / const 常量 大写下划线命名</li><li>let 变量 驼峰式命名法</li><li>变量提升 先使用后声明</li></ul></li><li>标识符 vs 关键字</li><li>数据类型<ul><li>声明变量类型 直接声明、new 声明(new Number)</li><li>基本(原始)数据类型<ul><li>Number</li><li>String</li><li>Boolean</li><li>Null</li><li>Underfined</li><li>BigInt</li><li>Symbol</li></ul></li><li>复杂(引用)数据类型</li></ul></li><li>运算符<ul><li>算术<ul><li>+、- 、 * 、 / 、% 、++ 、 –</li><li>** 求幂 指数运算符</li><li><code>-</code>负数</li><li><code>+x</code> 数值运算符</li></ul></li><li>赋值  = 、+=、-=、*=、/=、%=</li><li>字符串  <code>+ += ${}</code> 模板字符串</li><li>比较 <code>==、===、!=、!==、&gt;、&lt;、&gt;=、&lt;=</code><ul><li>相等比较<ul><li>(不)相等运算符 == !==</li><li>严格不、相等运算符<code>   === !===</code></li></ul></li><li>非相等比较</li></ul></li><li>条件 变量 = (条件) ? 值1（true）:值2（false）</li><li>布尔(逻辑) 取反运算符（!）非 【6个值true/und/false/0/NaN/空字符串  其余false】  且运算符（&amp;&amp;） 与假假  或运算符（||） 或真真</li><li>位 按位与 ( &amp; ) AND(和) 按位或 ( | ) OR(或) 按位异或 ( ^ ) 按位取反  ( ~ ) 非 左移 ( &lt;&lt; ) 右移 ( &gt;&gt; ) 无符号右移 ( &gt;&gt;&gt; ) 异或运算符 xor  x &gt;&gt;= y x = x &gt;&gt; y</li><li>逗号 ，</li><li>空值合并 ??</li><li>void</li></ul></li><li>流程控制<ul><li>顺序</li><li>选择<ul><li>if else</li><li>switch(){ case值: 语句; break; default: ; }</li><li>(条件) ? 表达式1 : 表达式2</li></ul></li><li>循环<ul><li>label</li><li>for while do(){} while for in for of forEach(value,key)</li><li>break continue</li></ul></li></ul></li></ul><h2 id="五大对象"><a href="#五大对象" class="headerlink" title="五大对象"></a>五大对象</h2><p>对象</p><ul><li>js 是面向对象的语言 js不创建类 基于prototype 而不是基于类</li><li>prototype（原型对象） js对象都会从prototype 中继承属性和方法</li><li>for in</li></ul><p>内置对象</p><ul><li><p>new Array array.prototype var obj = { }</p></li><li><p>for in Object.keys delete 删除属性</p></li><li><p>访问 <code>. [] </code></p></li><li><p>Array</p><ul><li>constructor length prototype</li><li>of from isArray</li><li>fill 填充 concat 连接 join 转字符串 toString 转字符串 reverse 翻转 sort 排序 valueof</li><li>slice 截取 shift unshift（增） 头  push pop（删） 末尾 splice 添加 + 删除 修改 array 的万能方法</li><li>indexOf lastIndexOf</li></ul></li><li><p>String</p><ul><li>constructor prototype length</li><li>fromCharCode Unicode 转 字符串</li><li>concat repeat slice substring substr 截取</li><li>trim toLoweCase toUpperCase replace(All)</li><li>数组 =&gt; 字符串 join + toString  字符串=&gt; 数组 split valueOf</li><li>fromCharCode()将 Unicode 编码转为字符</li><li>charCodeAt()返回在指定的位置的字符的 Unicode 编码。</li><li>localeCompare  比较两个字符串</li><li>match()查找找到一个或多个正则表达式的匹配。</li><li>search()查找与正则表达式相匹配的值。</li><li>charAt() 获取（n+1）指定索引位置的字符 charCodeAt()  获取索引位置字符的Unicode值</li><li>indexOf lastindexOf</li></ul></li><li><p>RegExp</p></li><li><p>Number</p><ul><li>parseFloat/int isFinte isInteger isNaN isSafeInteger</li><li>toString toFixed toExponential toPrecision toLocaleString</li></ul></li><li><p>Boolean</p><ul><li>toString valueOf constructor prototype</li></ul></li><li><p>Obeject</p><ul><li>keys values valueOf toString</li></ul></li><li><p>Date</p><ul><li><h2 id="now-parse-UTC-to类、get类-、set类"><a href="#now-parse-UTC-to类、get类-、set类" class="headerlink" title="now parse UTC to类、get类 、set类"></a>now parse UTC to类、get类 、set类</h2></li></ul></li></ul><p>函数</p><ul><li><p>函数概念</p><ul><li>JS 函数(一等公民)可以看做一种值 与其他数据类型地位平等<ul><li>赋值给变量和对象的属性</li><li>当作参数传入给其他函数</li><li>作为函数的返回结果</li><li>函数可以作为一个可以执行的值 函数表达式</li></ul></li></ul></li><li><p>函数声明</p><ul><li>function<ul><li>function 函数名(形参){  return;}<ul><li>return 多个值 数组 对象</li><li>arguments  只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array</li><li>rest 接受任意参数 rest参数只能写在最后，前面用…标识</li></ul></li><li>变量<ul><li>局部变量 外部变量</li></ul></li><li>参数</li></ul></li><li>函数命名<ul><li>用动词前缀来开始一个函数 一个函数应该只包含函数名所指定的功能，而不是做更多与函数名无关的功能。 <code>set... getxxx createxxx checkxxx</code></li></ul></li><li>函数表达式 匿名函数赋值给变量<ul><li>var f = function(){  };</li><li>var f = function f(){  };</li></ul></li><li>new/Function() new/ Function(参数1，参数2，函数体) 可以多个参数 最后一个参数是函数体 参数都是双引号</li></ul></li><li><p>函数调用</p><ul><li>作为一个函数调用  <code>函数名()</code></li><li>函数作为方法调用（对象里面的方法） <code>var obj = {  full:funciton(){ rerturn this.firestname }}</code></li><li>使用构造函数<code>new 构造函数</code>调用</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 构造函数:</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">arg1, arg2</span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = arg1;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>  = arg2;<br>}<br><br><span class="hljs-comment">// This creates a new object</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-string">"John"</span>,<span class="hljs-string">"Doe"</span>);<br>x.<span class="hljs-property">firstName</span>;                             <span class="hljs-comment">// 返回 "John"</span><br></code></pre></td></tr></tbody></table></figure><ul><li>作为函数方法调用函数  在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法</li></ul></li><li><p>函数参数</p><ul><li>实参 实际使用的参数</li><li>形参 没用的占位置的参数 定义函数使用的参数 接受调用函数时传递的参数</li><li>默认值 function func(x,y = 100)</li></ul></li><li><p>返回值</p></li><li><p>函数种类</p><ul><li>匿名函数 没有名字的函数 <code>let fuc = function(){}</code></li><li>构造函数 new Function() const fuc = new Function(“a”,”b”,”return a* b”);</li><li>自调用函数（立即调用函数）IIFE 实际上是一个匿名自调用函数（没有函数名）<ul><li>function f(){  //code  }();</li><li>(function(){ //code })();</li><li>(function(){}());</li></ul></li><li>箭头函数 ES6新增箭头函数<ul><li>(参数1, 参数2, …, 参数N) =&gt; { 函数声明 }</li><li>(参数1, 参数2, …, 参数N) =&gt; 表达式(单一)</li><li>(参数1, 参数2, …, 参数N) =&gt;{ return 表达式; }<br>(…args) =&gt; expression</li><li>(单一参数) =&gt; {函数声明}</li><li>单一参数 =&gt; {函数声明}</li><li>() =&gt; {函数声明}</li></ul></li><li>回调函数 也就是说函数不是立即执行的或者是执行的，而是定义好函数等待被回头调用的</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">question, yes, no</span>) {<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(question)) <span class="hljs-title function_">yes</span>()<br>  <span class="hljs-keyword">else</span> <span class="hljs-title function_">no</span>();<br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y, f</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>(x) + <span class="hljs-title function_">f</span>(y);<br>}<br><span class="hljs-title function_">add</span>(-<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">abs</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li>函数表达式  <code>var func = function(a,b){ return a +b }</code></li><li>高阶函数<ul><li>函数可以作为变量</li><li>函数可以作为返回值</li></ul></li></ul></li><li><p>函数的属性和方法</p><ul><li>属性 name 函数名 length 参数个数 toString 返回一个字符串</li><li>方法 对象中的函数 方法中的this、始终指向当前对象<ul><li>call和apply  call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。<ul><li>通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用</li></ul></li><li>call 值 将函数作为对象的方法来调用 将指定参数传递给该方法<code>Math.max.call(null, 3, 5, 4);</code></li><li>apply 数组  <code>myFunction.apply(myObject, myArray);Math.max.apply(null, [3, 5, 4])</code></li><li>bind</li></ul></li></ul></li><li><p>函数的作用域</p><ul><li>全局作用域</li><li>局部作用域<ul><li>函数作用域</li><li>块级作用域</li></ul></li></ul></li><li><p>函数提升</p><ul><li>提升（Hoisting）应用在变量的声明与函数的声明 函数表达式不存在函数提升</li></ul></li><li><p>eval(表达式)</p></li><li><p>void 关键字</p></li><li><p>闭包</p></li><li><p>递归 函数可以调用自身就是递归</p></li><li><p>防抖和节流</p><ul><li>防抖 解决什么：使用在一些点击请求的事件上，避免多次点击向后端发送多次请求<br>是什么：事件在触发n秒后再执行回调，在n秒后触发，又重新计时（就是每隔n秒执行一次，避免重复操作）</li><li>节流  解决什么：使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。（滚动上，减低使用频率）<br>是什么：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。（每个单位时间多次操作只执行一次）</li></ul></li><li><p>函数是对象</p></li><li><p>函数柯里化 把一个多参数的函数，转化为单参数函数</p></li></ul><p>DOM</p><ul><li>DOM 元素节点<ul><li><p>获取DOM</p><ul><li>getElementById(“id名”)</li><li>getElementsByTagName(“标签名”)[下标值]</li><li>getElementByClassName()</li><li>querySelector()和querySelectorAll()</li><li>getElementsByName()</li></ul></li><li><p>创建DOM</p><ul><li>createElement() 创建标签元素</li><li>createTextNode() 创建文本节点（添加文本）</li><li>createDocumentFragment() 创建文档片段</li><li>createAttribute 创建属性</li><li>createComment 创建注释</li></ul></li><li><p>插入DOM</p><ul><li>appendChild()</li><li>insertBefore</li><li>innerHTML/Text()</li><li>outHTML/Text()</li><li>textConent()</li></ul></li><li><p>删除DOM</p><ul><li>removeChild()</li><li>removerNode</li></ul></li><li><p>复制DOM</p><ul><li>cloneNode()</li></ul></li><li><p>替换DOM</p><ul><li>replaceChild()</li></ul></li></ul></li><li>DOM 属性节点<ul><li>html属性 ： hasAttribute(key);removeAttribute(“attribute”) attribute=新属性值 setAttribute</li><li>css属性： getComputedStyle() ele.style.styleName=styleValue</li></ul></li></ul><p>BOM</p><ul><li><p>window</p><ul><li><p>方法</p><ul><li><p>open()、close()、print()、stop()</p></li><li><p>move/resize/scroll + By/To</p><ul><li>moveTo() 把窗口的左上角移动到一个指定的坐标<br>moveBy()可相对窗口的当前坐标把它移动指定的像素。<br>resizeBy()按照指定的像素调整窗口的大小。<br>resizeTo()ß把窗口的大小调整到指定的宽度和高度。<br>scrollBy()按照指定的像素值来滚动内容。<br>scrollTo()把内容滚动到指定的坐标。</li></ul></li><li><p>base-64 编码 atob()解码一个 base-64 编码的字符串。 btoa()创建一个 base-64 编码的字符串。</p></li><li><p>blur focus</p></li><li><p>postMessage()安全地实现跨源通信。</p></li><li><p>createPopup()创建一个 pop-up 窗口。<br>getSelection()返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。<br>getComputedStyle()获取指定元素的 CSS 样式。<br>matchMedia()该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。</p></li></ul></li><li><p>属性</p><ul><li>length name close top parent self</li><li>defaultStatus设置或返回窗口状态栏中的默认文本。 status设置窗口状态栏的文本。</li><li>窗口<ul><li>outerHeight返回窗口的外部高度，包含工具条与滚动条。<br>outerWidth返回窗口的外部宽度，包含工具条与滚动条。<br>pageXOffset设置或返回当前页面相对于窗口显示区左上角的 X 位置。<br>pageYOffset设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</li></ul></li></ul></li><li><p>计时</p><ul><li><p>不断 setInterval(“function”,milliseconds) 不断执行 clearInterval(intervalVariable)</p></li><li><p>一次 setTimeout(“function”,milliseconds) 一次性 clearTimeout(timeoutVariable)</p></li></ul></li><li><p>弹窗 alert() 警告框 confirm() 确认框 prompt() 提示框（输入框）</p></li></ul></li><li><p>navigator</p><ul><li>appCodeName\appName\appVersion<br>navigator.appCodeName  浏览器代号<br>navigator.appName  浏览器名称<br>navigator.appVersion  浏览器版本<br>navigator.cookieEnabled  启用Cookies<br>navigator.platform  硬件平台<br>navigator.userAgent  用户代理<br>navigator.systemLanguage  用户代理语言<br>navigator.language：浏览器设置的语言</li><li>javaEnabled()指定是否在浏览器中启用Java<br>taintEnabled()规定浏览器是否启用数据污点(data tainting)</li></ul></li><li><p>cookie</p></li><li><p>location</p><ul><li>重载 reload\replace\assign<ul><li>location.reload()重新加载页面</li><li>location.replace()用新的文档替换当前文档</li><li>location.assign() 方法加载新的文档</li></ul></li><li>location.href = “url” /href返回当前页面的URL<ul><li>protocol 协议 hostname  主机的域名 port pathname search hash</li></ul></li></ul></li><li><p>screen</p><ul><li>width height 屏幕的总高度</li><li>availWidth./Height 返回访问者可用屏幕的宽度/高度</li><li>colorDepth pixelDepth</li><li>screenLeft返回相对于屏幕窗口的x坐标<br>screenTop返回相对于屏幕窗口的y坐标<br>screenX返回相对于屏幕窗口的x坐标<br>screenY返回相对于屏幕窗口的y坐标</li><li>window.innerWidth/innerHeight 返回窗口的文档显示区的高度 宽度 浏览器窗口的内部高度/宽度（包括滚动条）</li><li>outerWidth和 outerHeight  获取浏览器窗口的整个宽高</li></ul></li><li><p>history</p><ul><li>length</li><li>back() 后退、forward() 向前、go()</li></ul></li><li><p>存储 key get/set/removeItem clear</p><ul><li><p>cookie document.cookie = “username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/“  修改直接重写 删除 设置以前的时间 document.cookie = “username=; expires=Thu, 01 Jan 1970 00:00:00 GMT”;</p></li><li><p>window.localStorage</p><ul><li>setItem getItem removeItem clear</li><li>设置 storage[“a”] = 1 storage.b = 1 storage.setItem(“c”,2);</li></ul></li><li><p>window.sessionStorage</p><ul><li>set/get/removeItem clear</li></ul></li></ul></li></ul><p>Event 事件</p><ul><li><p>常用事件</p><ul><li><p>鼠标</p><ul><li><p>点击onclick/ondbclick、onmousedown / mouseup —— 当在元素上按下/释放鼠标按钮时</p></li><li><p>onmousemove 移动</p></li><li><p>移除与移入</p><ul><li>mouseover / mouseout —— 当鼠标指针移入/离开一个元素时</li><li>mouseleave/mouseenter 移除/移入</li></ul></li><li><p>oncontextmenu 菜单</p></li></ul></li><li><p>键盘</p><ul><li>onkeypress 按键被按下并松开 onkeydown 按下按键 onkeyup松开按键</li><li>keyCode</li></ul></li><li><p>进度</p></li><li><p>表单</p><ul><li>onfocus</li><li>onblur</li><li>onsearch</li><li>onselect</li><li>oninput</li><li>onchange 在表单元素的内容改变时触发</li><li>onreset 表单重置时触发</li><li>onsubmit 表单提交时触发</li></ul></li><li><p>触摸</p><ul><li>Touch 接口</li><li>TouchList 接口</li><li>TouchEvent 接口</li></ul></li><li><p>拖动</p><ul><li>ondrag该事件在元素正在拖动时触发</li><li>ondragend该事件在用户完成元素的拖动时触发</li><li>ondragenter该事件在拖动的元素进入放置目标时触发</li><li>ondragleave该事件在拖动元素离开放置目标时触发</li><li>ondragover该事件在拖动元素在放置目标上时触发</li><li>ondragstart该事件在用户开始拖动元素时触发</li><li>ondrop该事件在拖动元素放置在目标区域时触发</li></ul></li><li><p>计时</p><ul><li><p>不断执行 setInterval(“function”,milliseconds)</p><ul><li>clearInterval(intervalVariable)</li></ul></li><li><p>执行一次 setTimeout(“function”,milliseconds)</p><ul><li>clearTimeout(intervalVariable)</li></ul></li></ul></li><li><p>其他</p><ul><li>onload</li><li>onresize</li><li>onscroll</li><li>resize 重置窗口大小</li><li>onchange 元素改变</li><li>oncopy</li><li>oncut</li><li><h2 id="onpaste"><a href="#onpaste" class="headerlink" title="onpaste"></a>onpaste</h2></li></ul></li></ul></li><li><p>事件传递 ：冒泡与捕获</p><ul><li>冒泡： 在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素</li><li>捕获：外部元素的事件会先被触发，然后才会触发内部元素的事件</li></ul></li><li><p>事件绑定方式</p><ul><li>html onclick=function</li><li>DOM 绑定</li><li>事件监听 add/removeEventListener()<ul><li>element.addEventListener(event, function, useCapture); 同一个元素添加多个句柄 第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的<ul><li>element.addEventListener(“mouseover”, myFunction);<br>element.addEventListener(“click”, myFunctionMy);</li></ul></li></ul></li></ul></li></ul><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ul><li>回调函数：异步操作函数往往通过回调函数来实现异步任务的结果处理 是一个函数 完成这个任务后要干什么 不用关心异步任务的状态<ul><li>setTimout(fuc(){},time) 延时触发函数 异步函数</li></ul></li><li>回调地狱 多个嵌套的回调函数</li><li>setTimeout</li><li>Promise<ul><li>resolve 代表一切正常 传递参数，reject 是出现异常时所调用 传递异常</li><li>.then() .catch() 和 .finally() 三个方法，这三个方法的参数都是一个函数</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) {<br>    <span class="hljs-comment">// 要做的事情...</span><br>}).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}).<span class="hljs-title function_">finally</span>(<span class="hljs-params"></span>){};<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">delay, message</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) {<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);<br>            <span class="hljs-title function_">resolve</span>();<br>        }, delay);<br>    });<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>async/await 异步函数（async function） + Promise</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>  <span class="hljs-title function_">asyncFunc</span>(<span class="hljs-params"></span>){<br> <span class="hljs-keyword">await</span> <span class="hljs-title function_">print</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">"First"</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">print</span>(<span class="hljs-number">4000</span>, <span class="hljs-string">"Second"</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">print</span>(<span class="hljs-number">3000</span>, <span class="hljs-string">"Third"</span>);<br>}<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncFunc</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> value = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) {<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-string">"Return value"</span>);<br>        }<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)mysql</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/mysql.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/mysql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>mysql</p><ul><li>数值：<ul><li>tinyint、smallint、mediumint、int或integer、bigint 1\2\3\4\8</li><li>float、double 4\8Bytes</li><li>decimal 小数值</li></ul></li><li>日期/时间：<ul><li>date 日期、time 时间、datetime 混合日期和时间值、 3 3 8</li><li>year 年份 1</li><li>timestamp（时间戳） 4</li></ul></li><li>字符串(字符)类型：<ul><li>char 定长字符串 、varchar 变长字符串</li><li>tinyblob、blob、mediumblob、longblob(二进制形式)</li><li>tinytext、text、mediumtext、longtext</li></ul></li></ul><p>database  <code>create / drop / select / show / use + database</code></p><ul><li>mysql -h 127.0.0.1 -u root -p</li><li>systemctl re/start mysqld</li><li>mysqladmin –version</li><li>use test; 使用数据库</li><li>create database test;  创建数据库<ul><li>create database &lt;数据库名&gt; default charse=utf-8</li></ul></li><li>drop database test; 删除数据库</li><li>show databases; 显示所有数据库</li><li>select database(); 查询所有的数据库</li></ul><p>table <code>show / create / insert into / drop / desc / rename / update / select from + table</code></p><ul><li>show tables;  显示所有表</li><li>create table &lt;表名&gt; (&lt;字段名1&gt;&lt;类型1&gt;  [,..&lt;字段名 n&gt; &lt;类型 n&gt;]);</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>(<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    name <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    sex <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) ,<br>    degree <span class="hljs-keyword">double</span>(<span class="hljs-number">16</span>,<span class="hljs-number">2</span>)<br>)engine <span class="hljs-operator">=</span> myisam <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 表格中文乱码<br></code></pre></td></tr></tbody></table></figure><ul><li>insert into &lt;表名&gt;() values() 插入数据<ul><li><code>insert into &lt;表名&gt;("id","name","age","sex") values (1，"zs","20","male"),(1，"zs","20","male")</code></li></ul></li><li>create table &lt;新表&gt; select * from &lt;旧表&gt; / like  复制数据库<ul><li>create table 新表 like 旧表</li><li>create table 新表 select * from 旧表</li></ul></li><li>drop/delete from table &lt;表名&gt;  删除表<ul><li><code>delete from &lt;表名&gt; where 名字=“”</code>;</li></ul></li><li>update 表名 set 字段=新值   更新数据<ul><li><code>update student set 专业 = ’软件技术‘ where 姓名 = ’王丹‘;</code></li></ul></li><li>rename table 原表名 to 新表名 更改表名</li><li>desc 表名; 获取表结构</li><li>select * from &lt;表名&gt; 查询所有行<ul><li><code>select 列名1,列名2 from 表名;</code></li></ul></li></ul><p>limit 限制词</p><ul><li>not(between and) 两者之间<ul><li><code>select * from student where 学分 (not) between 15 and 20</code></li></ul></li><li>as 别名<ul><li><code>select 学号 as id，姓名 as name from student</code></li></ul></li><li>and or 和 或<ul><li><code>select * from student where 专业 = '软件技术' and/or 性别 = '男'</code></li></ul></li><li>where 特定条件值</li><li>in / not in 是否匹配一个模式<ul><li><code>select * from student where 姓名 ）(not) in (’刘鑫‘);</code></li></ul></li><li>like 模糊查询<ul><li><code>select * from student where 姓名 like '王_/王__/王%'</code></li></ul></li><li>order by 排序 / group by 分组<ul><li><code>select * from MyClass order by id limit 0,2;</code></li></ul></li><li>limit 限制条件<ul><li><code>select * from MyClass limit 0,2;</code></li></ul></li></ul><p>import</p><ul><li>mysqldump -u [数据库用户名] -p -A&gt;[备份文件的保存路径]</li><li>mysqldump -h localhost -u root -p mydb(数据库名) mytable(数据库里面的表名)&gt; c:\MySQL\mytable.sql</li><li>mysql&gt; source [备份文件的保存路径]</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)nginx</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/nginx.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/nginx.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><ul><li><p>轻量级http服务器 事件驱动的异步非阻塞处理方式</p></li><li><p>目录</p><ul><li>文件目录<ul><li>项目文件<ul><li>/etc/nginx/nginx.conf 核心配置文件</li><li>/etc/nginx/conf.d/default.conf 默认http服务器配置文件</li></ul></li><li>配置文件目录<ul><li>nginx.conf 主配置文件<ul><li>/usr/local/etc/nginx/nginx.conf</li><li>/etc/nginx/nginx.conf</li></ul></li><li>servers 服务文件 /usr/local/etc/nginx/servers/</li><li>默认http服务器配置文件<ul><li>/etc/nginx/conf.d/default.conf 默认http服务器配置文件<ul><li>listen 监听端口</li><li>location / {} 服务默认启动目录</li></ul></li></ul></li></ul></li><li>安装文件目录<ul><li>/usr/local/Cellar/nginx/版本/html ==&gt; /usr/local/var/www</li></ul></li><li>默认网站的目录 mac /usr/local/var/www Linux /usr/share/nginx/html</li><li>系统host位置 /private/etc/hosts</li></ul></li></ul></li><li><p>常用命令 <code>nginx \ nginx -s stop\reopen\reload services start\stop\restart nginx</code></p><ul><li>ps -ef | grep nginx 查看nginx目录信息</li><li>netstat -tlnp 查看端口号占用情况</li><li>nginx -t</li><li>启动 nginx、 systemctl start nginx.service 、services start nginx</li><li>版本 -v 帮助 -h</li><li>停止<ul><li>立即停止服务 nginx -s stop</li><li>从容停止服务 nginx -s quit</li><li>killall方法杀死进程 killall nginx</li><li>systemctl停止 systemctl stop nginx.service</li></ul></li><li>重启<ul><li>nginx -s reopen 重新启动</li><li>nginx -s reload 重新载入配置文件</li><li>systemctl restart nginx.service</li><li>services restart nginx</li><li>nginx -s quit  退出（处理完事情走）</li><li>nginx -c filename 指定配置文件</li></ul></li></ul></li><li><p>配置</p></li><li><p>功能</p><ul><li><p>错误页 /etc/nginx/conf.d/default.conf</p><ul><li>error_page 404  /404_error.html; error_page  404 <a href="http://github/404.html">http://github/404.html</a></li><li>error_page   500 502 503 504  /50x.html;</li></ul></li><li><p>访问权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">location =/img{<br>allow all;<br>}<br>location =/admin{<br>deny all;<br>}<br>location ~\.php<span class="hljs-variable">${</span><br><span class="hljs-variable">    deny all;</span><br><span class="hljs-variable">}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>虚拟主机</p><ul><li><p>端口 Nginx监听多个端口，根据不同的端口号，来区分不同的网站</p><ul><li><p>nginx.conf</p></li><li><p>default.conf</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server{<br>        listen 8001;<br>        server_name localhost;<br>        root /usr/share/nginx/html/html8001;<br>        index index.html;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>conf.d文件夹下新建文件 端口数.conf 8001.conf</p></li></ul></li><li><p>ip 基于ip的虚拟主机</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server{<br>  listen 80;<br>  server_name 112.74.164.244;<br>  root /usr/share/nginx/html/html8001;<br>  index index.html;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>正向代理(梯子) 反向代理</p><ul><li><p>etc/nginx/con.d/8001.conf</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">server{<br>        listen 80;<br>        server_name nginx2.jspang.com;<br>        location / {<br>               proxy_pass http://jspang.com;<br>        }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>适配PC或移动设备</p></li><li><p>Gzip压缩配置</p></li><li><p>负载均衡</p></li><li><p>常用全局变量</p></li><li><p>静态资源服务、通过本地文件系统提供服务</p></li><li><p>API 服务、权限控制、减少应用服务器压力</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)npm</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/npm.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/npm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h1><p>规范化包</p><p>.prettierrc</p><p><a href="https://www.prettier.cn/">Prettier 中文网 · Prettier 是一个“有态度”的代码格式化工具</a></p><p><a href="https://github.com/h5bp/html5-boilerplate">html5-boilerplate</a></p><ul><li>html5模板</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx create-html5-boilerplate new-site<br><span class="hljs-built_in">cd</span> new-site<br>npm install<br>npm run start<br></code></pre></td></tr></tbody></table></figure><p><a href="https://www.parceljs.cn/getting_started.html">Parcel 中文网</a></p><ul><li>Parcel 是 Web 应用打包工具，适用于经验不同的开发者。它利用多核处理提供了极快的速度，并且不需要任何配置。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g parcel-bundler<br>npm install parcel-bundler --save-dev<br>parcel index.html<br>parcel watch index.html<br>parcel index.html about.html<br></code></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"parcel &lt;your entry file&gt;"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"parcel build &lt;your entry file&gt;"</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>pnpm</p><p>yarn</p><p>cnpm</p><p>nrm </p><ul><li>换Node源</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i nrm -g<br>nrm <span class="hljs-built_in">ls</span><br>nrm <span class="hljs-built_in">test</span><br>nrm use taobao<br></code></pre></td></tr></tbody></table></figure><p>nvm</p><p>npm</p><p><a href="https://html5boilerplate.com/">HTML5 Boilerplate</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install html5-boilerplate<br>yarn add html5-boilerplate.<br>npx create-html5-boilerplate new-site<br><span class="hljs-built_in">cd</span> new-site<br>npm install<br>npm run start<br></code></pre></td></tr></tbody></table></figure><p>http-server</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g http-serve<br>http-server<br>http-server --<span class="hljs-built_in">help</span><br></code></pre></td></tr></tbody></table></figure><p>webpack-dev-server</p><ul><li>serve</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --global serve<br>serve<br>serve --<span class="hljs-built_in">help</span><br></code></pre></td></tr></tbody></table></figure><p>node-proxy-serve</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></tbody></table></figure><p>querystring 模块（qs 库）[Querry String]</p><p>node 内置模块，该模块包含用以 URL 解析的实用函数。（对 URL 处理的相关模块）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const querystring = require('querystring');<br>axios.post('http://.com/',querrystring.stringify({foo:'bar'}));<br></code></pre></td></tr></tbody></table></figure><p>图片</p><ul><li>unsplash</li></ul><p>icon</p><ul><li>font awesome</li><li>iconfont+</li><li>bootstrap 官方图标库</li></ul><p>swiper</p><p>json-mock</p><p><a href="https://github.com/typicode/json-server">typicode/json-server: Get a full fake REST API with zero coding in less than 30 seconds (seriously)</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">npm install -g json-server<br>json-server --watch db.json<br><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"posts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span> <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"json-server"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"typicode"</span> <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"comments"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span> <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"body"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"some comment"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"postId"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"profile"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"typicode"</span> <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)png</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/png.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/png.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pug"><a href="#pug" class="headerlink" title="pug"></a>pug</h1><ul><li>pug pug文件名 -o 目标路径 -p -w   pug test.pug -o ./ -p -w   pug test.pug -o ./ -w</li><li>pug命名规则  不能带 -</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">doctype html<br>html(lang="en")<br>  head<br>    meta(charset="UTF-8")<br>    meta(http-equiv="X-UA-Compatible", content="IE=edge")<br>    meta(name="viewport", content="width=device-width, initial-scale=1.0")<br>    title Document<br>  body<br></code></pre></td></tr></tbody></table></figure><p>基础</p><ul><li><code>- var 变量名 = 值</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">-var list = ['a','b','c','d']<br>each item in list<br>li = item<br><br>- for (var x = 0; x &lt; 3; x++)<br> li item<br></code></pre></td></tr></tbody></table></figure><ul><li>导入 include include/head.pug(路径)</li><li>自闭合标签  foor(bar=’baz’)/</li></ul><p>属性 ()</p><ul><li>input(type=’checkbox’,checked=true)</li><li>内联样式 p(style=”color:red”) a( style = {color:’red’,background:’green’} )</li><li>类属性 类的字面值 p(class=”one two”)  p.one.two</li><li>id属性  div#box1 、div(id=”box2”)  #foo.oh.no</li><li>&amp;attributes  属性 &amp;attributes 语法可以将一个对象转化为一个元素的属性列表  div#foo(data-bar=”foo”)&amp;attributes({‘data-foo’: ‘bar’})</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">-var classes = ['box1','box2','box3']<br>div(class=classes)<br>div.bing(class=classes class=['bing'])<br></code></pre></td></tr></tbody></table></figure><p>语句</p><ul><li>条件  -js代码块  -var 变量=值</li><li>循环</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html">-var flag = true<br>body(class=flag?'one':'tow')<br><br>- var num = 8<br>case num<br>       when 0<br>              p    内容<br>        when 1<br>        when 2<br>              p 内容<br>         when 3<br>               break<br>         default<br>               p N内容<br><br>for<br> - var arr = [1,2,3,4,5]<br> ul<br>  -for(var i = 0;i&lt;arr.length;i++)<br>   li=arr[i]<br><br> -for(var i = 0;i&lt;100;i++)<br>  p.one loremasdfaaaaaaaa<br><br><br>while<br>- var n = 0;<br>ul<br>  while n &lt; 4<br>  li= n++<br>ul<br>  while num&lt;5<br>  li = num ++<br>each<br><br>ul<br> each val in [1, 2, 3, 4, 5]<br>  li= val<br><br>ul<br> each val, index in ['〇', '一', '二']<br>  li= index + ': ' + val<br><br>ul<br> each val, index in {1:'一',2:'二',3:'三'}<br>  li= index + ': ' + val<br><br>- var arr ={  name:'Mike',age:' ' }<br>ul<br>    each val in arr<br>    li = val<br></code></pre></td></tr></tbody></table></figure><p>复用 block+extend mixin</p><ul><li>模板继承 Inheritance<ul><li>继承与扩展 block extends</li><li>两大功能 嵌入和继承<ul><li>嵌入 提取重复代码复用</li><li>继承 重复代码块到公共文件复用<ul><li>common.pug 文件 最后添加 block content</li><li>index.pug 文件开头 extends common文件名 block content</li></ul></li></ul></li></ul></li><li>混合 mixin 名() +名 函数可传参<ul><li>定义函数 mixin 函数名（参数）{ }</li><li>使用函数   +函数名  +study(2020)</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mixin list(id, ...items)<br> ul(id=id)<br>  each item in items<br>   li= item<br><br>+list('my-list', 1, 2, 3, 4)<br><br>混入属性<br>mixin link(href, name)<br> //- attributes == {class: "btn"}<br> a(class!=attributes.class href=href)= name<br><br>+link('/foo', 'foo')(class="btn")<br></code></pre></td></tr></tbody></table></figure><p>文本  #{Text}</p><ul><li>元素后面直接添加 p loremlorem</li><li>动态输出内容 ``-var user = {name:’mike’}  p #{obj.name} testtest`</li><li>属性值{文本} <code>- var url = 'url值' </code>  <code> a{href=url} 内容</code></li></ul><p><strong>Templates</strong></p><ul><li><code>html</code> generate basic HTML template in Pug/Jade style</li><li><code>bootstrap</code> generate basic Bootstrap template</li></ul><p><strong>Bootstrap Related</strong></p><ul><li><code>fgroup</code> input form with form-group class</li><li><code>button</code></li><li><code>footer</code> minimalistic footer</li><li><code>panel</code></li><li><code>login</code> form</li><li><code>signup</code> form</li><li><code>navbar</code></li></ul><p><strong>Others</strong></p><ul><li><code>cpug</code> require pug</li><li><code>ipug</code> import pug</li><li><code>lorem</code> generate dummy text</li><li><code>fa</code> to include font-awesome icon</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)scss</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/scss.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/scss.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h1><p><code>$变量</code></p><p>基础</p><ul><li>编译 单文件 scss input.scss output.scss 多文件scss input1.scss:output1.css  input2.scss:output2.css  目录编译 scss 文件夹1:文件夹2  scss public/scss:app/css</li><li>编译方式<code>--watch --style [option ] --debug-info --sourcemap </code><ul><li>sass –watch input.scss:output.css</li><li>expanded 默认 也就是常规的css排版</li><li>nested 层级排版  嵌套</li><li>compact 同一选择器压缩到一行 每条 CSS 规则只占一行</li><li>compressed 压缩到一行  输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小</li></ul></li><li>变量<ul><li>默认变量 <code>定义 $变量:值 !default; 使用 $变量</code></li><li>全局变量 元素内部外或者mixin外部皆可理解为全局</li><li>局部变量 元素内部定义的变量为局部变量</li></ul></li><li>数据结构</li></ul><p>流程 @if @for</p><ul><li>条件 @if</li><li>循环 @for<ul><li><code>@for $i from &lt;start&gt; through &lt;end&gt; [start, end]</code></li><li><code>@for $i from &lt;start&gt; to &lt;end&gt; [start, end-1]</code></li><li>each 列表和map遍历  @each循环就是去遍历一个列表，然后从列表中取出对应的值</li></ul></li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> through <span class="hljs-number">3</span>{<br><span class="hljs-selector-class">.item-</span>#{<span class="hljs-variable">$i</span>} { <span class="hljs-attribute">width</span>:<span class="hljs-number">2px</span> * <span class="hljs-variable">$i</span>  }<br>}<br><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> to <span class="hljs-number">5</span>{<br><span class="hljs-selector-class">.item-</span>#{<span class="hljs-variable">$i</span>} { <span class="hljs-attribute">width</span>:<span class="hljs-number">2px</span> * <span class="hljs-variable">$i</span>  }<br>}<br><br><span class="hljs-variable">$num</span> = <span class="hljs-number">6</span><br><br><span class="hljs-keyword">@while</span> <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span>{<br>  <span class="hljs-selector-tag">li</span>#{num}{<br><span class="hljs-attribute">height</span>:<span class="hljs-variable">$num</span> * <span class="hljs-number">100px</span>;<br>}<br><span class="hljs-variable">$num</span>: <span class="hljs-variable">$num</span> - <span class="hljs-number">1</span><br>}<br><br><span class="hljs-keyword">@each</span> <span class="hljs-variable">$var</span> in &lt;list&gt;<br><br><span class="hljs-keyword">@each</span> <span class="hljs-variable">$user</span> in mike cow reabbit{   .#{user}-ani{ }   }<br><br><br><span class="hljs-variable">$alt</span>: alert, yellow, red;<br><span class="hljs-variable">$sub</span>: submit, white, green;<br><span class="hljs-variable">$bck</span>: back, blue, transparent;<br><span class="hljs-keyword">@each</span> <span class="hljs-variable">$type</span>, <span class="hljs-variable">$txt</span>, <span class="hljs-variable">$back</span> in <span class="hljs-variable">$alt</span>,<span class="hljs-variable">$sub</span>,<span class="hljs-variable">$bck</span> {<br>    .#{<span class="hljs-variable">$type</span>}-<span class="hljs-selector-tag">button</span> {<br>        <span class="hljs-attribute">color</span>: <span class="hljs-variable">$txt</span>;<br>        <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$back</span>;<br>    }<br>}<br><br><span class="hljs-variable">$ppl</span>: ( usr1:bob, usr2:john, usr3:bill, usr4:mike );<br><span class="hljs-keyword">@each</span> <span class="hljs-variable">$key</span>, <span class="hljs-variable">$usr</span> in <span class="hljs-variable">$ppl</span>  {<br>    .#{<span class="hljs-variable">$usr</span>}-avatar {<br>        <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'/img/#{$usr}.png'</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>嵌套 {}</p><ul><li><code>&amp; 父类选择器</code></li><li><code>元素嵌套</code>  main&gt;{   }  main { ~header  }</li><li>`属性嵌套 / 样式嵌套 将一个带连字符的属性分隔开<ul><li>border-top</li><li>border{ left:1px solid red;  top:100px solid black }</li><li>border:1px solid #000{  top:0px ; right:0px }</li></ul></li><li><code>&gt; 子代选择器 , 群组选择器 + 相邻兄弟选择器  ~ 通用兄弟选择器</code></li><li><code>background color !default 设置css默认值</code> 默认值的权重是低于常规值的 无论默认值在什么位置</li></ul><p>Mixin 混合器 @mixin  @mixin和@extend 的区别就是 可以传递参数和不可以</p><ul><li>声明宏 @mixin 和 @include<ul><li>@mixin 名（参数1，参数2）{ 属性：值}</li><li><code>@mixin li-style($width:5px,$display:block,$height:null) :值 默认参数</code></li><li><code>... 数量可变的参数</code></li></ul></li><li>宏使用 @include<ul><li>@include 名(参数1，参数2);</li></ul></li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(#<span class="hljs-number">00</span>)<br>@mixin <span class="hljs-built_in">sw</span>(<span class="hljs-variable">$shadow</span>..){   <span class="hljs-attribute">text-shadow</span>:<span class="hljs-variable">$shadow</span>; }<br><span class="hljs-keyword">@include</span> sw(<span class="hljs-variable">$shadow</span>)<br><br><span class="hljs-keyword">@mixin</span> B(<span class="hljs-variable">$selector</span>) {<br> #{<span class="hljs-variable">$selector</span>} {<br>  <span class="hljs-attribute">color</span>: red;<br> }<br>}<br><span class="hljs-keyword">@include</span> B(<span class="hljs-string">'.header'</span>);<br></code></pre></td></tr></tbody></table></figure><p>指令 @指令</p><ul><li>@at-root 跳出根元素 @at-root 选择器{}</li><li>@debug @warn @error 调试  @debug:100em + 120em; 调试 警告信息和错误信息 相当于console.log()</li><li>@media 媒体查询</li><li>@content</li><li>@if @else 判断<ul><li>单条件 <code>$height:if($condition,true,false) 测试条件，测试成功返回值，测试失败返回值</code><ul><li><code>@if $weight == bold {  }</code></li></ul></li><li>多条件 <code>@if { }@else if { } @else{ }</code></li></ul></li><li>@for @while @each<ul><li>@for</li><li>@while</li><li>each 列表和map遍历</li></ul></li><li>@function</li></ul><p>继承 @extend 两种用 一种 占位 一种 扩展 避免使用@extend:</p><ul><li>@extend 继承</li><li>继承  占位符 复用css代码片段 占位符 复用css代码片段 % 占位符<ul><li>定义  %名{ }</li><li>使用 选择器 { @extend %名; }</li></ul></li><li>继承另一个选择器的类样式  扩展选择器 添加css片段到当前选择器<ul><li>定义 .类名{}</li><li>使用  .two { @extend .one{} } 当前选择器继承所有 指定类名的所有选择器和子选择器</li></ul></li></ul><p>函数 @函数()</p><ul><li>内置函数<ul><li>字符串函数 <code>str-length($string) 长度  引号 unquote($string) quote($string) to-upper-case($string) 大写 to-lover-case($string) 小写 str-insert($string,$insert,$index) 插入字符串 str-index($string,$substring) 位置 </code></li><li>数组函数 <code>length($list)长度 /join($list1,$list2) /nth($list,$n) 获取下标 /index($list,$value) 返回指定元素在数组中的位置 /set-nth($list,$n,$value) 替换指定下标的元素 /append($list1,$val,[$separator]) 从数组尾部添加元素 join($list1,$list2)拼接数组</code></li><li>数字函数 <code>percentage 转换成百分比 /round 四舍五入 /floor 向下 /ceil 向上 /max/min/random 随机</code></li><li>map函数<ul><li><code>$map:(key:value,key2,value2)</code></li><li><code>map-get($map,$key）/map-merge 两个map值合并成一个新的map /map-remove/map-has-key/</code></li><li><code>map-keys/map-values/keywords($args)</code></li></ul></li><li>列表函数<code>length($list) join($list1, $list2, [$separator]) append($list1, $val, [$separator]) zip($lists…) index($list, $value) nth($list,$i) </code></li></ul></li><li>自定义函数<ul><li>定义 <code>@function 函数名(){方法体 @return} </code><ul><li>@function 函数名字(参数1，参数2，..){<br>@return $参数1 + 100px<br>}</li></ul></li><li>使用<code>函数名（参数） 使用</code><ul><li>width:函数名字(参数1)</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@function 函数名字(参数1，参数2，..){<br>  @return $参数1 + 100px<br>}<br>width:函数名字(参数1)<br></code></pre></td></tr></tbody></table></figure><p>插值 #{}</p><ul><li><code>$height-box = 1000px</code></li><li><code>选择器名:{ 键:值 }</code><ul><li><code>值名：height:#{height-box}</code></li><li><code>选择器名：#{$height-box}{ }</code></li><li>不能用于属性名</li></ul></li></ul><h1 id="web-api"><a href="#web-api" class="headerlink" title="web api"></a>web api</h1><p>math</p><ul><li><code>&lt;math&gt;&lt;/math&gt;</code></li></ul><p>canvas js绘图 canvas 的绘制代码可以在 <code>&lt;script&gt;</code>、js文件</p><ul><li><code>canvas id="myCanvas"</code></li><li><code>ctx = document.getElementById('myCanvas').getContext('2d')</code></li><li>ctx.fillStyle =  填充颜色</li><li>ctx.stroke();</li><li>线ctx.strokefill = ‘red’; // 边框的颜色</li><li>常见图形<ul><li><p>路径画线</p><ul><li><code>lineTo(x,y) moveTo(x,y)</code><ul><li>moveTo(x,y) 定义线条开始坐标</li><li>lineTo(x,y) 定义线条结束坐标</li></ul></li></ul></li><li><p>正方形 <code>fillRect(x,y,x,y)</code></p></li><li><p>圆形 <code>ctx.arc(x,y,r,start,stop)</code></p></li><li><p>文字 ctx.font=”30px Arial”; // 设置字体大小ctx.strokeText(“Hello World”,10,50);  // fillText(text,x,y); 设置字体</p><ul><li>font - 定义字体</li><li>fillText(<em>text,x,y</em>) - 在 canvas 上绘制实心的文本</li><li>strokeText(<em>text,x,y</em>) - 在 canvas 上绘制空心的文本（x,y）位置</li></ul></li><li><p>渐变</p><ul><li>createLinearGradient(<em>x,y,x1,y1</em>) - 创建线条渐变  <code>// 创建渐变var grd=ctx.createLinearGradient(0,0,200,0);grd.addColorStop(0,"red");grd.addColorStop(1,"white");// 填充渐变ctx.fillStyle=grd;ctx.fillRect(10,10,150,80);</code></li><li>createRadialGradient(<em>x,y,r,x1,y1,r1</em>) - 创建一个径向/圆渐变 当我们使用渐变对象，必须使用两种或两种以上的停止颜色。 <code>// 创建渐变var grd=ctx.createRadialGradient(75,50,5,90,60,100);grd.addColorStop(0,"red");grd.addColorStop(1,"white");// 填充渐变ctx.fillStyle=grd;ctx.fillRect(10,10,150,80);</code></li><li>addColorStop()方法指定颜色停止，参数使用坐标来描述，可以是0至1. 使用渐变，</li><li>设置fillStyle或strokeStyle的值为 渐变，然后绘制形状，如矩形，文本，或一条线</li></ul></li><li><p>图像 <code>drawImage(image,x,y)</code></p></li></ul></li></ul><p>svg xml绘图 svg 的绘制代码可以在<code>&lt;style&gt;</code>、svg文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)typescript</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/typescript.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/typescript.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><ul><li>类型系统{ 静态类型、弱类型 }、面向对象、添加类型系统的、JS超集的扩展 适用于任何规模</li></ul><p>数据类型(:类型)</p><ul><li>原始数据类型<ul><li>:string let name:string = “zs” let one: “1000” | “2000”</li><li>:number let num:number = 1000</li><li>:boolean let flag:boolean = false</li><li>:void 空值 function getName(str:string):void{ } 没有任何类型 void 返回值为空underfined</li><li>never 不会出现的值</li><li>Symbol 独一无二的值 Symbol(“key”)  对象的键 [Symbol()]:”value”  类的属性名或方法名  <code>class { [Symbol()](){ }</code>  <code>c[属性]() c[Symbol()]()</code></li><li>:undefined :null let nu:null = null 、let un:undefined = undefined</li><li>BigInt 大整数</li></ul></li><li>引用数据类型<ul><li>数组 array :类型[ ]<ul><li>:数据类型[] 表示法 <code>:number[]</code> let num:number[] = [100,200]<ul><li>多维数组 arrArr:arr[][] = [[],[]]</li></ul></li><li><code>:Array&lt;String&gt;</code> 数组泛型 <code>Array&lt;elemType元素类型&gt;</code> <code>let arr:Array&lt;number&gt; = []</code></li><li>接口表示数组 interface numArray{ [index:number]:number 索引和值都是number }</li><li>数组在函数中的使用 作为参数 func(arr:string[])  作为函数的返回值 func():string[]{ }</li><li>any可以插入不同类型的数组元素 let arr:any[] = [ ]</li></ul></li><li>元组 tuple :[ , ] 类似数组 不限制类型<ul><li>let tup:[string,boolean,number] = [‘str’,false,1000] 类型要与赋值一一对应</li><li>越界元素为联合类型</li><li>push pop  tupe_name[3] = 100 tupe[index]</li></ul></li><li>Map 类似对象 不限制类型<ul><li>键值对（任何值都可以作为一个键或者一个值）</li><li><code>new Map([["keyA","value1"],["keyB","value2"]]) </code></li><li>方法 clear set get has has delete size keys values entries set(“google”,1)</li><li>迭代 for of</li></ul></li><li>对象 object let user: { name:string,age:number }    use = { name:”zs”,age:”90” } let use:user; let { name:”zs”,age:”90” }:{ name:string,age:number };<ul><li>function(obj: { site1:string, site2 :string })</li></ul></li><li>枚举 enum<ul><li>普通枚举 enum 数字枚举 enum xx { a=100 }字符串枚举 enum xx { a=“str” }  xx.a</li><li>常量枚举 const enum xx{  }</li><li>外部枚举 declare xx enum{ }（声明文件）<ul><li>外部枚举 declare enum xx{ }</li><li>外部常量枚举 declare const enum xx{ }</li></ul></li></ul></li><li>联合类型 union types |<ul><li>let name : string | number | boolean 取值为其中一种</li><li>可以作为函数参数 func(name:number | string)</li><li>联合类型数组（将数组声明为联合类型）var arr:number[]|string[];</li></ul></li><li>任意值（任意类型） Any:any let num:any = 100</li></ul></li><li>var/const/let [变量名]:[类型] = 值</li></ul><p>函数 vs 方法  类里面的是方法，类外的是函数 function 定义</p><ul><li><p>函数类型 参数类型 和 返回值类型 (num?:number = 1000)</p><ul><li>函数返回值类型和参数类型 function fuc(par:number,str:string):return_type{ return xxx }</li><li>接口定义函数 interface fuc{ (str1:string,num1:number):boolean } 、 let myfuc = func、 myfuc = function(str1:string,num1:number){ return }  \  、interface 名 { (参数:类型):返回值类型}  接口定义的和使用的类型要对函数名赋值时要保证参数个数、参数类型、返回值类型不变</li></ul></li><li><p>函数定义</p><ul><li>函数声明 function fuc(par:number,str:string):return_type{ return xxx }</li><li>函数表达式 let func = function(x:number,y:number):number{  return } 把函数赋值给变量的就是函数表达式</li></ul></li><li><p>函数参数</p><ul><li>可选参数 (last?:string)   可选参数后面不允许再出现必需参数</li><li>默认参数 （str:string = “message”）  （str:string ?= “message”）</li><li>剩余参数 …rest  最后一个参数 不确定数量的参数</li></ul></li><li><p>函数重载 允许一个函数接受不同数量或类型的参数（参数不同）、返回类型可同可不同 重载允许接受</p><ul><li>function fnc(x:number|string):number|string|void{ } 重载形式： function fuc(x:number):number function fuc(x:string):void  本质就是在多个类型中选择任意的数据类型</li><li>参数类型不同、参数数量不同、参数类型顺序不同</li></ul></li><li><p>函数种类</p><ul><li>匿名函数 var res = function(a:number,b:number){ } 没有名字的函数 、带参数的匿名函数表达式和不带参数<ul><li>匿名自调用函数IFFE  (function(){ })() / function(){} 在第一个()中 (xxx)()</li></ul></li><li>构造函数<code> new Function(“参数”，参数，"函数体")</code></li><li>递归函数 自已调用自已</li><li>Lambda函数（箭头函数） ( [param1, parma2,…param n] )=&gt;statement;  (str:string,num:number):number[] =&gt;{  return xxx}</li></ul></li></ul><p>类型推论(自动转换判断类型、类型自动识别) JS =&gt; TS 方便JS文件兼容TS</p><ul><li>自动指定数据类型、没有赋值或不能推断出、都会被推断成Any类型</li><li>多个类型推断会推断出联合类型 let = [100,true,”string”]: number|boolean|string;</li><li>按上下文归类 通过代码上下文自动判定</li></ul><p>类型断言 as</p><p>类型别名(重命名) type</p><p>字符串字面量类型 type</p><p>声明文件</p><p>类与接口</p><ul><li>类</li><li>接口</li></ul><p>声明合并</p><p>内置对象</p><p>命名空间和模块</p><p>Iterators和Generators</p>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)vue-router</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/vue-router.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/vue-router.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><blockquote><ul><li>动态路由匹配 <code>/:id/:name</code>  路由参数、查询、通配符</li><li>嵌套路由 <code>children:[]</code></li><li>编程式的导航 <code>router.replace/push/replace/go</code></li><li>命名路由<code>router-link name</code></li><li>命名视图 <code>router-view name</code></li><li>重定向和别名<code>redirect alias</code></li><li>路由组件传参 <code>{ name:"",params:{} }</code></li><li>导航守卫  <code>3全局 </code>beforeEach/Resolve/afterEach<code>+ 1路由 </code>beforeEnter<code>+ 3组件 </code>beforeRouter + Enter、Update、Leave<code> </code></li><li>路由元信息  meta</li><li>不同的历史模式</li></ul></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router@4<br>yarn add vue-router@4<br></code></pre></td></tr></tbody></table></figure><ul><li>vue官方的路由管理器 组件树/路由树</li><li>所有的路由抽离出来方便管理（集中管理） 路由传递参数 、动态传递参数</li></ul><p>后端路由 vs 前端路由</p><ul><li>前端路由:   对于单页面应用程序来说，主要通过 URL 中的 hash(#号)来实现不同页面之间的切换，同时，hash 有一个特点：HTTP 请求中不会包含 hash 相关的内容；所以，单页面程序中的页面跳转主要用 hash 实现。（前端当前页面的跳转）</li><li>后端路由:  URL 对应服务器上的资源</li></ul><p>命名路由和视图</p><ul><li>router-link  to replace append tag active-class   <code>相当于 a链接 to 相当于 href 命名路由</code></li><li>router-view  name  显示匹配的组件 占位符  <code>视图占位符</code></li><li>v-slot 作用域插槽暴露第底层的定制能力，主要面向库作者、但也可以为开发者提供便利</li></ul><p>编程式的导航(操作浏览器的历史记录和跳转记录)</p><ul><li>router-link router.push router.replace router.go(n)<ul><li>当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用router.push(…)，所以说，点击 <code>&lt;router-link :to="..."&gt;</code> 等同于调用 <code>router.push(...)</code></li><li>router.replace（没有记录 回不去） 跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</li><li>router.go(n)参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code></li></ul></li></ul><table><thead><tr><th>声明式 html</th><th>编程式 js</th></tr></thead><tbody><tr><td><code>&lt;router-link :to="..."&gt;</code></td><td><code>router.push(...)</code></td></tr><tr><td><code>&lt;router-link :to="..." replace&gt;</code></td><td>·<code>router.replace(...)</code></td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 字符串</span><br>$router.<span class="hljs-title function_">push</span>(<span class="hljs-string">'home'</span>)<br><span class="hljs-comment">// 对象</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">path</span>: <span class="hljs-string">'home'</span> })<br><span class="hljs-comment">// 命名的路由</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'user'</span>, <span class="hljs-attr">params</span>: { <span class="hljs-attr">userId</span>: <span class="hljs-string">'123'</span> }})<br><span class="hljs-comment">// 带查询参数，变成 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">path</span>: <span class="hljs-string">'register'</span>, <span class="hljs-attr">query</span>: { <span class="hljs-attr">plan</span>: <span class="hljs-string">'private'</span> }})<br><span class="hljs-keyword">const</span> userId = <span class="hljs-string">'123'</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'user'</span>, <span class="hljs-attr">params</span>: { userId }}) <span class="hljs-comment">// -&gt; /user/123</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">${userId}</span>`</span> }) <span class="hljs-comment">// -&gt; /user/123</span><br><span class="hljs-comment">// 这里的 params 不生效</span><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">path</span>: <span class="hljs-string">'/user'</span>, <span class="hljs-attr">params</span>: { userId }}) <span class="hljs-comment">// -&gt; /user</span><br><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// -1 3 10</span><br></code></pre></td></tr></tbody></table></figure><p>router 构建选项 实例属性  实例方法</p><ul><li>path 跳转的路径</li><li>name  命名路由 指定该路径名称</li><li>redirect 重定向</li><li>component 组件</li><li>children 路由嵌套</li><li>alias 别名<code>path:'/a'(实际访问),componet: A,alias:'/b'（url展示出来假的)</code></li><li>mode hash模式</li><li>meta 路由元信息</li></ul><p>route</p><ul><li><code>$route对象</code>，一个路由匹配到的所有路由记录会暴露为 <code>this.$route</code> 对象  路由对象</li><li>this.$router  router 实例 (全局)</li><li>this.$route 当前激活的路由信息对象 (局部)<ul><li>传递参数 $route.query  ? query</li><li>this.$route.params 使用params 方式传递路径  来获取路由中的参数</li><li>$route.hash</li></ul></li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>router-link</td><td>是一个a链接  <code>to</code>(router.push() 目标路由的链接 )、<code>replace</code>、<code>append</code>、<code>tag</code>、<code>active-class</code>、</td></tr><tr><td>router-view</td><td><code>name</code>  设置了名称，则会渲染对应的路由配置中</td></tr><tr><td>v-slot</td><td>作用域插槽暴露第底层的定制能力，主要面向库作者、但也可以为开发者提供便利</td></tr><tr><td>Router构建选项</td><td>routes、mode、base、linkActiveClass 、linkExactActiveClass 、scrollBehavior 、parseQuery 、stringifyQuery、fallback</td></tr><tr><td>Router实例属性</td><td>app、mode、currentRoute、START_LOCATION</td></tr><tr><td>Router实例方法()</td><td>berforeEach、beforeResolve、afterEach、push、replace、go、back、forward、getMatchedComponent、resolve、addRoutes、addRoute、addRoutes、onReady、onError</td></tr><tr><td>路由对象</td><td><code>$route.path</code> 、``$route.params<code>、</code>$route.query <code>、</code>$route.hash<code>、</code>$route.fullPath`、**$route.matched<strong>、</strong>$route.name<strong>、</strong>$route.redirectedFrom**</td></tr><tr><td>组件注入</td><td>注入的属性 <code>this.$router</code> router 实例<br>、<code>this.$route</code> 当前激活的路由信息对象、属性只读、属性不可变、可以watch它<br>增加的组件配置选项</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i vue-router<br>vue add vue-router<br><span class="hljs-comment">// 导入 Vue.use()注册</span><br><span class="hljs-comment">// router/index.js 文件夹</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'../views/HomeView.vue'</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [ <span class="hljs-comment">// routes 数组</span><br>  {<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>, <span class="hljs-comment">//</span><br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">'/home'</span> <span class="hljs-comment">// 重定向</span><br>    <span class="hljs-attr">alias</span>:<span class="hljs-string">"/home"</span>;<span class="hljs-comment">//别名，即访问“/”和“/home”跳转到同一个页面 展示出来的 假的</span><br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">'history'</span>;<span class="hljs-comment">//默认为hash模式，在url上会加个#，比较难看，一般采用‘history’</span><br>    <span class="hljs-attr">meta</span>: { <span class="hljs-attr">requiresAuth</span>: <span class="hljs-literal">true</span> } <span class="hljs-comment">//路由元信息</span><br>  },<br>  {<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">'/homeview'</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'homeview'</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>,<br>    <span class="hljs-attr">children</span>:[<br>      {  <span class="hljs-attr">path</span>:<span class="hljs-string">"homeviewson1"</span>,<span class="hljs-attr">component</span>:<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">'./views/homeviewson1.vue'</span>)<span class="hljs-comment">//懒加载的方式 },</span><br>      {  <span class="hljs-attr">path</span>:<span class="hljs-string">"homeviewson2"</span>,<span class="hljs-attr">component</span>:homeviewson2 }<br>    ]<br>  },<br>  {<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">'/about'</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'about'</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: "about" */</span> <span class="hljs-string">'../views/AboutView.vue'</span>)<br>    }<br>  }<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>({<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">'history'</span>,<br>  <span class="hljs-attr">base</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>,<br>  routes,<br>  linkActiveClass  :<span class="hljs-string">'myactive'</span> <span class="hljs-comment">// 路由高亮  myactive类名</span><br>})<br><br><span class="hljs-comment">// .router-link-active{ }</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br><span class="hljs-comment">// vue3 routes = [] 中间不变</span><br><span class="hljs-keyword">import</span> { createRouter, createWebHashHistory } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'../views/HomeView.vue'</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>({<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes<br>})<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></tbody></table></figure><ul><li><code>created() {   this.$route.query  this.$route.params 获取路由参数</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue</span><br><span class="hljs-comment">// main.js  导入 使用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span>   <span class="hljs-comment">//  导入</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span>     <span class="hljs-comment">//</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({<br>  router, <span class="hljs-comment">// 使用</span><br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">h</span>) { <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>) } <span class="hljs-comment">// render:h =&gt; h(APP)</span><br>}).$mount(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// vue3</span><br><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>)<br><br><span class="hljs-comment">// App.vue</span><br>&lt;router-link to=<span class="hljs-string">"/"</span>&gt;<span class="hljs-title class_">Home</span>&lt;<span class="hljs-regexp">/router-link&gt;  /</span><span class="hljs-regexp">/ 默认渲染a标签 自定义标签</span><br><span class="hljs-regexp">&lt;router-link to="/</span>login?id=<span class="hljs-number">1000</span>&amp;name=zs<span class="hljs-string">"&gt;Home&lt;/router-link&gt; // 传递参数</span><br><span class="hljs-string">// 绑定动态传递参数</span><br><span class="hljs-string">&lt;router-link :to="</span>home<span class="hljs-string">"&gt;Home&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;router-link :to="</span>{ <span class="hljs-attr">path</span>:<span class="hljs-string">'home'</span> }<span class="hljs-string">"&gt;Home&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;router-link :to="</span>{ <span class="hljs-attr">name</span>:<span class="hljs-string">'user'</span>,<span class="hljs-attr">params</span>:{ <span class="hljs-attr">userId</span>:<span class="hljs-number">123</span> } }<span class="hljs-string">"&gt;&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;router-link :to="</span>{ <span class="hljs-attr">path</span>: <span class="hljs-string">'register'</span>, <span class="hljs-attr">query</span>: { <span class="hljs-attr">plan</span>: <span class="hljs-string">'private'</span> }}<span class="hljs-string">"&gt;&lt;/router-link&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;router-view/&gt; // 占位符</span><br></code></pre></td></tr></tbody></table></figure><p>监听路由变化 watch</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>:{<br>  <span class="hljs-string">'$route'</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) {<br>      <span class="hljs-comment">// newVal.path</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>命名路由 vs 命名视图</p><ul><li>重命名路由的名称 添加 name 属性</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-link :to=<span class="hljs-string">"?userId=123"</span>&gt;<span class="hljs-title class_">User</span>&lt;/router-link&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"{ name:'user',params:{ userId:123 }}"</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/123"</span>&gt;</span>/user/123<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"{ name:'user',params:{ userId:123 }}"</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><br><span class="hljs-keyword">const</span> routes = [<br>   {<br>     <span class="hljs-attr">path</span>:<span class="hljs-string">'/user/:userId'</span><br>     <span class="hljs-attr">name</span>:<span class="hljs-string">'user'</span>, <span class="hljs-comment">// 命名路由 方便动态绑定传递参数</span><br>     <span class="hljs-attr">componet</span>:<span class="hljs-title class_">User</span><br>    }<br>]<br><br>router.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'user'</span>, <span class="hljs-attr">params</span>: { <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> }})<br></code></pre></td></tr></tbody></table></figure><ul><li>命名视图  同一路由router-view name绑定多个组件 router-view name</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;router-view /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"a"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"b"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>:[<br>{<br><span class="hljs-attr">path</span>:<span class="hljs-string">'/'</span>,<span class="hljs-attr">components</span>:{<br><span class="hljs-attr">default</span>:header<br><span class="hljs-attr">a</span>:sidebar, <span class="hljs-comment">// name名:组件名</span><br>        <span class="hljs-attr">b</span>:mainbox<br>}<br>}<br>]<br></code></pre></td></tr></tbody></table></figure><p>动态路由匹配  某种模式（ : ）匹配到的<code>所有路由</code>，全部<code>映射到同个组件</code></p><ul><li>动态路径参数<code>:</code>: 同一个组件，不同的路由参数 通过 动态路径参数 渲染出不同的 多个不同组件</li><li>同一路由可以匹配多个路由，匹配的优先级就按照路由的定义顺序：谁先定义，谁的优先级就最高（先定义优先级高）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>: [<br>     { <span class="hljs-attr">path</span>: <span class="hljs-string">'/user/:length/:id'</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">'../components/User.vue'</span>) }<br>  <span class="hljs-comment">// 当匹配 /user/:length/:id 这个模式时   导入渲染组件</span><br>]<br><br>$route.<span class="hljs-property">params</span>.<span class="hljs-property">length</span>  $route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br><br>&lt;router-link to=<span class="hljs-string">"/user/short/xxx"</span>&gt;用户一&lt;/router-link&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/middle/xxxqiang"</span>&gt;</span>用户二<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/long/huaweiqiang"</span>&gt;</span>用户三<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>路由元信息 meta 字段</p><ul><li>添加路由元信息 meta 字段</li><li>定义路由的时候可以配置 <code>meta</code> 字段：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>: [<br>    { path： <span class="hljs-string">'/bar'</span>,<span class="hljs-attr">component</span>: <span class="hljs-title class_">Bar</span>,<span class="hljs-attr">metat</span>:{<span class="hljs-attr">requiresAuth</span>:<span class="hljs-literal">true</span>} }<br>    ]<br></code></pre></td></tr></tbody></table></figure><p>路由懒加载</p><ul><li>当打包构建项目时，JavaScript包会变得非常大，影响页面加载。如果我们能把不同路径对应的组件分割成不同的代码块，然后当路由被访问被访问的时候才加载对应的组件，这样就更加高效了<br>实现方式（实现路由组件的懒加载）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个能够被 Webpack 自动代码分割的异步组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Foo</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-string">'./Foo.vue'</span>)<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>({<br>  <span class="hljs-attr">routes</span>: [<br>    { <span class="hljs-attr">path</span>: <span class="hljs-string">'/foo'</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Foo</span> },<br>    { <span class="hljs-attr">path</span>: <span class="hljs-string">'/foo'</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">'./Foo.vue'</span>) }<br>  ]<br>})<br>把组件按组分块<br>把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用命名 chunk<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Foo</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: "group-foo" */</span> <span class="hljs-string">'./Foo.vue'</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Bar</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: "group-foo" */</span> <span class="hljs-string">'./Bar.vue'</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Baz</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: "group-foo" */</span> <span class="hljs-string">'./Baz.vue'</span>)<br></code></pre></td></tr></tbody></table></figure><p>导航守卫  3全局 <code>beforeEach/Resolve/afterEach</code> + 1路由  <code>beforeEnter</code>+ 3组件 <code>beforeRouter + Enter、Update、Leave</code></p><ul><li>“导航”表示路由正在发生变化</li></ul><p><code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航</p><ul><li>全局<ul><li>前置守卫  <code>router.beforeEach</code><ul><li><strong><code>to: Route</code></strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1">路由对象</a></li><li><strong><code>from: Route</code></strong>: 当前导航正要离开的路由</li><li><strong><code>next: Function</code></strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul><li>next()</li><li>next(false)</li><li><code>next('/')</code></li><li>next(error)</li></ul></li></ul></li><li>解析守卫    <code>router.beforeResolve</code></li><li>后置守卫     <code>router.afterEach</code></li></ul></li><li>路由守卫 <code>routes路由规则  beforeEnter</code></li><li>组件守卫 <code>Enter、Update、Leave</code>  路由组件内直接定义以下路由导航守卫<ul><li><code>beforeRouterEnter</code></li><li><code>beforeRouterUpdate</code></li><li><code>beforeRouterLeave</code></li></ul></li></ul><p>完整的导航解析流程</p><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局前置守卫 router.beforeEach</span><br>router.<span class="hljs-title function_">beforeEach</span>((to,<span class="hljs-keyword">from</span>,next)) =&gt;{<br>}<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span>(to.<span class="hljs-property">name</span> !== ‘<span class="hljs-title class_">Login</span>’ &amp;&amp; !isAuthenticated) <span class="hljs-title function_">next</span>({ <span class="hljs-attr">name</span>:<span class="hljs-string">'Login'</span> })<br>    <span class="hljs-keyword">else</span> <span class="hljs-title function_">next</span>()<br>})<br><span class="hljs-comment">//全局解析守卫 router.beforeResolve</span><br><br><span class="hljs-comment">//全局后置钩子 router.afterEach</span><br><br><span class="hljs-comment">// 路由独享的守卫 beforeEnter</span><br><span class="hljs-attr">routes</span>:[<br>  {<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">'/foo'</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Foo</span>,<br>    <span class="hljs-attr">beforeEnter</span>:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span>{<br>      <span class="hljs-comment">// 这些守卫与全局前置守卫的方法参数是一样的</span><br>    }<br>  }<br>]<br></code></pre></td></tr></tbody></table></figure><ul><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)webpack</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/webpack.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/webpack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><ul><li>安装 webpack webpack-cli</li><li>webpack命令： webpack .\src\main.js -o .\dest\bundle.js</li><li>配置文件： webpack.config.js  package.json</li><li>两个环境： 生产环境 与 开发环境</li><li>四大核心概念 Entry Output Loader Plugins</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">webpack.<span class="hljs-property">config</span>.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-comment">// 在配置文件中，需要手动指定入口和出口 exports出口</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {<br>    <span class="hljs-comment">//入口，表示，要使用webpack打包那个文件</span><br>    <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">'./src/main.js'</span>),<br>    <span class="hljs-attr">output</span>: { <span class="hljs-comment">// 输出文件相关的配置</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">'./dist'</span>),<span class="hljs-comment">//指定打包好的文件，输出到哪个目录中去</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">'bundle.js'</span> <span class="hljs-comment">//输出的文件的名称</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>package.json</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">script:{<br>"dev":"webpack --mode development",<br>"build":"webpack --mode production "<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>plugin</p><ul><li>webpack-dev-serve 自动运行项目 -D<ul><li>npm install <a href="mailto:webpack-dev-server@2.9.7">webpack-dev-server@2.9.7</a> -D</li><li>webpack-dev-server的版本太高的锅，3.以上的还是不行。所以降到2.11.3一下左右即可</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">"dev":"webpack-dev-server --open --port 3000 --contentBase src --hot"devServer:{ // 配置dev-server命令参数的第二次形式，相对来说，这种方式麻烦一些    open:true, //自动打开浏览器    port:3000,// 设置启动时候的运行端口    contentBase: 'src'//指定托管的根目录 src 要带 ‘’ 号    hot:true // 启用热更新 }plugins:[ //数组    new webpack.HotModuleReplacementPlugin();    //new 一个热更新的模块对象 这是启动更新]<br></code></pre></td></tr></tbody></table></figure><ul><li>html-webpack-plugin   npm i html-webpack-plugin -D</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>)<span class="hljs-keyword">const</span> htmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>)<span class="hljs-attr">plugins</span>:[     <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>(),<span class="hljs-comment">//创建一个在内存中，生成HTML页面的插件   new htmlWebpackPlugin({  template:path.join(_dirname,'./src/index.html'),   //指定模板页面，会根据指定的页面路径，去生成内存中的页面   filename:'index123.html' //指定生成的页面的名称    })]</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>loader</p><ul><li>css<ul><li>npm i style-loader css-loader -D   <code>css</code></li><li>npm i less-loader less -D<code>less</code></li><li>npm i sass-loader node-sass -D<code>scss</code></li></ul></li><li>image 字体<ul><li>npm i url-loader file-loader -D</li></ul></li><li>babel</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//第一套包 babel转换工具npm i babel-core babel-loader babel-plugin-transform-runtime -Dbabel-core/loader plugin-transform-runtime //第二套包 语法插件npm i babel-preset-env babel-preset-stage-0 -Dbabel-preset- env/stage-0<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>:{<br><span class="hljs-attr">rules</span>:[<br>{<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css&amp;/</span>,<span class="hljs-attr">use</span>:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>]},<br>{<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.less&amp;/</span>,<span class="hljs-attr">use</span>:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'less-loader'</span>]},<br>        {<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.scss$/</span>,<span class="hljs-attr">use</span>:[<span class="hljs-string">'style-loader'</span>,<span class="hljs-string">'css-loader'</span>,<span class="hljs-string">'sass-loader'</span>]},<br>        {<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>,<span class="hljs-attr">use</span>:<span class="hljs-string">'url-loader'</span>},<br>        {<span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif|bmp|jpeg)$/</span>,<span class="hljs-attr">use</span>:<span class="hljs-string">'url-loader?limit=7631$name=[name].[ext]'</span>}<br>        { <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.js$/</span>,<span class="hljs-attr">use</span>:<span class="hljs-string">'babel-loader'</span>,<span class="hljs-attr">exclude</span>:<span class="hljs-regexp">/node_modules/</span> }<br>]<br>}<br><br><span class="hljs-comment">// presets  语法</span><br>.<span class="hljs-property">babelrc</span>文件<br>{<br><span class="hljs-string">"presets"</span>:[<span class="hljs-string">"env"</span>,<span class="hljs-string">"stage-0"</span>], <span class="hljs-comment">//语法</span><br><span class="hljs-string">"plugins"</span>:[<span class="hljs-string">"transform-runtime"</span>] <span class="hljs-comment">//插件</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)正则表达式</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>js</p><ul><li>RegExp对象 test() exec toString</li><li>字符串实例方法 search split match replace(All)(/w/g,’’)</li></ul><p>组成</p><ul><li>转义字符 \n \f 换页 \r 回车 \s  空白符 \t  制表符 \v \b 回退符</li><li>多个字符  [0-9] 等同 \d [A-Z、 a-z、 0-9]</li><li>元字符<ul><li>^ 开始 $ 结束 \d数字 \b 单词 \s 空白符 \w  匹配字母或数字或下划线或汉字 \B 非单词边界匹配 \D 不包括 \S 非空白字符</li></ul></li><li><code>* 零次或多次 + 一次或多次 ? 零次或一次 {n} 确定的 n 次 {n,m} n到m次 {n,} 至少匹配n 次</code></li><li>| 指明两项之间的一个选择  . 匹配除换行符 \n 之外的任何单字符</li><li>模式 m i g</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(tools)window10</title>
      <link href="/%E5%B7%A5%E5%85%B7%E7%AF%87/Win10.html"/>
      <url>/%E5%B7%A5%E5%85%B7%E7%AF%87/Win10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h1><h2 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h2><p>电子书后缀</p><ul><li>电子书格式， 是对使用电子书时的文件编码方式，文件结构的一种约定，便于区分。如同一把钥匙开一把锁，不同的文件要用不同的方法去读，去显示，去写，去打开或运行。分为PC电子书格式和手机电子书格式，PC电子书格式包括EXE、TXT、HTML、HLP等，手机电子书格式包括UMD、JAR等。</li></ul><table><thead><tr><th>设备</th><th>格式</th></tr></thead><tbody><tr><td>PC格式</td><td>EXE、TXT、HTML、HLP、CHM、LIT、PDF、WDL、CEB、ADM、PDG、EPUB、CAJ</td></tr><tr><td>手机格式</td><td>UMD、JAR</td></tr></tbody></table><p>常见后缀</p><ul><li><p>Kindle格式(后缀MOBI、.AZW) ,常用后缀 mobi 、azw3、epub</p></li><li><p>Microsoft Word的文档格式(后缀DOC、.DOCX)</p></li></ul><p>PDF</p><ul><li><strong>PDF</strong>（<strong>Portable Document Format</strong>的简称，意为“可携带文档格式”），是由Adobe Systems用于与应用程序、操作系统、硬件无关的方式进行文件交换所发展出的文件格式。PDF文件以[PostScript语言图象模型为基础，无论在哪种打印机上都可保证精确的颜色和准确的打印效果，即PDF会忠实地再现原稿的每一个字符、颜色以及图象。</li></ul><p>MOBI</p><ul><li>mobi 和 azw 格式的推手主要是 Amazon，这两种电子书格式的发展很大程度上依靠 Amazon 这个巨大的内容提供商及其电子书阅读器 Kindle 的流行普及。它们同属亚马逊的私有格式，没有本质的区别，可以简单的这样理解，mobi 是比较老的一种格式，而 azw 只是 mobi 的另一种形式而已，也可以理解为 mobi 加了个壳，亚马逊利用它对电子书做 DRM 版权保护</li></ul><p>AZW3</p><ul><li>亚马逊主推的电子书格式 主要说一下azw3——azw3的本质是KF8，是随着2011年Amazon推出Kindle Fire平板时一起推出的。它填补了Mobi对于复杂排版支持的缺陷，支持很多HTML5（尚不支持 HTML5 的视频和音频标签）和CSS3的语法，这就大大改善了原来mobi或azw内容排版上的一些缺陷，单纯从读者的角度来讲，是不输epub格式的。从 Amazon购买的书，大部分已经是azw3格式了，而以前主流的mobi格式则越来越少，<code>它正逐渐取代mobi成为Kindle电子书的主流格式</code>。</li></ul><p>EPUB</p><ul><li>EPUB（Electronic Publication的缩写，电子出版）是一种电子图书标准，由国际数字出版论坛（IDPF）提出；其中包括3种文件格式标准（文件的附文件名为.epub），这个格式已取代了先前的Open eBook开放电子书标准。</li></ul><p>CHM</p><ul><li>CHM 文件格式是微软于 1998 年推出的基于 HTML 文件特性的帮助文件系统，以替代早先的 WinHelp 帮助系统。它在 Windows 98 中把 CHM 类型文件称作“编译的 HTML 帮助文件”（Compiled HTML Help file）。</li></ul><p>图片后缀</p><ul><li><p>JPEG格式(后缀JPEG、.JPG)</p></li><li><p>GIF格式 (后缀GIF)</p></li><li><p>PNG格式 (后缀PNG)</p></li><li><p>webp 图像格式网页图片格式</p><ul><li>WebP图像格式是新的图像压缩格式。使用这个格式的图像的体积将比JPEG格式图像减小40%，与JPEG相同，WebP是一种有损压缩。但谷歌表示，这种格式的主要优势在于高效率。WebP图像格式源于Google的开源视频格式WebM。Google计划将推出WebP软件，让人们自己判断图片质量。Google表示将在未来几周让Chrome本地支持WebP图片。 并希望其它网页开发者也采用这种新格式。</li></ul></li><li><p>base64图片</p><ul><li>图片的base64编码就是可以将一张图片数据编码成一串字符串，使用该字符串代替图像地址url。</li></ul></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="免费域名地址"><a href="#免费域名地址" class="headerlink" title="免费域名地址"></a>免费域名地址</h3><p><a href="https://my.freenom.com/clientarea.php?managedns=xxx.tk&amp;domainid=1095440288">Client Area - Freenom</a></p><h3 id="宝塔控制面板"><a href="#宝塔控制面板" class="headerlink" title="宝塔控制面板"></a>宝塔控制面板</h3><h3 id="服务器连接的方法"><a href="#服务器连接的方法" class="headerlink" title="服务器连接的方法"></a>服务器连接的方法</h3><h4 id="SSH-登陆"><a href="#SSH-登陆" class="headerlink" title="SSH 登陆"></a>SSH 登陆</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh –p端口号 用户名@IP地址<br>ssh -p22 root@47.115.35.13<br>Aa15361134471<br></code></pre></td></tr></tbody></table></figure><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>每次登录SH都需要输入密码很麻烦，而且可能不太安全。SSH还能使用另外一种登录方式，也就是使用密钥登录。这种登录方式需要客户端（自已操作的电脑）生成一堆公钥私钥对，然后将公钥添加到服务器中，这样下次就可以直接登录了。</p><p>首先生成SSH密钥，依照提示输入信息即可。默认生成在用户主目录中的.ssh文件夹中。带pub的是公钥，接下来需要添加到服务器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-keygen<br></code></pre></td></tr></tbody></table></figure><p>然后将本地公钥添加到服务器中，需要使用另一个命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">scp -P 端口号 本地文件路径 用户名@远程服务器地址:远程路径<br></code></pre></td></tr></tbody></table></figure><p>然后登陆服务器，找到复制进去的公钥，将公钥名字改为authorized_keys并添加到对应的.ssh文件夹中。然后退出SSH重新登陆试试，成功的话不需要输入密码就会直接进入远程服务器。</p><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Chocolatey-安装"><a href="#Chocolatey-安装" class="headerlink" title="Chocolatey 安装"></a>Chocolatey 安装</h3><p>Install with powershell.exe</p><p><a href="https://chocolatey.org/">Chocolatey</a> 是 Windows 上的包管理器</p><p><a href="https://chocolatey.org/install">Chocolatey Software | Installing Chocolatey</a></p><p>Run <code>Get-ExecutionPolicy</code>. If it returns <code>Restricted</code>, then run <code>Set-ExecutionPolicy AllSigned</code> or <code>Set-ExecutionPolicy Bypass -Scope Process</code>.</p><p>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(‘<a href="https://chocolatey.org/install.ps1'">https://chocolatey.org/install.ps1'</a>))</p><p>Now run the following command:</p><h3 id="Scoop-安装"><a href="#Scoop-安装" class="headerlink" title="Scoop 安装"></a>Scoop 安装</h3><p><a href="http://scoop.sh/">Scoop</a> 是一个 Windows 的命令行安装程序</p><h3 id="wget-安装"><a href="#wget-安装" class="headerlink" title="wget 安装"></a>wget 安装</h3><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。 对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。 wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。</p><h2 id="Window10操作"><a href="#Window10操作" class="headerlink" title="Window10操作"></a>Window10操作</h2><p>软件安装版本</p><blockquote><p>noinstall 绿色版</p><p>setup 安装版</p><p>Source code  (zip)   win源代码</p><p>Source code (tar.gz) linux 源代码</p><p>checksum 校验检查</p></blockquote><h3 id="OneQuick"><a href="#OneQuick" class="headerlink" title="OneQuick"></a>OneQuick</h3><h4 id="屏幕边缘"><a href="#屏幕边缘" class="headerlink" title="屏幕边缘"></a>屏幕边缘</h4><p><img src="https://i.loli.net/2020/05/03/NuzElHGRWMbaq6D.png" alt="image-20200503161852450"></p><h4 id="用指定的搜索引擎"><a href="#用指定的搜索引擎" class="headerlink" title="用指定的搜索引擎"></a>用指定的搜索引擎</h4><p>按两下 Ctrl+C 复制文本，再按下自定义按键触发运行</p><p><code>+ 指定搜索引擎的首字母</code></p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p><code>win + C</code> 打开 cmder</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>, g和 , ps</code></p><h3 id="WOX"><a href="#WOX" class="headerlink" title="WOX"></a>WOX</h3><p><code>WIn + 空格</code> mcd</p><p>新建ftp快捷方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">新建ftp快捷方式，用文件夹方式打开。<br>方法转自百度知道：<br>右键 新建快捷键方式 在 项目位置填写：<br>c:\windows\explorer.exe ftp://192.168.0.123，其中后面的IP改成你要访问的ftp服务器地址<br></code></pre></td></tr></tbody></table></figure><p>文件/文件夹批量重命名</p><h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><p>获取需要修改的全部文件名，并写入rename.bat中(就是把当前目录的所有文件名称写入到一个文件中)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /b&gt; rename.bat<br></code></pre></td></tr></tbody></table></figure><p>rename.bat</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename.bat<br>文件<br>ren <span class="hljs-string">"旧文件名.jpg"</span> “新文件名.jpg”<br>目录<br>ren <span class="hljs-string">"旧目录"</span> “新目录”<br></code></pre></td></tr></tbody></table></figure><p>通过excel 批量修改文件名称的号码</p><table><thead><tr><th>旧文件名</th><th>新文件名</th><th>新旧文件格式是否相同？</th><th>重命名</th><th>旧文件名+引号</th><th>新文件名+引号</th></tr></thead><tbody><tr><td>单元格A2</td><td>单元格B2</td><td>=IF(RIGHT(A3,4)=RIGHT(B3,4),RIGHT(A3,4),”格式不一致”)</td><td>ren</td><td>``=$G$1&amp;A2&amp;$G$1`</td><td>``=$G$1&amp;B2&amp;$G$1`</td></tr></tbody></table><ol><li><code>win + r : shell:startup</code> 开机启动</li></ol><h2 id="匿名邮箱"><a href="#匿名邮箱" class="headerlink" title="匿名邮箱"></a>匿名邮箱</h2><p><a href="http://www.emailondeck.com/">http://www.emailondeck.com/</a></p><p><a href="mailto:abdirahima37@kmonkeyd.com">abdirahima37@kmonkeyd.com</a></p><p>自动获取匿名的邮箱</p><p><a href="chrome-extension://nonmafimegllfoonjgplbabhmgfanaka/options.html?/signup">chrome-extension://nonmafimegllfoonjgplbabhmgfanaka/options.html?/signup</a></p><p>填写邮箱</p><p>var inp = document.querySelectorAll(‘input’) for(var i = 0;i &lt; inp.length;i++){ document.querySelectorAll(‘input’)[i].value = ‘<a href="mailto:hewatoh506@hubopss.com">hewatoh506@hubopss.com</a>‘ } document.querySelector(“body &gt; div &gt; form &gt; button”).click()</p><p>点击电脑邮箱的邮件发送来的地址</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-keyword">for</span>` `/r` `%a ``<span class="hljs-keyword">in</span>` `(*.rar,*.zip) ``<span class="hljs-keyword">do</span>` `"%Program Files%\<span class="hljs-number">7</span>-zip\<span class="hljs-number">7</span>zFM.exe"` `x ``"%~a"` `"%~dpa"` `-ibck<br>//D:\Program Files<br></code></pre></td></tr></tbody></table></figure><h2 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h2><p>各种电脑系统安装使用经典楷体拼音字体的方法如下： • Windows通用：打开“控制面板”-&gt;“外观”-&gt;“字体”，将下载到的字体文件“经典楷体拼音.ttf”拖动复制到这里即可。 • Win7/Win8/Win10: 鼠标右键单击字体文件“经典楷体拼音.ttf，在弹出菜单中选择 “Install” 即可。 • Windows XP: 把字体文件“经典楷体拼音.ttf”复制到“C:\Windows\Fonts”文件夹下，系统会自动完成安装。 • iOS：双击字体文件“经典楷体拼音.ttf”打开字体册，然后点击“安装字体”按钮即可。</p><h2 id="破解wiff"><a href="#破解wiff" class="headerlink" title="破解wiff"></a>破解wiff</h2><p>Contents:</p><p>安装kail linux</p><p>WEP模式直接排除（淘汰）</p><p>默认使用WPA/WPA-PSK 的加密方式</p><p>第一步抓到握手包</p><p>查看无线适配器</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo iwconfig<br></code></pre></td></tr></tbody></table></figure><p>开启监听模式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo airmon-ng start wlan0<br></code></pre></td></tr></tbody></table></figure><p>扫描周围的Wiff信号</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo airodump-ng wlan0mon<br></code></pre></td></tr></tbody></table></figure><p>Wireless Attacks</p><p>手动挡工具</p><p>自动挡工具</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>Ctrl+Alt+Del 组合键可以调出windows任务管理器外，<br>Ctrl+Shift+Esc”组合键一样能启动任务管理器</p><p>主键盘区：<br>Esc 键：escape，退出键。<br>Tab 键：tabulator key，跳格键，在文本编辑软件中增加四个空格，Windows中可用于切换屏幕上的焦点。<br>Ctrl 键：control，控制键。<br>Shift 键：上档键。<br>Alt 键：换档键。<br>Caps Lock 键：大写锁定键，用于切换系统大写锁定。<br>Windows 键：键盘上画着一个Windows视窗图标的键。按这个键可以打开开始菜单。<br>BackSpace 键：退格键，用于删除当前光标前的字符；退格键 在Win资源管理器后退；打开、另存为界面表示返回上级。<br>Enter键：回车键，换行，在Windows资源管理器表示打开文件（夹）或选中菜单选项；在Cmd[DOS Mode]表执行命令。<br>Space：空格键 如果活动选项是单选或复选框，则选中或清除框中的√<br>功能键区：<br>F1 帮助<br>F2 重命名、部分主板开机时的BIOS快捷键<br>F3 查找<br>F4 地址栏<br>F5 刷新<br>F6 切换（到地址栏）<br>F9 部分主板开机引导<br>F7、8 自定义<br>F10 + Shift或Alt 右键菜单<br>F11全屏<br>F12 部分主板开机引导<br>系统键区：<br>PrintScreen键：打印屏幕。按下该键后系统会自动全屏截图并保存至剪切板中（无任何提示可Ctrl+V贴至画图、QQ、Word等，BIOS中截的图可以在Windows等OS中查看），配合Alt键使用可以截取当前焦点所在的活动窗口。<br>ScrollLock键：滚动条锁定键，配合ScrollLock指示灯来控制和显示当前滚动条锁定状态。常见的软件中只有Excel支持此功能，使用频率极低。<br>Pause|Break键：暂停/中断键。当需要查看主板自检信息时，可以在自检时按下该键，自检结束后将不会自动进入下一步启动过程，而是等待用户操作。VBS（按键精灵等）、VBA编程中为暂停脚本。<br>编辑键区：<br>Insert键：插入/改写键。使用该键可以切换当前文本输入状态是插入状态还是改写状态。Word、写字板、记事本等文字处理和某些程序编译器支持该功能。<br>Delete键：删除键，文本编辑可以删除光标后而不是前的字符，文件浏览可以删除选中的文件。部分主板通过该键进入BIOS。<br>Delete+Shift删除被选中的项目，如果是文件，将被直接删除而不是放入回收站<br>Home键：起始键，用于将光标移至行开头。浏览网页时，可以返回网页最上端。<br>End键：结尾键，用于将光标移至结尾。浏览网页时，可以将页面滚至最下方。<br>Page Up键：向上翻页键。<br>PageDown键：向下翻页键。<br>数字键盘区：<br>NumLock键：数字锁定键，与NumLock指示灯对应，按下该键可以控制NumLock指示灯的状态。当NumLock指示灯点亮时，小键盘区用于输入数字；当NumLock指示灯熄灭时，小键盘区可代替编辑键区使用。<br>107键键盘附加按键：<br>WakeUp键：唤醒键<br>Sleep键：睡眠键<br>Power键：电源键<br>Fn在Win中编辑<br>F1 显示帮助。<br>F2 重命名。<br>F3 焦点在桌面时打开“查找：所有文件” 对话框（WIN10不适用）；Win资源管理器中切至搜索栏。<br>F4+Alt关闭窗口【焦点在桌面时是关机界面，在网页则关闭当前标签或浏览器】。<br>F5 刷新。<br>F6切换。焦点切到任务栏或活动窗口中的地址栏。F6或TAB键在左右窗格、地址栏、搜索栏、间切换<br>F10+Shift =Alt+F10 Application键激活当前焦点的右键菜单。（word中Shift+F10出现右键快捷菜单）<br>F11全屏、Esc退出。【Windows Explorer（即“计算机”点开的窗口，下简称Win资源管理器）是隐藏地址栏和树状图；网页隐藏搜索、收藏、插件、侧边、状态栏；媒体播放界面同理】<br>F12在Excel 或Word文档是另存为；网页页面是打开调试环境（审查元素）。<br>Up、Down、Left、Right 方向键编辑<br>方向键本键如果活动选项是选项按钮或文件则为移动焦点；<br>方向键 + Win键（简称Win键）使窗口全屏、最小化、靠左半边、靠右半边（部分版本不支持）；<br>方向键+Shift键将连续的文字或文件选中<br>方向键（左右）+Ctrl键 在英文单词或中文词语间跳跃<br>方向键（上下）+Ctrl键 在段落开头间跳跃<br>Ctrl键编辑<br>系统类<br>Ctrl+Alt+Delete打开安全选项（XP及以下为任务管理器，DOS系统中为重启）<br>Ctrl+Shift+Esc打开任务管理器 （Win9x中打开开始菜单）<br>Ctrl+Shift+N 新建一个新的文件夹（Win XP不适用）<br>Ctrl+Shift切换中英文输入法。<br>Ctrl+Space（空格）的作用不一样，是切换输入法和非输入法<br>Ctrl+Tab焦点向下一项移动<br>Ctrl+Shift+Tab=Shift+Tab焦点向上一项移动<br>Ctrl+F4 Win资源管理器中切至地址栏；媒体播放中停止。<br>　　<br>文字处理类<br>Ctrl+a 全选All<br>Ctrl+b 粗体 Bold<br>Ctrl+c 或insert 拷贝 Copy<br>Ctrl+d 字体格式 Decorate<br>Ctrl+e 居中对齐 Encenter<br>Ctrl+f 查找 Find<br>Ctrl+g 定位 Get address<br>Ctrl+h 替换 Huan<br>Ctrl+i 斜体 italic<br>Ctrl+j 两端对齐 Justify<br>Ctrl+k 超级链接 King Link<br>Ctrl+l 左对齐 Left Ailgn<br>Ctrl+m 左缩进 M……<br>Ctrl+n 新建 New 或Ctrl+Shift+n<br>Ctrl+o 打开 Open<br>Ctrl+p 打印 Print<br>Ctrl+r 右对齐 Right Align<br>Ctrl+s 保存 Save<br>Ctrl+t 首行缩进 =Tab<br>Ctrl+u 下划线 Underline<br>Ctrl+v = Shift + Insert 粘贴 Paste （在c边上故随意赋键)<br>Ctrl+w关闭当前的窗口、标签页、工作、文件或停止媒体播放Work<br>Ctrl+x 剪切<br>Ctrl+y= Alt+Shift + Backspace重复 （反撤销）<br>Ctrl+z= Alt + Backspace撤销</p><p>Ctrl+F4 Word中关闭当前应用程序中的当前文件。<br>Ctrl+F6 Word中切换到当前应用程序中的下一个文本。<br>Alt + 双击超链接执行匹配的命令（或选择选项）<br>Ctrl + 双击超链接打开链接<br>Shift word等Micro Office系列软件中按下不放，可以跳过自启动的宏<br>WIN键编辑<br>WindowsF1帮助给出的Win快捷键<br>WindowsF1帮助给出的Win快捷键<br>可以使用 Microsoft自然键盘或含有 Windows徽标键的其他任何兼容键盘的以下快捷键。<br>Win键<br>Win键</p><p>Win键+ 向上键最大化窗口<br>Win键+ 向左键将窗口左移<br>Win键+ 向右键将窗口右移<br>Win键+ 向下键最小化窗口<br>Win键+ F1 显示“帮助”<br>Win键+PrintScreen键截取当前屏幕到剪贴板，并保存截屏图片文件到“图片”文件夹中。（WIN8/10）<br>Win键或Ctrl+Esc打开开始菜单<br>Win键+Break打开“系统属性”对话框<br>Win键+Pause显示“系统属性”对话框<br>Win键+Tab循环切换任务栏上的程序（win7、win8）（windowsXP不适用）<br>Win键 + Tab使用 Aero Flip 3-D 循环切换任务栏上的程（win7）（windowsxp不适用）<br>Win键 +Tab+Ctrl通过 Aero Flip 3-D 使用方向键循环切换任务栏上的程序 （win7）<br>Win键 + Space如果开启了AERO效果，预览桌面 （win7）（在win10此项是小界面切换输入法）<br>Win键+ Home最小化除活动窗口之外的所有窗口（win7）（windowsXP不适用<br>主键盘区上的数字<br>Win键+数字启动锁定到任务栏中的由该数字所表示位置处的程序。如果该程序已在运行，则切换到该程序<br>Win键+Shift+数字启动锁定到任务栏中的由该数字所表示位置处的程序的新实例<br>Win键+Alt+ 数字打开锁定到任务栏中的第该数字个程序的跳转列表(Jump List)）</p><p>Win键+B选中桌面右下方托盘栏或任务栏Progress Bar<br>Win键+D显示桌面Desktop<br>Win键+E打开Windows资源管理器Explorer【即我的电脑、计算机】<br>Win键+F打开“查找：所有文件”对话框（win10中为打开反馈中心）（Win资源管理器中为切至查找栏）<br>Win键+F+Ctrl搜索计算机（如果已连接到网络）<br>Win键+G循环切换小工具（win7）（win10打开xbox菜单）（windowsXP不适用）<br>Win键+I 打开“设置”（win10）<br>Win键+L 锁定计算机或切换用户<br>Win键+M最小化所有窗口<br>Win键+Shift+M将最小化的窗口还原到桌面<br>WIN键+P多荧幕\投影仪选项选择演示显示模式。（WIN7）出现菜单后再摁Win+P选择选项，放开Win即可 确定。也可摁一次然后方向键选择回车键确定。<br>Win键+R打开“运行”对话框<br>WIN键+T显示任务栏当前所用程序的任务栏缩略图，再按一次切换到其他缩略图。（QWIN7）<br>Win键+U打开辅助工具管理器、轻松访问中心<br>Win键+X打开 Windows 移动中心（win7）（win10唤起开始按钮右键菜单）（windowsXP不适用）</p><p>Alt键编辑<br>Alt+Space 打开活动窗口最左上角的菜单<br>Alt+Space+N 最小化活动窗口<br>Alt+Tab切换当前程序 （加Shift反向）<br>Alt+Esc 切换当前程序 （加Shift反向）<br>Alt+Enter 将windows下运行的MSDOS窗口在窗口和全屏幕状态间切换<br>Alt+Print Screen将当前活动程序窗口以图像方式拷贝到剪贴板（加shift 可以跳到前一个窗口）<br>向后移动到上一个视图 ALT+左箭头<br>向前移动到上一个视图 ALT+右箭头<br>Shift键编辑<br>关闭所选文件夹及其所有父文件夹<br>按住 Shift键再单击“关闭按钮（仅适用于“我的电脑”）<br>系统自带放大镜程序编辑<br>旧版放大镜<br>Windows+PRINT SCREEN 将屏幕复制到剪贴板（包括鼠标光标）<br>Windows+SCROLL LOCK 将屏幕复制到剪贴板（不包括鼠标光标）<br>Windows+PAGE UP 切换反色。<br>Windows+ PAGE DOWN 切换跟随鼠标光标<br>Windows+向上箭头 增加放大率<br>Windows+向下箭头 减小放大率<br>新版放大镜<br>Windows给出的放大镜快捷键<br>Windows给出的放大镜快捷键<br>Win+ 唤起放大镜；放大<br>Win- 缩小<br>（设置中单次按键倍率可调）<br>其余见图<br>小键盘编辑<br>NUM LOCK+负号(-)折叠所选的文件夹<br>NUM LOCK+乘号(*)展开所选的文件夹下的所有文件及文件夹<br>NUM LOCK+加号(+) 展开所选的文件夹<br>IE浏览器编辑<br>显示前一页（前进键） ALT+RIGHT ARROW<br>显示后一页（后退键） ALT+LEFT ARROW<br>在页面上的各框架中切换 （加shift反向）Ctrl+TAB<br>这个键用来打开IE中的地址栏列表，要关闭IE窗口，可以用Alt+F4组合键 F4<br>刷新 F5<br>强行刷新 Ctrl+F5<br>可以快速在资源管理器及IE中定位到地址栏 F6<br>激活程序中的菜单栏 F10<br>可以使当前的资源管理器或IE变为全屏显示 F11<br>执行菜单上相应的命令 ALT+菜单上带下划线的字母<br>关闭多文档界面程序中的当前窗口 Ctrl+ F4<br>关闭当前窗口或退出程序 ALT+ F4<br>添加当前页面到收藏夹 Ctrl+ D<br>显示所选对话框项目的帮助 F1<br>显示当前窗口的系统菜单 ALT+空格键<br>显示所选项目的快捷菜单 Shift+ F10<br>显示“开始”菜单 Ctrl+ ESC<br>显示多文档界面程序的系统菜单 ALT+连字号(-)<br>切换到上次使用的窗口 按住ALT然后重复按TAB，<br>切换到另一个窗口 ALT+ TAB<br>在后台打开一个页面 Ctrl+ 鼠标左键单击<br>在新窗口中打开一个页面 Shift+ 鼠标左键单击<br>Windows资源管理器编辑<br>插入光盘时不用“自动播放”功能 按住 Shift插入 CD-ROM<br>复制文件 按住Ctrl拖动文件<br>创建快捷方式按住 Ctrl+Shift拖动文件 或按住 ALT拖动文件<br>立即删除某项目而不将其放入回收站 Shift+DELETE<br>显示“查找：所有文件” F3<br>显示项目的快捷菜单 APPLICATION键<br>刷新窗口的内容 F5<br>重命名项目 F2<br>重命名项目 F2 重命名时按Tab键可重命名下一文件，不用按回车+向下+F2<br>选择所有项目 Ctrl+ A<br>查看项目的属性 ALT+ ENTER或 ALT+双击<br>辅助选项编辑<br>Num Lock 键五秒钟 切换“切换键”的开和关。<br>按住键盘右侧Shift 八秒 切换筛选键开关<br>Shift 键五次 切换“粘滞键”的开和关。<br>（以上三种可在“控制面板”选择是否开启。<br>左ALT+左Shift+PRINT SCREEN 切换高对比度开关<br>左ALT+左Shift+NUM LOCK 切换鼠标键开关<br>NUM LOCK 五秒切换切换键开关<br>右侧 Shift 键八秒钟 切换“筛选键”的开和关。<br>左 ALT + 左 Shift + PRINT SCREEN 切换“高对比度”的开和关。<br>左 ALT + 左 Shift + NUM LOCK 切换“鼠标键”的开和关。<br>WIN+ U 打开“辅助功能管理器”。<br>Win10编辑<br>Win键+字母：<br>Win键+A：激活操作中心<br>Win键+B：聚焦于右下角托盘区<br>Win键+C：通过语音激活Cortana<br>Win键+D：显示桌面<br>Win键+E：打开文件管理器<br>Win键+G：打开Xbox游戏录制工具栏，供用户录制游戏视频或截屏激活截屏功能<br>Win键+H：激活Windows10应用的分享功能<br>Win键+I：打开Windows10设置<br>Win键+K：激活无线显示器连接或音频设备连接<br>Win键+L：锁定屏幕<br>Win键+P：投影屏幕<br>Win键+R：运行<br>Win键+S：搜索、激活Cortana（微软小娜）<br>Win键+T：快速切换任务栏程序<br>Win键+V：打开云剪贴板<br>Win键+X：打开高级用户功能</p><p>　　Win键+非字母：<br>Win+Break：看配置<br>Win键+Space：快速显示桌面<br>Win键+Tab：激活任务视图<br>Win键+分号：调出 Emoji 表情<br>Win键+1/2/3：打开任务栏中固定的程序，1代表任务栏中第一个应用图标<br>Win键+左/右/上/下：移动应用窗口<br>Win键+Shift+左箭头：移动到左边屏幕。<br>Win键+Shift+右箭头：移动到右边屏幕。<br>Win键+Shift+S：Windows自带截图<br>Win键+Ctrl+D：创建一个新的虚拟桌面<br>Win键+Ctrl+F4：关闭虚拟桌面<br>Win键+Ctrl+左/右：切换虚拟桌面</p><p>　　Ctrl键<br>Ctrl+Shift+N：新建文件夹。<br>Ctrl+shift+左键：以管理员身份运行。<br>Ctrl+Shift+Esc：任务管理器<br>Ctrl+Shift+Del：安全选项列表<br>Ctrl+W：关闭当前窗口。<br>Ctrl+F：定位到搜索框。</p><p>　　Alt键<br>Alt+D：定位到地址栏。<br>Alt+向左键：查看上一个文件夹。<br>Alt+向右键：查看下一个文件夹。<br>Alt+向上键：查看父文件夹。</p><p>　　Shift键<br>Shift+右键点击目录：在此处打开命令行窗口选项。<br>Shift+右键点击文件：发送到菜单。<br>Shift+点击任务栏（已经打开的）图标打开新窗口</p><p>　　鼠标<br>在同一分区目录间拖曳，默认执行剪切操作，按下Ctrl+拖曳，执行拷贝操作。<br>在不同分区间进行拖曳，默认执行拷贝操作，按下Shift+拖拽，执行剪切操作。<br>Alt+拖曳，创建快捷方式。<br>[2]<br>WinXP编辑<br>Ctrl + Shift + 任何箭头键 突出显示一块文本。<br>Shift + 任何箭头键 在窗口或桌面上选择多项，或者选中文档中的文本。<br>Ctrl + A 选中全部内容。<br>F3 搜索文件或文件夹。<br>Alt + Enter 查看所选项目的属性。<br>Alt + F4 关闭当前项目或者退出当前程序。<br>Alt + 空格键 为当前窗口打开快捷菜单。<br>Ctrl + F4 在允许同时打开多个文档的程序中关闭当前文档。<br>Alt + Tab 在打开的项目之间切换。<br>Alt + Esc 以项目打开的顺序循环切换。<br>F6 在窗口或桌面上循环切换屏幕元素。<br>F9+FN键是键盘锁定<br>F4 显示“我的电脑”和“Windows 资源管理器”中的“地址”栏列表。<br>Shift + F10 显示所选项的快捷菜单。<br>Alt + 空格键 显示当前窗口的“系统”菜单。<br>Ctrl + Esc 显示“开始”菜单。<br>ALT + 菜单名中带下划线的字母 显示相应的菜单。<br>在打开的菜单上显示的命令名称中带有下划线的字母 执行相应的命令。<br>F10 激活当前程序中的菜单条。<br>右箭头键 打开右边的下一菜单或者打开子菜单。<br>左箭头键 打开左边的下一菜单或者关闭子菜单。<br>F5 刷新当前窗口。<br>BackSpace 在“我的电脑”或“Windows 资源管理器”中查看上一层文件夹。<br>Esc 取消当前任务。<br>将光盘插入到 CD-ROM 驱动器时按 Shift 键 阻止光盘自动播放。<br>对话框编辑<br>取消当前任务 ESC<br>如果当前控件是个按钮，要单击该按钮。<br>如果当前控件是个复选框，要选择或清除该复选框<br>或者如果当前控件是个选项按钮，要单击该选项空格键<br>单击相应的命令 ALT+带下划线的字母<br>单击所选按钮 ENTER<br>在选项上向后移动 Shift+ TAB<br>在选项卡上向后移动 Ctrl+ Shift+ TAB<br>在选项上向前移动 TAB<br>在选项卡上向前移动 Ctrl+ TAB<br>如果在“另存为”或“打开”对话框中选择了某文件夹，要打开上一级文件夹<br>BACKSPACE<br>在“另存为”或“打开”对话框中打开“保存到”或“查阅” F4<br>刷新“另存为”或“打开”对话框 F5<br>自然键盘编辑<br>WIN 显示或隐藏”开始”菜单。<br>WIN+ BREAK 显示”系统属性”对话框。<br>WIN+ D 显示桌面。<br>WIN+ M 最小化所有窗口。<br>WIN+ Shift + M 还原最小化的窗口。<br>WIN+ E 打开”我的电脑”。<br>WIN+ F 打开windows反馈页面，F代表feedback。<br>Ctrl+WIN+ F 搜索计算机。<br>WIN+ F1 显示 Windows 帮助。<br>WIN+ L 如果连接到网络域，则锁定您的计算机，或者如果没有连接到网络域，则切换用户。<br>WIN+ R 打开”运行”对话框。<br>KEY 显示所选项的快捷菜单。<br>WIN+ U 打开”工具管理器”。<br>对话框编辑<br>Ctrl + Tab 在选项卡之间向前移动。<br>Ctrl + Shift +Tab 在选项卡之间向后移动。<br>Tab 在选项之间向前移动。<br>Shift + Tab 在选项之间向后移动。<br>ALT + 带下划线的字母 执行相应的命令或选中相应的选项。<br>Enter 执行活选项动或按钮所对应的命令。<br>空格键 如果活选项动是复选框，则选中或清除该复选框。<br>箭头键 活选项动是一组选项按钮时，请选中某个按钮。<br>F1 显示帮助。<br>F4 显示当前列表中的项目。<br>生僻快捷键编辑<br>Windows中的快捷键我们都很熟悉了，可是下面这些快捷键你平时用过吗？与普通的快捷键相比，它们的使用方法有些特别：这些键不能同时按下，而是要用两步或三步的连续操作，才能实现一项功能。虽然如此，使用这些快捷键也比使用鼠标方便。<br>Alt+空格→X 最大化当前窗口<br>Alt+空格→N 最小化当前窗口<br>提示：“Alt+空格→X”表示先按下“Alt+空格”组合键，然后松开组合键，再按下X键。下面“→”符号均表示先松开符号前按下的键，再按下符号后面的键。<br>在桌面或文件夹窗口中可使用以下快捷键（注意是文件夹窗口而不是具体的文件夹）：<br>右键→I→N 按名称排列图标<br>右键→I→T 按类型排列图标（呵呵，搞IT的应该记得住吧）<br>右键→I→Z 按大小排列图标<br>右键→I→D 按日期排列图标<br>右键→W→F 新建文件夹<br>右键→R 若在桌面则打开“显示属性”在文件夹则打开该文件夹的属性<br>右键→E 刷新当前窗口，效果等同F5<br>提示：这里的“右键”指的是主键盘区最下排右侧的Windows徽标键和Ctrl之间的那个键。<br>如果当前窗口是某个具体文件或文件夹：<br>右键→S 创建当前文件或目录的快捷方式<br>右键→R 查看当前文件或目录属性（相当于Alt+Enter）<br>右键→O 打开当前文件或目录（相当于回车）<br>右键→T→A 发送当前文件或目录到软盘<br>注意：有些软件可能会在右键里增加一些菜单，这些菜单的快捷键可能会与系统快捷键发生冲突。比如WinRAR会在文件或文件夹的右键菜单中增加一个“添加到”的菜单，该菜单的快捷键S会与系统右键菜单“创建快捷方式（S）”发生冲突。如果要去掉这些“外来”的右键菜单，我们可以打开WinRAR，在菜单栏上依次点击“选项→设置”，打开“设置”对话框，在“综合”选项卡中点击“选择关联菜单项目”按钮，在打开的对话框中清空所有选项前的复选框即可。<br>如果当前窗口是记事本：<br>右键→U 撤消操作，效果等同与Ctrl+Z<br>右键→P 粘贴，效果等同与Ctrl+V<br>右键→A 选中全部文字，效果等同于Ctrl+A<br>使用“我的电脑”和“Windows资源管理器”的快捷键<br>目的快捷键<br>关闭所选文件夹及其所有父<br>文件夹按住 Shift键再单击“关闭按钮（仅适用于“我的电脑”）<br>向后移动到上一个视图 ALT+左箭头<br>向前移动到上一个视图 ALT+右箭头<br>查看上一级文件夹 BACKSPACE<br>其实，这些快捷键大家都可以在相关程序的右键菜单中找到，在这里只是选择了几个比较实用的归纳了一下，你也可以自己研究。比如当前窗口是某个文件或文件夹，那么用“右键→M”就可以对该文件或文件夹进行重命名操作。不同的程序有不同的快捷键，大家可以自己研究试用，举一反三。<br>其他资料编辑<br>一、常见用法：<br>F1 显示当前程序或者windows的帮助内容。<br>F2 当你选中一个文件的话，这意味着“重命名”<br>F3 当你在桌面上的时候是打开“查找：所有文件” 对话框<br>F10或ALT 激活当前程序的菜单栏<br>Win键或Ctrl+ESC 打开开始菜单<br>Ctrl+ALT+DELETE 在win9x中打开关闭程序对话框<br>DELETE 删除被选择的选择项目，如果是文件，将被放入回收站<br>Shift+DELETE 删除被选择的选择项目，如果是文件，将被直接删除而不是放入回收站<br>Ctrl+N 新建一个新的文件<br>Ctrl+O 打开“打开文件”对话框<br>Ctrl+P 打开“打印”对话框<br>Ctrl+S 保存当前操作的文件<br>Ctrl+X 剪切被选择的项目到剪贴板<br>Ctrl+INSERT 或 Ctrl+C 复制被选择的项目到剪贴板<br>Shift+INSERT 或 Ctrl+V 粘贴剪贴板中的内容到当前位置<br>ALT+BACKSPACE 或 Ctrl+Z 撤销上一步的操作<br>Ctrl+Y 重做上一步被撤销的操作<br>ALT+Shift+BACKSPACE重做上一步被撤销的操作<br>Win键+M 最小化所有被打开的窗口。<br>Win键+Ctrl+M 重新将恢复上一项操作前窗口的大小和位置<br>Win键+E 打开资源管理器<br>Win键+F 打开“查找：所有文件”对话框<br>Win键+R 打开“运行”对话框<br>Win键+BREAK 打开“系统属性”对话框<br>Win键+Ctrl+F 打开“查找：计算机”对话框<br>Shift+F10或鼠标右击 打开当前活动项目的快捷菜单<br>Shift 在放入CD的时候按下不放，可以跳过自动播放CD。在打开word的时候按下不放，可以跳过自启动的宏<br>ALT+F4 关闭当前应用程序<br>ALT+SPACEBAR 打开程序最左上角的菜单<br>ALT+TAB 切换当前程序<br>ALT+ESC 切换当前程序<br>ALT+ENTER 将windows下运行的MSDOS窗口在窗口和全屏幕状态间切换<br>PRINT SCREEN 将当前屏幕以图象方式拷贝到剪贴板<br>ALT+PRINT SCREEN 将当前活动程序窗口以图象方式拷贝到剪贴板<br>Ctrl+F4 关闭当前应用程序中的当前文本（如word中）<br>Ctrl+F6 切换到当前应用程序中的下一个文本（加shift 可以跳到前一个窗口）<br>在IE中：<br>ALT+RIGHT ARROW 显示前一页（前进键）<br>ALT+LEFT ARROW 显示后一页（后退键）<br>Ctrl+TAB 在页面上的各框架中切换（加shift反向）<br>F5 刷新<br>Ctrl+F5 强行刷新<br>目的快捷键<br>激活程序中的菜单栏 F10<br>执行菜单上相应的命令 ALT+菜单上带下划线的字母<br>关闭多文档界面程序中的当<br>前窗口 Ctrl+ F4<br>关闭当前窗口或退出程序 ALT+ F4<br>复制 Ctrl+ C<br>剪切 Ctrl+ X<br>删除 DELETE<br>显示所选对话框项目的帮助 F1<br>显示当前窗口的系统菜单 ALT+空格键<br>显示所选项目的快捷菜单 Shift+ F10<br>显示“开始”菜单 Ctrl+ ESC<br>显示多文档界面程序的系统<br>菜单 ALT+连字号(-)<br>粘贴 CTR L+ V<br>切换到上次使用的窗口或者<br>按住 ALT然后重复按TAB，<br>切换到另一个窗口 ALT+ TAB<br>撤消 Ctrl+ Z<br>二、使用“Windows资源管理器”的快捷键<br>目的快捷键<br>如果当前选择展开了，要折<br>叠或者选择父文件夹左箭头<br>折叠所选的文件夹 NUM LOCK+负号(-)<br>如果当前选择折叠了，要展开<br>或者选择第一个子文件夹右箭头<br>展开当前选择下的所有文件夹 NUM LOCK+*<br>展开所选的文件夹 NUM LOCK+加号(+)<br>在左右窗格间切换 F6<br>三、使用 Win键<br>可以使用 Microsoft自然键盘或含有 Windows徽标键的其他任何兼容键盘的以下快捷键。<br>目的快捷键<br>在任务栏上的按钮间循环 WINDOWS+ TAB<br>显示“查找：所有文件” WINDOWS+ F<br>显示“查找：计算机” Ctrl+ WINDOWS+ F<br>显示“帮助” WINDOWS+ F1<br>显示“运行”命令 WINDOWS+ R<br>显示“开始”菜单 WINDOWS<br>显示“系统属性”对话框 WINDOWS+ BREAK<br>显示“Windows资源管理器” WINDOWS+ E<br>最小化或还原所有窗口 WINDOWS+ D<br>撤消最小化所有窗口 Shift+ WINDOWS+ M<br>四、使用“我的电脑”和“Windows资源管理器”的快捷键<br>目的快捷键<br>关闭所选文件夹及其所有父<br>文件夹按住 Shift键再单击“关闭按钮（仅适用于“我的电脑”）<br>向后移动到上一个视图 ALT+左箭头<br>向前移动到上一个视图 ALT+右箭头<br>查看上一级文件夹 BACKSPACE<br>五、使用对话框中的快捷键<br>目的快捷键<br>取消当前任务 ESC<br>如果当前控件是个按钮，要<br>单击该按钮或者如果当前控<br>件是个复选框，要选择或清<br>除该复选框或者如果当前控<br>件是个选项按钮，要单击该<br>选项空格键<br>单击相应的命令 ALT+带下划线的字母<br>单击所选按钮 ENTER<br>在选项上向后移动 Ctrl+ TAB<br>在选项卡上向后移动 Ctrl+ Shift+ TAB<br>在选项上向前移动 TAB<br>在选项卡上向前移动 Ctrl+ TAB<br>如果在“另存为”或“打开”<br>对话框中选择了某文件夹，<br>要打开上一级文件夹 BACKSPACE<br>在“另存为”或“打开”对<br>话框中打开“保存到”或<br>“查阅” F4<br>刷新“另存为”或“打开”<br>对话框 F5<br>六、使用“桌面”、“我的电脑”和“Windows资源管理器”快捷键<br>选择项目时，可以使用以下快捷键。<br>目的快捷键<br>插入光盘时不用“自动播放”<br>功能按住 Shift插入 CD-ROM<br>复制文件按住 Ctrl拖动文件<br>创建快捷方式按住 Ctrl+Shift拖动文件<br>立即删除某项目而不将其放入“回收站” Shift+DELETE<br>显示“查找：所有文件” F3<br>显示项目的快捷菜单 APPLICATION键<br>刷新窗口的内容 F5<br>重命名项目 F2<br>选择所有项目 Ctrl+ A<br>查看项目的属性 ALT+ ENTER或 ALT+双击<br>可将 APPLICATION键用于 Microsoft自然键盘或含有 APPLICATION键的其他兼容键<br>七、Microsoft放大程序的快捷键<br>这里运用Windows徽标键和其他键的组合。<br>快捷键目的<br>Windows徽标+PRINT SCREEN将屏幕复制到剪贴板（包括鼠标光标）<br>Windows徽标+SCROLL LOCK将屏幕复制到剪贴板（不包括鼠标光标）<br>Windows徽标+ PAGE UP切换反色。<br>Windows徽标+ PAGE DOWN切换跟随鼠标光标<br>Windows徽标+向上箭头增加放大率<br>Windows徽标+向下箭头减小放大率<br>八、使用辅助选项快捷键<br>目的快捷键<br>切换筛选键开关右Shift八秒<br>切换高对比度开关左ALT+左Shift+PRINT SCREEN<br>切换鼠标键开关左ALT+左Shift+NUM LOCK<br>切换粘滞键开关 Shift键五次<br>切换切换键开关 NUM LOC2000 快捷键<br>Windows 资源管理器”的快捷键<br>请按 目的<br>END 显示当前窗口的底端。<br>HOME 显示当前窗口的顶端。<br>NUM LOCK+ 数字键盘的星号 (*) 显示所选文件夹的所有子文件夹。<br>NUM LOCK+ 数字键盘的加号 (+) 显示所选文件夹的内容。<br>NUM LOCK+ 数字键盘的减号 (-) 折叠所选的文件夹<br>向左键 当前所选项处于展开状态时折叠该项，或选定其父文件夹。<br>向右键 当前所选项处于折叠状态时展开该项，或选定第一个子文件夹。<br>注意<br>如果在“辅助功能选项”中打开“粘滞键”，则有些快捷键可能不起作用。<br>如果您通过“Microsoft 终端服务客户”连接到 Windows 2000，则某些快捷键将会更改。详细信息，请参阅“Microsoft 终端服务客户”的联机文档。<br>f1－帮助<br>f2－重命名<br>f5－刷新<br>alt+f4－关闭窗口<br>ctrl+a=全部选中<br>ctrl+c=拷贝<br>ctrl+v=粘贴<br>ctrl+x=剪切<br>alt+enter(或ALT+双击鼠标左键)=属性</p><h3 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h3><ul><li>新建一个指定的文件 名称</li></ul><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">echo</span> on  &gt;a.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-number">123</span> &gt;a.txt<br>touch <span class="hljs-number">124</span>.qdfs<br></code></pre></td></tr></tbody></table></figure><ul><li>删除文件 del 文件名</li><li>查看文件 cat  文件名</li><li>写入文件</li></ul><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">echo</span> <span class="hljs-number">123</span>asdfsadfdsf &gt;&gt; a.txt<br>cat &gt;&gt; a.txt<br>输入内容<br></code></pre></td></tr></tbody></table></figure><ul><li>notepad 打开记事本</li><li>mspaint 打开画图</li><li>calc 打开计算机</li><li>write 写字板</li><li>sysdm.cpl 打开环境变量设置窗口</li><li>md 创建目录</li><li>rmdir(rd) 删除目录，目录内没有文档。</li><li>rd /s/q 目录名 包含文件夹下的子目录</li><li>echo on a.txt 创建空文件</li><li>del 删除文件</li><li>rm 文件名 删除文件</li><li>cat 文件名 查看文件内容</li><li>cat &gt; 文件名 向文件中写上内容。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">定时自动关机<br> shutdown -s -t 3600（秒）<br> 下滑关机<br> slidetoshutdown<br> 取消关机<br> shutdown -a<br> 要在 晚上23：00准时关机你可以输入如下命令<br> at 23:00 shutdown -s<br> 重启<br> shutdown -r<br> 设置关机倒计时<br> shutdown -t 时间<br><br> shutdown /help<br> cd.&gt;a.text<br><br>Win10 cmd命令大全分享：打开系统组件<br><br>appwiz.cpl------------添加删除程序<br>control userpasswords2--------用户帐户设置<br>cleanmgr-------垃圾整理<br>CMD--------------命令提示符可以当作是 Windows 的一个附件，Ping，Convert 这些不能在图形环境下 使用的功能要借助它来完成。<br>cmd------jview察看Java虚拟机版本。<br>command.com------调用的则是系统内置的 NTVDM，一个 DOS虚拟机。它完全是一个类似 Virtual PC 的 虚拟环境，和系统本身联系不大。当我们在命令提示符下运行 DOS 程序时，实际上也 是自动转移到 NTVDM虚拟机下，和 CMD 本身没什么关系。<br>calc-----------启动计算器<br>chkdsk.exe-----Chkdsk磁盘检查<br>compmgmt.msc---计算机管理<br>conf-----------启动 netmeeting<br>control userpasswords2-----User Account 权限设置<br>devmgmt.msc--- 设备管理器<br>diskmgmt.msc---磁盘管理实用程序<br>dfrg.msc-------磁盘碎片整理程序<br>drwtsn32------ 系统医生<br>dvdplay--------启动Media Player<br>dxdiag-----------DirectX Diagnostic Tool<br>gpedit.msc-------组策略编辑器<br>gpupdate /target:computer /force 强制刷新组策略<br>eventvwr.exe-----事件查看器<br>explorer-------打开资源管理器<br>logoff---------注销命令<br>lusrmgr.msc----本机用户和组<br>msinfo32---------系统信息<br>msconfig---------系统配置实用程序<br>net start (servicename)----启动该服务<br>net stop (servicename)-----停止该服务<br>notepad--------打开记事本<br>nusrmgr.cpl-------同control userpasswords，打开用户帐户控制面板<br>Nslookup-------IP地址侦测器<br>oobe/msoobe /a----检查XP是否激活<br>perfmon.msc----计算机性能监测程序<br>progman--------程序管理器<br>regedit----------注册表编辑器<br>regedt32-------注册表编辑器<br>regsvr32 /u *.dll----停止dll文件运行<br>route print------查看路由表<br>rononce -p ----15秒关机<br>rsop.msc-------组策略结果集<br>rundll32.exe rundll32.exe %Systemroot%System32shimgvw.dll,ImageView_Fullscreen----启动一个空白的Windows 图片和传真查看器<br>secpol.msc--------本地安全策略<br>services.msc---本地服务设置<br>sfc /scannow-----启动系统文件检查器<br>sndrec32-------录音机<br>taskmgr-----任务管理器（适用于2000／xp／2003）<br>tsshutdn-------60秒倒计时关机命令<br>winchat--------XP自带局域网聊天<br>winmsd---------系统信息<br>winver-----显示About Windows 窗口<br>wupdmgr-----------Windows Update<br><br>Win10 cmd命令大全分享：对系统进行操作<br><br>AT 计划在计算机上运行的命令和程序。<br>ATTRIB 显示或更改文件属性。<br>BREAK 设置或清除扩展式 CTRL+C 检查。<br>CACLS 显示或修改文件的访问控制列表(ACLs)。<br>CALL 从另一个批处理程序调用这一个。<br>CD 显示当前目录的名称或将其更改。<br>CHCP 显示或设置活动代码页数。<br>CHDIR 显示当前目录的名称或将其更改。<br>CHKDSK 检查磁盘并显示状态报告。<br>CHKNTFS 显示或修改启动时间磁盘检查。<br>CLS 清除屏幕。<br>CMD 打开另一个 Windows 命令解释程序窗口。<br>COLOR 设置默认控制台前景和背景颜色。<br>COMP 比较两个或两套文件的内容。<br>COMPACT 显示或更改 NTFS 分区上文件的压缩。<br>CONVERT 将 FAT 卷转换成 NTFS。您不能转换当前驱动器。<br>COPY 将至少一个文件复制到另一个位置。<br>DATE 显示或设置日期。<br>DEL 删除至少一个文件。<br>DIR 显示一个目录中的文件和子目录。<br>DISKCOMP 比较两个软盘的内容。<br>DISKCOPY 将一个软盘的内容复制到另一个软盘。<br>DOSKEY 编辑命令行、调用 Windows 命令并创建宏。<br>ECHO 显示消息，或将命令回显打开或关上。<br>ENDLOCAL 结束批文件中环境更改的本地化。<br>ERASE 删除至少一个文件。<br>EXIT 退出 CMD.EXE 程序(命令解释程序)。<br>FC 比较两个或两套文件，并显示不同处。<br>FIND 在文件中搜索文字字符串。<br>FINDSTR 在文件中搜索字符串。<br>FOR 为一套文件中的每个文件运行一个指定的命令。<br>FORMAT 格式化磁盘，以便跟 Windows 使用。<br>FTYPE 显示或修改用于文件扩展名关联的文件类型。<br>GOTO 将 Windows 命令解释程序指向批处理程序中某个标明的行。<br>GRAFTABL 启用 Windows 来以图像模式显示扩展字符集。<br>HELP 提供 Windows 命令的帮助信息。<br>IF 执行批处理程序中的条件性处理。<br>LABEL 创建、更改或删除磁盘的卷标。<br>MD 创建目录。<br>MKDIR 创建目录。<br>MODE 配置系统设备。<br>MORE 一次显示一个结果屏幕。<br>MOVE 将文件从一个目录移到另一个目录。<br>PATH 显示或设置可执行文件的搜索路径。<br>PAUSE 暂停批文件的处理并显示消息。<br>POPD 还原 PUSHD 保存的当前目录的上一个值。<br>PRINT 打印文本文件。<br>PROMPT 更改 Windows 命令提示符。<br>PUSHD 保存当前目录，然后对其进行更改。<br>RD 删除目录。<br>RECOVER 从有问题的磁盘恢复可读信息。<br>REM 记录批文件或 CONFIG.SYS 中的注释。<br>REN 重命名文件。<br>RENAME 重命名文件。<br>REPLACE 替换文件。<br>RMDIR 删除目录。<br>SET 显示、设置或删除 Windows 环境变量。<br>SETLOCAL 开始批文件中环境更改的本地化。<br>SHIFT 更换批文件中可替换参数的位置。<br>SORT 对输入进行分类。<br>START 启动另一个窗口来运行指定的程序或命令。<br>SUBST 将路径跟一个驱动器号关联。<br>TIME 显示或设置系统时间。<br>TITLE 设置 CMD.EXE 会话的窗口标题。<br>TREE 以图形模式显示驱动器或路径的目录结构。<br>TYPE 显示文本文件的内容。<br>VER 显示 Windows 版本。<br>VERIFY 告诉 Windows 是否验证文件是否已正确写入磁盘。<br>VOL 显示磁盘卷标和序列号。<br>XCOPY 复制文件和目录树。<br></code></pre></td></tr></tbody></table></figure><p>微软从 Windows 8开始，为 Windows 增加了一项不需要第三方软件的快捷键屏幕截图功能，该功能被延续到了Windows 10 系统当中。当我们需要对屏幕进行截图时，只需按下 Windows + PrintScreen 键，屏幕会变暗一下以提示用户截图完成，并将截取到的 Windows 屏幕图片保存到 此电脑— 图片 — 屏幕截图 文件夹当中。</p><p>C:\Users\Administrator\Pictures\Screenshots4.charmap：启动字符映射表<br>5.chkdsk.exe：Chkdsk磁盘检查(管理员身份运行命令提示符)<br>6.cleanmgr: 打开磁盘清理工具<br>7.cliconfg：SQL SERVER 客户端网络实用工具<br>8.cmstp：连接管理器配置文件安装程序<br>10.自动关机命令<br>　　Shutdown -s -t 600：表示600秒后自动关机<br>　　shutdown -a ：可取消定时关机<br>　　Shutdown -r -t 600：表示600秒后自动重启<br>　　rundll32 user32.dll,LockWorkStation：表示锁定计算机<br>11.colorcpl：颜色管理，配置显示器和打印机等中的色彩<br>12.CompMgmtLauncher：计算机管理<br>13.<br>14.credwiz：备份或还原储存的用户名和密码<br>15.comexp.msc：打开系统组件服务</p><p>17.dcomcnfg：打开系统组件服务<br>18.Dccw：显示颜色校准<br>19.20.desk.cpl：屏幕分辨率<br>21.dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序<br>22.dialer：电话拨号程序<br>24.dvdplay：DVD播放器<br>25<br>26.eudcedit：造字程序<br>27.<br>28.explorer：打开资源管理器<br>29.<br>30.FXSCOVER：传真封面编辑器<br>31.fsmgmt.msc：共享文件夹管理器<br>32.<br>33.<br>34.inetcpl.cpl：Internet属性<br>35.intl.cpl：区域<br>36.iexpress：木马捆绑工具，系统自带<br>37.joy.cpl：游戏控制器<br>38.logoff：注销命令<br>39.lusrmgr.msc：本地用户和组<br>40.lpksetup：语言包安装/删除向导，安装向导会提示下载语言包<br>41.lusrmgr.msc：本机用户和组<br>42.main.cpl：鼠标属性<br>43.mmsys.cpl：声音<br>44.magnify：放大镜实用程序<br>45.mem.exe：显示内存使用情况(如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt 即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。)<br>46.MdSched:Windows内存诊断程序<br>47.mmc：打开控制台<br>48.mobsync：同步命令<br>49.mplayer2：简易widnows media player<br>50.Msconfig.exe：系统配置实用程序<br>51.msdt：微软支持诊断工具<br>52.msinfo32：系统信息<br>54.Msra：Windows远程协助<br>56.NAPCLCFG.MSC：客户端配置<br>57.ncpa.cpl：网络连接<br>58.narrator：屏幕“讲述人”<br>59.Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项<br>60.netstat : an(TC)命令检查接口<br>61.<br>62.Nslookup：IP地址侦测器<br>63.odbcad32：ODBC数据源管理器<br>64.OptionalFeatures：打开“打开或关闭Windows功能”对话框<br>65.osk：打开屏幕键盘<br>66.perfmon.msc：计算机性能监测器<br>67.perfmon：计算机性能监测器<br>68.PowerShell：提供强大远程处理能力<br>69.printmanagement.msc：打印管理<br>70.powercfg.cpl：电源选项<br>71.psr：问题步骤记录器<br>72.Rasphone：网络连接<br>73.Recdisc：创建系统修复光盘<br>74<br>75.Rstrui：系统还原<br>76.<br>77.regedt32：注册表编辑器<br>78.rsop.msc：组策略结果集<br>79.sdclt：备份状态与配置，就是查看系统是否已备份<br>80.<br>82.sfc /scannow：扫描错误并复原/windows文件保护<br>83.sfc.exe：系统文件检查器<br>84.shrpubw：创建共享文件夹<br>85.sigverif：文件签名验证程序<br>86.slui：Windows激活，查看系统激活信息<br>87.slmgr.vbs -dlv ：显示详细的许可证信息<br>　　slmgr.vbs -dli ：显示许可证信息<br>　　slmgr.vbs -xpr ：当前许可证截止日期<br>　　slmgr.vbs -dti ：显示安装ID 以进行脱机激活<br>　　slmgr.vbs -ipk ：(Product Key)安装产品密钥<br>　　slmgr.vbs -ato ：激活Windows</p><p>CMD命令开启防火墙</p><p><strong>开启防火墙：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">netsh advfirewall set allprofiles state on<br></code></pre></td></tr></tbody></table></figure><p><strong>关闭防火墙：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">netsh advfirewall set allprofiles state off<br></code></pre></td></tr></tbody></table></figure><p><a href="http://umooc.gdgm.cn/meol/common/script/">http://umooc.gdgm.cn/meol/common/script/</a></p><p>?fileid=96639&amp;resid=28903&amp;lid=12410</p><p>VSCode代码截图 f1 polacode</p><p>F12 或 Ctrl + Shift + I 打开开发者工具，在任意tab上按 Ctrl + Shift + P ，在弹出的输入框里输入 full size screenshot （其实不需要输入完整，可以自动补全），然后按回车即可</p><p> <strong>Windows</strong> + <strong>PrintScreen</strong></p><p>开机自动启动的目录</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">shell:<span class="hljs-title">startup</span></span><br></code></pre></td></tr></tbody></table></figure><p>Windows linux:子系统</p><p>在cmd窗口中set设置的环境变量为临时变量，如：</p><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">set</span> PATH=%PATH%;D:\Program Files\<br></code></pre></td></tr></tbody></table></figure><p>使用setx设置为永久环境变量,适用于bat中：</p><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vb">setx PATH <span class="hljs-string">"%PATH%;D:\Program Files\"</span><br></code></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>通过 cmd 命令行进入指定目录后如果想查看该目录下的文件需要输入 dir 命令，很不方便，我们可以在 cmd 下打开文件夹图形界面：</p><p>explorer 目录</p><h3 id="cmd打开应用"><a href="#cmd打开应用" class="headerlink" title="cmd打开应用"></a>cmd打开应用</h3><ul><li>notepad 打开记事本</li><li>mspaint 打开画图</li><li>calc 打开计算机</li><li>write 写字板</li><li>sysdm.cpl 打开环境变量设置窗口</li></ul><p>开机自动启动的目录</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">shell:<span class="hljs-title">startup</span></span><br></code></pre></td></tr></tbody></table></figure><p>在cmd窗口中set设置的环境变量为临时变量，如：</p><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">set</span> PATH=%PATH%;D:\Program Files\<br></code></pre></td></tr></tbody></table></figure><p>使用setx设置为永久环境变量,适用于bat中：</p><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vb">setx PATH <span class="hljs-string">"%PATH%;D:\Program Files\"</span><br></code></pre></td></tr></tbody></table></figure><p>DOS 内部命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>md</code></td><td>建立子目录</td></tr><tr><td><code>cd</code></td><td>改变当前目录(CD命令不能改变当前所在的盘，CD..退回到上一级目录，CD\表示返回到当前盘的目录下，CD无参数时显示当前目录名)</td></tr><tr><td><code>rd</code></td><td>删除子目录命令</td></tr><tr><td><code>dir</code></td><td>显示磁盘目录命令</td></tr><tr><td><code>path</code></td><td>路径设置命令<code>path=路径</code></td></tr><tr><td><code>copy</code> cp</td><td>文件复制命令</td></tr><tr><td><code>type</code></td><td>显示文件内容命令</td></tr><tr><td><code>edit</code></td><td>编辑文件内容命令</td></tr><tr><td><code>ren</code></td><td>文件改名命令</td></tr><tr><td><code>del</code></td><td>删除文件命令</td></tr><tr><td><code>cls</code></td><td>清屏幕命令</td></tr><tr><td><code>ver</code></td><td>查看系统版本号命令</td></tr><tr><td><code>date</code></td><td>设置日期</td></tr><tr><td><code>time</code></td><td>系统时钟设置命令</td></tr><tr><td><code>prompt</code></td><td>更改命令提示符</td></tr><tr><td><code>pwd</code></td><td>查询当前所在的目录位置</td></tr><tr><td>mv</td><td>移动文件</td></tr></tbody></table><p>DOS 外部命令</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>deletree</code></td><td></td></tr><tr><td><code>format</code></td><td>格式化命令</td></tr><tr><td><code>diskcopy</code></td><td>磁盘复制</td></tr><tr><td><code>label</code></td><td></td></tr><tr><td><code>vol</code></td><td></td></tr><tr><td><code>sys</code></td><td></td></tr><tr><td><code>xcopy</code></td><td></td></tr><tr><td><code>fc</code></td><td></td></tr><tr><td><code>attrib</code></td><td></td></tr><tr><td><code>mem</code></td><td>查看你的计算机内存有多少，以及内存的使用情况。</td></tr><tr><td><code>tree</code></td><td></td></tr><tr><td><code>color</code></td><td></td></tr><tr><td><code>fdisk</code></td><td>分区命令</td></tr><tr><td><code>cat</code></td><td>查看文件内容 cat &gt;abc.txt 往abc.txt文件中写上内容。</td></tr></tbody></table><h2 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a>CMD命令</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>cmd</td><td>CMD命令提示符</td></tr><tr><td>calc</td><td>计算器</td></tr><tr><td>notepad</td><td>打开记事本</td></tr><tr><td>mspaint</td><td>画图</td></tr><tr><td>regedit</td><td>注册表</td></tr><tr><td>diskmgmt.msc</td><td>磁盘管理</td></tr><tr><td>control</td><td>控制面板</td></tr><tr><td>dxdiag</td><td>检查DirectX信息</td></tr><tr><td>mstsc</td><td>远程桌面连接</td></tr><tr><td>gpedit.msc</td><td>组策略</td></tr><tr><td>devmgmt.msc\hdwwiz.cpl</td><td>设备管理器</td></tr><tr><td>services.msc</td><td>本地服务设置</td></tr><tr><td>Firewall.cpl</td><td>Windows防火墙</td></tr><tr><td>Resmon</td><td>资源监视器</td></tr><tr><td>certmgr.msc</td><td>证书管理实用程序</td></tr><tr><td>compmgmt.msc</td><td>计算机管理</td></tr><tr><td>eventvwr</td><td>事件查看器</td></tr><tr><td>secpol.msc</td><td>本地安全策略</td></tr></tbody></table><p>netsh wlan show profiles来获取所有用户配置文件</p><p>netsh wlan show profile name=”wifi名称” key=clear来查看我们想要的结果，格式一定不要错误，</p><p>releases</p><p>F12 或 Ctrl + Shift + I 打开开发者工具，在任意tab上按 Ctrl + Shift + P ，在弹出的输入框里输入 full size screenshot  （其实不需要输入完整，可以自动补全），然后按回车即可</p><p>(7条消息)如何在右键新建菜单里添加新建xmind文件_运维_刘凯的博客-CSDN博客: <a href="https://blog.csdn.net/cliukai/article/details/103569241">https://blog.csdn.net/cliukai/article/details/103569241</a></p><p>vscode如何添加鼠标右键打开文件夹</p><p><a href="https://blog.csdn.net/zzsan/article/details/79305952">https://blog.csdn.net/zzsan/article/details/79305952</a></p><p>win10 ubuntu</p><p>C:\Users\Administrator\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs</p><p>我们不生产代码 我们只是代码的搬运工</p><p><a href="https://www.cnblogs.com/baby-zhude/p/11577017.html">阿里巴巴矢量图标库批量下载</a></p><p>F12输入——</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var iconList = document.querySelectorAll('.icon-gouwuche1');<br>for (var i = 0; i &lt; iconList.length; i++) {<br>iconList[i].click();<br>}<br><br><br><br>目前只支持一次最大下载20个,所以:<br><br>var iconList = document.querySelectorAll('.icon-gouwuche1');<br>for (var i = 0; i &lt;20; i++) {<br>iconList[i].click();<br>}<br><br>下一批20个:<br><br>var iconList = document.querySelectorAll('.icon-gouwuche1');<br>for (var i = 20; i &lt; 40; i++) {<br>iconList[i].click();<br>}<br></code></pre></td></tr></tbody></table></figure><p>鼠标右键的快捷键<br>1、右边win键的右边的键；<br>2、Shift+F10。</p><p>C:\Users\Administrator\Desktop&gt;</p><p>windows cmd 查看文件目录树<br>原创Inside_Zhang 最后发布于2017-04-14 11:00:46 阅读数 12683  收藏<br> 原创 3757   粉丝 5009   获赞 1771   评论 675   访问 1083万+<br>展开<br>windows + R ⇒ 输入 cmd ⇒ 进入 windows 命令行界面：</p><p>tree/?：命令提示；<br>tree：不输入任何参数，输出一棵目录树<br>不显示文件，只显示目录；<br>tree/F：递归显示目录结构；<br>显示目录，也显示文件；<br>tree /F，在给出项目文件说明时，会十分有用；</p><ol><li>重定向到文本文件<br>tree /f &gt; info.txt<br>tree &gt; info.txt</li></ol><p>echo.&gt;c:/abc.txt （不完美。含有一个两空行）</p><p>type nul&gt;c:/abc.txt （完美）</p><p>rem.&gt;c:/abc.txt （完美）</p><p>cd.&gt;c:/abc.txt （完美）</p><p>copy nul&gt;c:/abc.txt（不完美，有多余的文字）</p><p>创建文件—————————————————</p><p>第一种方法：<br>echo …… &gt; A.txt 重定向输出，此时创建文本文件A.txt;<br>echo …… &gt;&gt;A.txt 向A.txt文件中追加信息…..;</p><p>第二种方法：<br>copy con A.txt 创建A.txt文本文件;<br>…….^Z 　　　　　 　输入内容….;<br>　　　 按CTRL+Z键，之后再回车；</p><p>第三种方法：<br>edit A.txt 编辑A.txt文本文件，调用command.com中创建文本文件的命令，<br>如果A.txt文件不存在，则创建文件<br>…….. 输入内容，保存。</p><p>第四种方法：</p><p>type nul&gt;filename 可建立一个空文件中，在批处理中经常用。</p><p>copy nul A.txt 可建立一个空文件中，在批处理中经常用，也可清空一个文件。</p><p>mkdir 目录名；</p><p>删除目录：</p><p>rmdir 目录名；</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> if (location.href.indexOf("preview/download_preview.jsp") &gt; 0) {<br>            location.href = location.href.replace("preview/download_preview.jsp", "download.jsp")<br>        }<br><br>location.href = location.href.replace("preview/download_preview.jsp", "download.jsp")<br></code></pre></td></tr></tbody></table></figure><p>虚拟窗口</p><blockquote><p>1 win+ctrl+D 新建虚拟桌面<br>2 win+ctr+F4 关闭当前虚拟桌面<br>3 win+ctrl+方向左键或右键 虚拟桌面之间切换</p></blockquote><p>cmd +r msinfo32.exe ===  系统信息</p><p>cmd +r dxdiag.exe ===  DirectX诊断工具</p><p>netsh wlan show profile<br>netsh wlan export profile folder=C:\ key=clear</p><p>Microsoft DiskPart 版本 10.0.18362.1</p><p>Copyright (C) Microsoft Corporation.<br>在计算机上: CODER</p><p>DISKPART&gt; list disk</p><p>  磁盘 ###  状态           大小     可用     Dyn  Gpt</p><hr><p>  磁盘 0    联机              476 GB   257 MB        *<br>  磁盘 1    联机               57 GB      0 B        *</p><p>DISKPART&gt; select disk 1</p><p>磁盘 1 现在是所选磁盘。</p><p>DISKPART&gt; clean</p><p>DiskPart 成功地清除了磁盘。</p><p>DISKPART&gt;</p><p>Win10使用技巧</p><p> var reg = new RegExp( ‘ ‘ , “g” );</p><p>  var newstr = s.replace( reg , ‘%20’ );</p><p>  return newstr;</p><p>var arr = document.querySelectorAll(‘a’)<br>for(let i = 0;i&lt; arr.length;i++){<br>    arr[i].target=’black’<br> }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)css3</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/css3.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/css3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h1><p>去除默认样式</p><p>外边距合并</p><ul><li>margin 垂直边距 外边距合并<br>嵌套块元素垂直外边距的塌陷</li><li>两个嵌套（父子元素）的块元素 父元素有上外边距同时也有子元素也有上外边距 由父元素会塌陷较大的外边距值<ul><li>父元素定义上边框 border 1px transparent</li><li>父元素定义上内边框 padding 1px</li><li>父元素 overflow:hidden<br>清除</li></ul></li></ul><p>基础</p><ul><li><p>层叠样式表  样式规则 <code>选择器{(属性：值)声明;声明}（样式分隔符）声明块</code></p></li><li><p><code>@import 导入 @media @keyframe @font-face @namescace 告诉css引擎必须考虑的XML命名空间 @charset @page 打印文档时布局变化 @docuemnt 文档样式表 @supports 查询特定css是否支持</code></p></li><li><p>导入 link href <code>&lt;style&gt;</code> style=“” <code>导入式 &lt;style&gt; @import url() &lt;/style&gt;</code></p></li><li><p>优先级 color:red !important 优先级最高 10000 !important 1000 内联  100 ID 10 类\伪类\属性 1 元素（标签）伪元素  0 (* &gt; + ~)</p></li><li><p>简写属性 上右下左 上下 左右</p></li><li><p>颜色单位 rgba hsla(色调[0<del>360],饱和度[100%],亮度[100%]) color #FFFFFF (0</del>f)</p></li><li><p>长度单位 绝对 cm mm px pt pc 相对 % em 相对当前字体大小 rem 相当根的大小 ex ch lh(元素的line-height) vw/vh/vmin/vmax(较大的值) 视口单位</p></li><li><p>calc 计算属性  <code>color:var(--color--) :root{ --color--:red } 自定义变量</code></p><ul><li>无单位的数值 line-height z-index font-weight 特殊值 <code>inherit 默认 initial</code></li></ul></li></ul><p>选择器</p><ul><li><code>基本 5个 * E # .  ,</code>  <code>层次 4个 E F &gt; +相邻 ~通配兄弟</code><ul><li>footer.active</li></ul></li><li><code>属性 7个E[att=val] = |（带前缀） ~(包含val 有空格隔开) * (包含val 字符串) ^（开头） $ E[art$=val]</code></li><li><code>伪元素 :: 5个 letter字/line行 before/after selection 匹配突出显示的文本</code></li><li><code>伪类选择器  :</code><ul><li>动态伪类 链接伪类【link visited】用户伪类【 active hover focus】</li><li>结构伪类<ul><li><code>:root :empty </code></li><li><code>child of-type only * first/last/nth-(last)-child(n)</code></li><li><code>:has :dir :is</code><ul><li>:has()：匹配包含指定元素的元素；<br>:dir()：匹配特定文字书写方向的元素；<br>:is()：匹配指定选择器列表里的元素；</li></ul></li></ul></li><li>状态伪类<code>:checked 选中 :enabled  :disabled 不可用状态</code><ul><li>:current()：浏览中的元素；<br>:past()：已浏览的元素；<br>:future()：未浏览的元素；</li><li>表单<ul><li>:optional：选项可选的表单元素；<br>:required：输入必填的表单元素；<br>:valid：输入合法的表单元素；<br>:invalid：输入非法的表单元素；<br>:in-range：输入范围以内的表单元素；<br>:out-of-range：输入范围以外的表单元素；<br>:read-only：只读的表单元素；<br>:read-write：可读可写的表单元素；<br>:blank：输入为空的表单元素；</li></ul></li></ul></li><li>语言伪类<code>:lang()</code></li><li>目标伪类<code>:target()</code></li><li>否定伪类<code>E:not(F) 匹配不符合一组选择器的元素</code></li></ul></li><li>:is()  ：is/where(不同)相同</li><li>:where()</li><li>:not()</li><li>:has()</li><li>:focus-visible</li><li>:focus-within</li><li>:empty</li><li>:blank</li></ul><p>内容</p><ul><li><p>text</p><ul><li><p>font</p><ul><li>font:font-style 样式 normal 默认值 bold 粗体 bolder 特粗体 lighter 细体 font-weight 粗细 100最细~900最粗 normal\bold\bolder\lighter  /line-height font-family [style /weight / family ]</li><li>font-size-adjust 是否强制对文本使用同一尺寸</li><li>font-stretch 是否横向拉伸变形字体 定义如何拉伸文字</li><li>font-variant 小型大写字体或者正常字体显示文本</li><li>@font-face{   font-family:font名字 src:url(‘’)  font-weight: }</li></ul></li><li><p>等比缩放 aspect-radio:1/1 一般指的是 “容器高度按比例根据宽度改变”，很多时候也称为宽高比或纵宽比</p></li><li><p>min()、max()、clamp()</p></li><li><p>text</p><ul><li>文本距离<ul><li>*-spacing 间距 word-spacing 单词间距  空格间隙 letter-spacing 字符( 字母)间距</li><li>vertiacl-align</li></ul></li><li>text-*<ul><li>text-align 对齐方式  left||right||center||justify</li><li>text-decoration 修饰线  none 默认值 underline 下划线 overline 上划线 line-through 删除线 blink 闪烁线</li><li>text-indent 缩进</li><li>text-transform  大小写(none(默认值) uppercase  大写 lowercase 小写 capitalize 首字大写)</li><li>text-shadwn 阴影text-shadwn:color 颜色 x-offset x轴位移 y-offset y轴位移 blur-radius 模糊距离</li><li>text-overflow 文本溢出 text-overflow:clip | ellipsis text-overflow:clip 文本裁剪</li></ul></li><li>line-height</li><li>direction  文本方向  控制文本流入的方向 ltr</li><li>unicode-bidi</li><li>文本换行<ul><li>line-break 日文换行</li><li>word-wrap 英文换行: break-word normal 默认值 | break-word 内容在边界内换行 不截断英文单词换行</li><li>word-break 亚洲换行： break/keep-all<ul><li>break-all 允许非亚洲语言文本的任意字符断开</li><li>keep-all 表示中文、韩文、日文是不允许字断开的</li><li>word-wrap:break-word overflow:hidden</li></ul></li><li>white-space 空白间距 normal  默认值 | pre 文本空白处会被浏览器扣留（预定义文本格式）  | nowrap 不换行 | pre-line  合并空白符序列，保留换行符 | per-wrap 保留空白符序列，但是正常进行换行 | inherit 继承</li></ul></li><li>vertical-align 使用场景 （前面图标和文字 垂直居中） 经常用于设置图片或者表单（行内块元素）和文字垂直对齐 设置一个元素的垂直对齐方式，只能针对于 行内元素或者 行内块元素 baseline 默认 基线 top middle bottom 同一行的内容 垂直对齐</li><li>writing-mode 文本方向 vertical-rl vertical-lr horizontal-tb  <code>i display:inline-block vertical-align:middle</code></li><li>color 颜色</li><li>overflow :scroll hidden auto 、overflow-x overflow-y</li><li>溢出文字省略号 单行文字 <code>white-space:nowrap overflow:hidden text-overflow:ellpsis</code></li><li>多行文本省略号 兼容性问题 适合webkit 浏览器或移动端 大部分 webkit 内核 <code>display:-webkit-box -webkit-line-clamp：2 -webkit-box-orient:vertical </code></li></ul></li></ul></li><li><p>box</p><ul><li>border border:border-width boder-style （dotted\dashed\solid\double\groove\ridge\insert\outset\inheit）boder-color 、 border-radius:  topLeft topRight bottomRight bottomLeft、 boder-image：source || slice || width || repeat、 box-shadow 阴影 box-shadow：水平 垂直 模糊距离 扩展尺寸 insert(内部阴影 outset默认值 外部阴影) color</li><li>padding \ padding-block\inline</li><li>margin \ margin-block\inline</li><li>margin 负值   使用场景一 ： 多个并列的元素 之间的间距 可以用 padding分隔 再使用 float:right margin:-1px将盒子并列在一排 而且 设置的负边框边框 可以将所有盒子中间的2px 变成1px 解决hover右边框没有 设置 hover position:rea/z-index：正值</li><li>outline</li></ul></li><li><p>list-style type position inside（outside）  image url(‘’)</p></li><li><p>background 8个</p><ul><li><p>background：color(颜色)/ transparent | rgba | image(图片) | repeat(展示方式) repeat | repeat-x | repeat-y | no-repeat | attachment(固定还是滚动) | position（图片位置）  50% 50% center/center left bottom</p></li><li><p>background：image url(‘’) /  position size repeat attachment scroll // fixed clip origin</p></li><li><p>background-repeat repeat no-repeat repeat-x/y</p></li><li><p>background-postion // 背景图片在父盒子中的位置 x y;  // center 50%</p></li><li><p>background-origin 背景原点 padding-box | border-box | content-box |||  background-clip 背景裁剪 border-box | padding-box | content-box  |||  background-size 背景大小 auto （默认值） | length | perentage | cover (填充) | contain（保持宽高比例缩放）</p><ul><li><p>box-shadow: 水平阴影的位置 垂直阴影的位置 模糊距离 阴影的大小 阴影的颜色 阴影开始方向（默认是从里往外，设置inset就是从外往里）;   </p><p>background-clip: border-box content-box padding-box</p><p>background-origin  border-box (背景从边框开始) content-box（背景从内容开始） padding-box（背景从padding开始）</p><p>-webkit-box-reflect:方向[ above-上 | below-下 | right-右 | left-左 ]，偏移量，遮罩图片</p><p>也可以说是倒影</p></li></ul></li></ul></li><li><p>color  rgba hsla 256种 opacity: alphavalue || inherit ( 1不透明 0 完全透明) 透明度 background-color: transparent</p></li><li><p>gradient</p><ul><li><p>线性渐变 linear-gradient  linear-gradient(direction,color-stop1,color-stop2)</p><ul><li>linear-gradient(to bottom right,red ,blue)</li><li>linear-gradient(right,red,blue)</li></ul></li><li><p>径向渐变 radial-gradient</p><ul><li><code>background-color:radial-gradient([[&lt;shape&gt; || &lt;size&gt;] [at &lt;position&gt;] ?, | at &lt;position&gt;,  ? color-stop ] [color-stop] +) </code><ul><li>shape circle ellipse</li><li>size<ul><li>farthest-side<br>closest-side<br>closest-corner<br>farthest-side</li></ul></li></ul></li></ul></li><li><p>角向渐变 conic-gradient</p></li><li><p>重复渐变repeating-gradient</p><ul><li>repeating-linear-gradient</li><li>repeating-radial-gradient</li></ul></li></ul></li><li><p>filter</p><ul><li>blur(10px) 模糊 brightness(0%<del>100%) 亮度 contrast(0%</del>100%) 对比 drop-shadow() 阴影</li><li>grayscale(0%<del>100%) 灰度 hue-router(0deg</del>360deg) 色调反转 invert(0%<del>100%) 倒置  opacity(0%</del>100%) 不透明度 saturate(0%<del>100%) 饱和度 sepia(0%</del>100%) 棕褐色 复合函数 应用svg滤镜</li></ul></li></ul><p>触摸屏当中为一些元素设置内滚动，那么你不仅需要<code>overflow: scroll / auto</code>，还需要<code>-webkit-overflow-scrolling: touch;</code> 实际上，移动端浏览器在某些时候并不能正确执行<code>overflow: scroll / auto</code>，它可能会滚动整个页面而不是你想要的那部分。<code>-webkit-overflow-scrolling</code>解决了这个问题</p><ul><li>::selection</li><li>cursor:url()</li><li>attr() 展示tooltip</li><li>选择器:-webkit-input-placeholder{</li><li>:not() 除了</li><li>隐藏滚动条<code>.box-hide-scrollbar::-webkit-scrollbar { display:none }</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">单行<br><span class="hljs-attr">overflow</span>: hidden;<br>  white-<span class="hljs-attr">space</span>: nowrap;<br>  text-<span class="hljs-attr">overflow</span>: ellipsis;<br>  max-<span class="hljs-attr">width</span>: 375px;<br> 多行 <br><span class="hljs-attr">overflow</span>: hidden;<br>  text-<span class="hljs-attr">overflow</span>: ellipsis;<br>  <span class="hljs-attr">display</span>: -webkit-box;<br>  <span class="hljs-comment">/* set n lines, including 1 */</span><br>  -webkit-line-<span class="hljs-attr">clamp</span>: <span class="hljs-number">2</span>;<br>  -webkit-box-<span class="hljs-attr">orient</span>: vertical;  <br></code></pre></td></tr></tbody></table></figure><p>object fit 解决img图片尺寸的问题 </p><p>cover contain fill scale-down 直接作用在img标签上 要指定img标签的宽高</p><p>currentColor 侦测当前的颜色，以避免经常地重复定义它</p><ul><li>获取的是当前元素的颜色</li></ul><p>filter: invert() — 是从0到1的刻度，1是从白变黑。 filter: hue-rotate() — 用于改变你元素的颜色，同时或多或少保持原本相同的色系。这个属性的值可以从0deg到360deg。</p><p><code>Darkmode.js</code>运用的也是css里面的一个特性叫<code>mix-blend-mode</code> — “CSS 属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合“。加上Javascript的辅助判断哪些页面上的元素需要黑化的，哪些是不需要黑化的。就会想我们之前那种做法，导致其他不需要黑化的元素，比如图片，受到影响导致颜色出现问题。</p><p>filter: invert() — 可以把页面从白变黑，也可以从黑变白。<br>filter: hue-rotate() — 用于改变你元素的颜色，同时或多或少保持原本相同的色系。<br>Darkmode.js — 瞬间实现黑暗模式。</p><p>新增</p><ul><li>clip clip 剪辑一个绝对定位的元素 shape auto inherit</li><li>cursor 光标</li><li>border-collapse:collapse  设置表格的边框是否折叠成一个单一的边框隔开</li><li>mask 弹幕不会挡住视频中的人物，用的也是这个css属性 遮罩</li><li>-webkit-box-reflect:方向[ above-上 | below-下 | right-右 | left-左 ]，偏移量，遮罩图片</li><li>object-fit 替换元素可以以某种方式被调整到合以盒子的大小</li><li>attr() 访问元素属性的值 <code>&lt;div data-bg="black"&gt;  background:attr(data-bg)</code></li><li>calc() 计算属性 calc(，默认知)</li><li>var(–text)  –text</li><li>max() min() 使用css属性的最大值或者最小值</li><li>cursor default pointer 小手 move 移动 text 文本 not-allowed 禁止</li></ul><p>浮动</p><ul><li>float right</li></ul><p>动画</p><ul><li><p>transform 变形</p><ul><li>transform 变形<ul><li>transform:translateX/Y/3d() 移动</li><li>scaleX/Y/3d() 缩放</li><li>rotateX/Y/3d() 旋转</li><li>skewX()/shewY() 倾斜</li><li>matrix/3d() 2d矩阵<code> 3*3矩阵 // 3d矩阵 4*4矩阵</code></li></ul></li><li>transform-style 嵌套元素如何在3D空间中显示 flat 2D平台 preserve-3d 3D平台 3D呈现</li><li>transform-origin：x y; 变形原点 指定元素的中心位置（默认中点） 设置变形的中心点 比如 旋转、倾斜等等<ul><li>transform-origin： x-offset（x轴偏移量）  y-offset  z-offset length\percentage<ul><li>x/y/z-offset-keyword top\bottom\right\left\center</li></ul></li></ul></li><li>perspective 父元素设置 透视效果 3D转换元素的透视视图 （人眼距离屏幕的视距）视距，用来设置用户和元素3D空间Z平面之间的距离 值越大，越近，视觉效果越深刻，反之</li><li>perspective-origin</li><li>background-visibility 元素旋转背面是否可见 visible 反面可见 hidden 反面不可见</li></ul></li><li><p>transtion 过渡</p><ul><li>触发过渡 伪元素、媒体查询、js 触发</li><li>transition:property 属性 duration 时间 timing-fucntion [ease/ease-in/ease-in-out/ease-out]  三次贝塞尔函数 cubic-bezier(P0,P1,P2,P3) delay 延迟时间</li><li>transition:5s ease 0.3s;</li></ul></li><li><p>animation 动画</p><ul><li><p><code>@keyframes 动画名{} 关键帧 </code> 选择器外</p><ul><li>@keyframes 动画名{ from{}  to{ }}</li><li>@keyframes 动画名{  0%{}  50%{} 100%{} }</li></ul></li><li><p><code>animation 调用关键帧</code></p><ul><li><p>animation:[name 动画名 [duration 时间 [timing-function（ease/ease-in/ease-in-out/ease-out/linear/cubic-bezier） [delay 延时播放时间 [iteration-count 播放次数（1 、infinite）[direction（normal 向前播放// alternate偶数向前播放，奇数向反方向播放 ） [play-state 播放状态 (running（默认值）paused) [fill-mode 外属性 none forwards backwards both</p></li><li><p>animation: 动画名 2s ease-in-out 0.2s infinte normal running both;</p></li><li><p>transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)</p><p>animation：动画名称，一个周期花费时间，运动曲线（默认ease），动画延迟（默认0），播放次数（默认1），是否反向播放动画（默认normal），是否暂停动画（默认running）</p><p>animation-fill-mode : none | forwards | backwards | both;<br>/*none：不改变默认行为。<br>forwards ：当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br>backwards：在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br>both：向前和向后填充模式都被应用。  */</p></li></ul></li></ul></li></ul><p>布局 float position flex grid</p><ul><li><p>div 块 span 行内</p></li><li><p>table th tr td 表格</p></li><li><p>list 列表 ul li  ol li dl dt dd</p></li><li><p>弹性布局（浮动+百分比 、flex） 固定布局 响应式布局（媒体查询和媒体特征） 自适应布局</p></li><li><p>Box 盒模型</p><ul><li>标准流 文档流</li><li>display 控制布局的属性（元素分类） 外在盒子决定了元素要像内联元素一样并排在一排显示，内在盒子则决定了元素可以设置宽高、垂直方向的margin等属性<ul><li>对内显示 none 隐藏不占空间 visibility: hidden; 占据空间 (inline-)flex grid table<ul><li>visibility 指定一个元素是可见还是隐藏  visibility：visble 可视 hidden 元素隐藏 继续保留位置</li><li>display：none 不保留位置</li></ul></li><li>对外显示<ul><li>inline 内联  无法设置高宽度  竖直方向上的 padding 和 margin 将不会生效  span、a、em、i、 e、b、img</li><li>block 块级 独占一行  width默认100% p、div、h1~h6、ul、li、ol、dl、dt、dd、table</li><li>inline-block 行内块 input img select、textarea 是行内块元素，不单独占满一行，可以看成是能够在一行里进行左右排列的块元素； 当元素分布在一行充满时，会自动换行</li><li>list-item 像块类型元素一样显示，并添加样式列表标记</li><li>table</li></ul></li></ul></li><li>盒模型<ul><li>box-sizing 盒模型<ul><li>content-box 向外 w3c盒模型（默认值）  实际宽度/高度 = height/width(content的宽度和高度) + border + padding</li><li>border-box 向内 IE盒模型 height/width = border + padding + content的宽度和高度</li></ul></li><li>外（在）盒子 width height line-height max-width/min-width</li><li>内在盒子 border padding margin outline content</li><li>padding-block(inline) / margin-block(inline)</li></ul></li><li>内容溢出属性 overflow<ul><li>overflow overflow-x overflow-y</li><li>overflow-x:visible 默认值 | hidden 内容溢出容器时，内容隐藏，不显示滚动条  | scroll 不管内容有没有溢出 都有滚动条 | auto  |no-display 内容溢出容器时不显示元素，相当于元素添加display:none | no-content 内容溢出是不显示内容 相当于 visibility:hidden</li><li>overflow-y:visible | hidden | scroll | auto | no-display | no-content</li></ul></li><li>自由缩放属性 resize<ul><li>resize:none 不能拖动元素修改尺寸 | both 可以拖动元素修改尺寸，同时修改高度和宽度  | horizontal 只能修改宽度 | vertical  只能修改高度 | inherit 继承</li></ul></li><li>上下文 BFC/IFC/FFC/GFC/VFC<ul><li>BFC (Block Formatting Context) 块级格式化上下文；<ul><li>它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干</li><li>BFC规则<ul><li>margin重叠</li></ul></li><li>创建BFC  ：html根元素、position absolute fixed  、float不为none、overflow 不为 visible、定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid</li></ul></li><li>IFC (Inline Formatting Context) 行内格式化上下文；</li><li>FFC (Flex Formatting Context) 弹性格式化上下文；</li><li>GFC (Grid Formatting Context) 格栅格式化上下文；</li><li>VFC(Formatting Context) 视觉格式化模型<ul><li>用来处理和在视觉媒体上显示文档时的计算规则</li><li>视觉格式化模型简单来理解就是规定这些盒子应该怎么样放置到页面中去，这个模型在计算的时候会依赖到很多的因素</li></ul></li></ul></li></ul></li><li><p>position 定位</p><ul><li>static 默认值 absoulte 绝对 relative 相对 fixed 固定 sticky (相对和固定混合 必须要带top\bottom\left\right中的一个才生效 兼容性差 使用少 浏览器可视化区域)  (屏幕范围（没影响）超出范围 变成fixed)  z-index 层叠</li><li>位置 top\bottom\left\right\center%</li></ul></li><li><h2 id="float-浮动-浮动能将一个元素（通常是一张图片）拉到其内容的一侧，这样文档流就能包围它-文字围绕图片网页（浮动元素）的效果-水平排成一行"><a href="#float-浮动-浮动能将一个元素（通常是一张图片）拉到其内容的一侧，这样文档流就能包围它-文字围绕图片网页（浮动元素）的效果-水平排成一行" class="headerlink" title="float 浮动  浮动能将一个元素（通常是一张图片）拉到其内容的一侧，这样文档流就能包围它 文字围绕图片网页（浮动元素）的效果  水平排成一行"></a>float 浮动  浮动能将一个元素（通常是一张图片）拉到其内容的一侧，这样文档流就能包围它 文字围绕图片网页（浮动元素）的效果  水平排成一行</h2><ul><li>float none left right<ul><li>特性 包裹性（元素width会像height一样由子元素决定，而不是默认撑满父元素）  没有任何margin合并  脱离文档流</li><li>副作用 父级没有高度 子盒子浮动 影响下面布局<br>解决塌陷的问题：手动给 父元素添加高度  clear清除内部和外部浮动 ::before伪类清除  给父元素添加<br>overflow属性(auto)并结合zoom:1使用</li></ul></li><li>clear none left right both</li><li>清除浮动<ul><li>伪元素 clearfix  应该是给浮动元素的父元素添加 clearfix<ul><li>.clearfix{ overflow:auto zoom:1 } .clearfix:after{ content:’’ height:0 display:block clear:both }</li><li><code>.clearfix{ zoom:1 } .clearfix:after{ content:’’ height:0 display:block clear:both,visibility:hidden }</code> // IE6,7</li><li>双伪元素清除浮动  <code>.clearfix:before,clearfix:after{ content：''，display:table } .clearfix:after{ clear:both } .clearfix{ *zoom:1 } </code></li><li>.clearfix::before,.clearfix:after{  display:table; content:”空格”}  防止伪元素的外边距折叠   .clearfix::after{ clear:both }  清除浮动</li></ul></li><li>overflow 清除浮动  父元素 overflow auto/hidden/scroll 子元素 clear :both 缺点 无法显示溢出的部分</li><li>clear 清除浮动 clear:both/left/right</li><li>解决浮动元素高度不一致，会向一边靠 :nth-child(odd){ clear:left}<ul><li>浮动元素会尽可能的往上靠 清除每行的第一个元素上面的浮动  也就是清除同一排的最左侧的第一个元素的浮动</li></ul></li></ul></li></ul></li><li><p>flexbox 伸缩</p><ul><li>flex-flow:flex-direction | flex-wrap justify-content 头中尾 两端分散  align-items 头中尾 基线 align-content 头中尾 两端分散</li><li>order、flex:grow shrink basis、align-self：头尾中 基线</li><li>概念<ul><li>display:flex inline-flex  display:flex(块伸缩容器)|inline-flex(行内伸缩容器)</li><li>两轴：主轴和侧轴</li><li>两容器：容器和项目</li></ul></li><li>容器  父元素 flex container  flex-flow:flex-direction | flex-wrap justify-content align-items align-content<ul><li>flex-flow:flex-direction | flex-wrap 默认值为row nowrap<ul><li>flex-direction: row | row-reverse | column | column-reverse; 定义了伸缩项目放置在伸缩容器的方向</li><li>flex-wrap: nowrap | wrap | wrap-reverse; 伸缩容器里是单行还是多行显示</li></ul></li><li>对齐 justify-content align-items align-content 多根轴线的对齐方式<ul><li>justify-content 主轴上的对齐方式  justify-content: flex-start | flex-end | center | space-between (平均分布) | space-around;（平均分布，两端保留一半的空间） 头中尾 两端分散</li><li>align-items 交叉轴上如何对齐  align-items: flex-start | flex-end | center | baseline | stretch; 头中尾 基线</li><li>align-content 多根轴线的对齐方式  align-content: flex-start | flex-end | center | space-between | space-around | stretch;，</li></ul></li></ul></li><li>项目  子元素 flex-item  ： order、flex:grow shrink basis、align-self：头尾中 基线<ul><li>order:<code>&lt;number&gt;</code>  定义项目的排列顺序。数值越小，排列越靠前，默认为0。 需要每一个都要设置 显示顺序</li><li>flex: grow shrink basis  放大 缩小 分配 默认值是0（grow），1（shrink）和 auto（basis）。<ul><li>flex: 0 1 auto 默认值</li><li>flex: 1; flex:1 1 0%  flex:3 —&gt; flex:3 1 0%;</li><li>flex: none | [ &lt;’flex-grow’&gt; 放大比例  &lt;’flex-shrink’&gt; 缩小比例 ? || &lt;’flex-basis’&gt;  分配多余空间 ]<ul><li>flex-grow 放大比例</li><li>flex-shrink 项目的缩小比例</li><li>flex-basis 理解为设置宽度 分配多余空间</li></ul></li></ul></li><li>align-self 头尾中 基线 align-self: flex-start | flex-end | center | baseline | auto | stretch; 单个子元素对齐方式</li></ul></li></ul></li><li><p>grid 网格  container: grid(template auto) gap place-items/content item: grid-area place-self</p><ul><li><p>row column cell container / item 、grid line 网格线 (n行有n + 1根水平网格线，m列有m + 1根垂直网格线)、网格轨道 grid-track、网格区域 area 网格线是从1开始的   坐标原点从（1,1）开始  1,1 ~ n+1,n+1   两个行线 和 两个列线确定一个 网格区域 坐标  </p></li><li><p>容器 container  <code>grid{ grid-template内(rows,columns,areas[搭配grid-area]) grid-auto(rows,columns,flow)} row(column)-gap/gap 间距 place-items(start | end | center | stretch;)/content(start | end | center | stretch | space-around | space-between | space-evenly;)</code></p><ul><li><p>fr  容器内剩余空间的分数比</p></li><li><p>max-content和min-content就是相对于元素自身内容块进行计算的属性值</p><ul><li>min-content顾名思义是根据元素内容来设置的最小宽度大小</li></ul></li><li><p><code>fit-content</code>，它实际上是<code>min(maximum size, max(minimum size, argument))</code>的简写，表示将元素宽度收缩到内容宽度，使用这个函数后会尽量不占用多余的空间。如果内容的宽度小于<code>fit-content</code>中设置的长度，那么实际子元素宽度是内容宽度。如果内容宽度超出了<code>fit-content</code>中设置的长度，那么实际子元素宽度就是设置的那个长度</p></li><li><p>fit-content(200px) 指定固定的宽度 不占用多余空间</p><p>auto-fit 有空余空间 平均分配给所有的子元素 </p><p>auto-fill 自动创建空白的列</p></li><li><p>place-item  所有单元格的对齐方式</p><p>place-content  整个项目容器的对齐方式</p><p>place-self 某个单元格里面的对齐方式</p></li><li><p>display:grid | inline-grid</p></li><li><p>grid 行列布局内外 属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。</p><ul><li><p>grid-template 行列内 列宽 行高 grid-template-rows、grid-template-columns、grid-template-areas</p><ul><li><p>grid-template rows/columns 行 列</p><ul><li>repeat(次数,值) 重复 repeat(3,100px 200px 300px)</li><li>auto-fit 自动填充<ul><li>repeat + auto-fit——固定列宽，改变列数量</li></ul></li><li>fr 片段</li><li>minmax(最小值,最大值) 范围 1fr 2fr minmax(100px,3fr)<ul><li>repeat(auto-fit, minmax(200px, 1fr)) 去掉右侧空白</li></ul></li><li>auto 浏览器自己决定长度</li><li>fit-content(40%) 指最大宽度不超过屏宽40%<ul><li>repeat+auto-fit+minmax-span-dense 解决空缺问题 grid-auto-flow: row dense;</li></ul></li><li>设置网格线 [linename] 100px [linename2 linename3]<ul><li><code>grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];   grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];</code></li></ul></li></ul></li><li><p>grid-template-areas 定义区域名 area 由单个或多个单元格组成 + grid-area使用</p><ul><li>. 表示不需要</li><li>区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。<code>header-start header-end</code><ul><li>grid-template-areas 定义</li><li>类名：{ grid-area: h; } 使用</li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">grid-template-areas: "header header header"<br>                     "main main sidebar"<br>                     "footer . footer";<br> grid-template-areas:<br>        "h h h h h h h h h h h h"<br>        "m m c c c c c c c c c c"<br>        "f f f f f f f f f f f f";                   .header {<br>     grid-area: h;<br>}<br>.menu {<br>    grid-area: m;<br>}<br>.content {<br>    grid-area: c;<br>}<br>.footer {<br>   grid-area: f;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>grid-auto 行列外 grid-auto-rows、grid-auto-columns、grid-auto-flow</p><ul><li>grid-auto-flow  方向 网格容器放置的顺序  放置顺序是”先行后列”<ul><li>column(dense) row(dense) 当我们在网格定义的区域外放置子元素时，或因子元素数量过多而需要更多的网格线时，布局算法就会自动生成隐式网格。默认情况下这些隐式网格的大小也会随着内容尺寸不同而变化，而我们可以利用属性<code>grid-auto-rows</code>和<code>grid-auto-columns</code>来控制隐式网格的大小</li></ul></li><li>grid-auto-columns | grid-auto-rows 超出显示网格的行列  作用是网格单元格不够的时候创建隐式的网格放置grid-item。自动创建的多余网格的列宽和行高。也就是原本放置在网格中的元素，指定在网格以外的区域<ul><li>隐式和显式网格：显式网格包含了你在 grid-template-columns 和 grid-template-rows 属性中定义的行和列。如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列</li></ul></li></ul></li></ul></li><li><p>grid-gap 间距(旧删除了)  =&gt; gap: row-gap column-gap 行间距 列间距</p></li><li><p>对齐方式</p></li><li><p>place-items: justify-items  align-items  容器单元格 也就是所有单元格 container里面的item （项目）网格内单元的对齐方式</p><ul><li><code>place-items 每个itme: &lt;align-items&gt; &lt;justify-items&gt;;</code> 设置单元格的水平和垂直位置  start | end | center | stretch<ul><li><code>justify-items: start | end | center | stretch;</code> 水平位置</li><li><code>align-items: start | end | center | stretch; </code> 垂直位置</li></ul></li></ul></li><li><p>place-content:justify-content align-content  容器整个内容区域  整个container（容器）的位置  start | end | center | stretch | space-around | space-between | space-evenly;</p><ul><li><code>place-content 整个container: &lt;align-content&gt; &lt;justify-content&gt;</code><ul><li><code>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</code> （左中右）</li><li><code>  align-content: start | end | center | stretch | space-around | space-between | space-evenly;</code>（上中下）<ul><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</li><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔</li><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</li></ul></li></ul></li></ul></li></ul></li><li><p>项目 item <code>grid-area: (grid-column、grid-row)、place-self: &lt;align-self&gt; &lt;justify-self&gt;; 2个</code></p><ul><li>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线</li><li><code>grid-column、grid-row 网格线</code> 项目单元格放置位置 定位 调整子元素的大小作用在子元素上 将其子元素放入这个 grid(网格) 中 通过确定四条边位于网格线的区域 网格线  grid-column 3/4 左网格线<ul><li>grid-column 设置左右边框 : grid-column-start  左边框所在的垂直网格线 grid-column-end  右边框所在的垂直网格线<ul><li>数字、span：grid-column: 1 / 3; 1 / span2;</li><li>网格线的名字搭配 grid-template-area：grid-column-start: header-start;</li></ul></li><li>grid-row 设置上下边框 : grid-row-start 上边框 grid-row-end 下边框<ul><li>网格线的名字：grid-row-start: header-start;</li></ul></li></ul></li><li><code>grid-area</code> grid-area：grid-row grid-column 属性还可用作 顺序 grid-row-start、grid-column-start、grid-row-end、grid-column-end 指定项目放在哪一个区域 指定项目位置<ul><li>grid-row: 1 / 3 grid-column 2 / 5 ==  grid-area: 1/2/3/5;</li></ul></li><li><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;; </code>项目单元格内容 也就是单一单元格<ul><li>justify-self: start | end | center | stretch;</li><li>align-self: start | end | center |  stretch;</li></ul></li></ul></li></ul></li><li><p>columns 多列 作用：创建多个列对文本进行布局 就像报纸一样 colums \ column: grap rules span fill</p><ul><li>column：grap 列间距 rules 列边距 span 子元素跨列效果 fill 列高效果</li><li>列数 grap 列间距 rules 列边距<br>span 子元素跨列效果 fill 列高效果</li><li>columns属性：columns-width 列宽度 columns-count</li><li><code>columns: &lt;column-width&gt; | &lt;column-count&gt;   列宽 和 列数 </code></li><li>column<ul><li><code>coloumn-rule &lt;column-rule-width&gt; | &lt;column-rule-style&gt; | &lt;column-rule-color&gt;</code></li><li>column-gap 列间距</li><li>column-span 设置标题 column-span:none | all</li><li>column-fill  每列的列高效果 如何填充列 auto 默认值 随内容变化自动变化| balance 各列的高度将会根据内容最多的一列的高度进行统一</li><li>定义分隔符出现位置（分列符）<ul><li>break-after break-before break-insert</li><li>page-break-after page-break-before page-break-after</li></ul></li></ul></li></ul></li></ul><p>单列布局</p><ul><li>header,content和footer等宽的单列布局</li><li>header与footer等宽,content略窄的单列布局</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">// <span class="hljs-number">1</span> <span class="hljs-selector-tag">header</span>,<span class="hljs-attribute">content</span>和<span class="hljs-selector-tag">footer</span>等宽的单列布局<br><span class="hljs-selector-tag">header</span> <span class="hljs-attribute">content</span> <span class="hljs-selector-tag">footer</span> <br>// <span class="hljs-selector-tag">html</span> <br><span class="hljs-selector-tag">header</span> + <span class="hljs-attribute">content</span> + <span class="hljs-selector-tag">footer</span><br>// css<br><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span><br>max-width:<span class="hljs-number">960px</span><br>margin:<span class="hljs-number">0px</span> auto<br><br>// header与footer等宽,content略窄的单列布局<br>// header、footer的内容宽度不设置，块级元素充满整个屏幕，但header、content和footer的内容区设置同一个width，并通过margin:auto实现居中。<br>&lt;div class=<span class="hljs-string">"header"</span>&gt;<br>    &lt;div class=<span class="hljs-string">"nav"</span>&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=<span class="hljs-string">"content"</span>&gt;&lt;/div&gt;<br>&lt;div class=<span class="hljs-string">"footer"</span>&gt;&lt;/div&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>两列布局</p><ul><li>float:left and right</li><li>position </li><li>浮动+普通元素的margin</li></ul><p>两列自适应布局</p><ul><li><strong>两列自适应布局是指一列由内容撑开，另一列撑满剩余宽度的布局方式</strong><ul><li>float(子)+overflow:hidden（子）:主要通过overflow触发BFC,而BFC不会重叠浮动元素。由于设置overflow:hidden并不会触发IE6-浏览器的haslayout属性，所以需要设置zoom:1来兼容IE6-浏览器。</li><li>flex 布局</li></ul></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> {<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  zoom: <span class="hljs-number">1</span>;<br>}<br><span class="hljs-selector-class">.left</span> {<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>}<br><span class="hljs-selector-class">.right</span> {<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  zoom: <span class="hljs-number">1</span>;<br>}<br><br>//<span class="hljs-selector-tag">html</span>部分同上<br><span class="hljs-selector-class">.parent</span> {<br>  <span class="hljs-attribute">display</span>:flex;<br>}  <br><span class="hljs-selector-class">.right</span> {<br>  <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>; <br>  <span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<br>}<br><br>//<span class="hljs-selector-tag">html</span>部分同上<br><span class="hljs-selector-class">.parent</span> {<br>  <span class="hljs-attribute">display</span>:grid;<br>  <span class="hljs-attribute">grid-template-columns</span>:auto <span class="hljs-number">1</span>fr;<br>  <span class="hljs-attribute">grid-gap</span>:<span class="hljs-number">20px</span><br>} <br></code></pre></td></tr></tbody></table></figure><p>三栏布局</p><p>两端自适应，中间定宽</p><p><strong>中间列自适应宽度，旁边两侧固定宽度</strong></p><ul><li>圣杯布局：<strong>比较特殊的三栏布局，同样也是两边固定宽度，中间自适应，唯一区别是dom结构必须是先写中间列部分，这样实现中间列可以优先加载</strong>。<ul><li>center部分的最小宽度不能小于left部分的宽度，否则会left部分掉到下一行</li><li>如果其中一列内容高度拉长(如下图)，其他两列的背景并不会自动填充。(借助等高布局正padding+负margin可解决，下文会介绍)</li></ul></li><li>双飞翼布局：<strong>同样也是三栏布局，在圣杯布局基础上进一步优化，解决了圣杯布局错乱问题，实现了内容与布局的分离。而且任何一栏都可以是最高栏，不会出问题</strong>。</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs css">// 圣杯布局<br>  &lt;<span class="hljs-selector-tag">article</span> class="container"&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class="center"&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class="<span class="hljs-attribute">left</span>"&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class="<span class="hljs-attribute">right</span>"&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">article</span>&gt;<br>  <span class="hljs-selector-class">.container</span> {<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">220px</span>;//为左右栏腾出空间<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">220px</span>;<br>  }<br>// <span class="hljs-attribute">float</span> <span class="hljs-number">3</span>个 中间<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span> 自适应  margin-left 和 position: relative 移动位置<br>  .left {<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">220px</span>;<br>  }<br>  <span class="hljs-selector-class">.center</span> {<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">background</span>: yellow;<br>  }<br>  <span class="hljs-selector-class">.right</span> {<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">right</span>: -<span class="hljs-number">220px</span>;<br>  }<br>三个部分都设定为左浮动，否则左右两边内容上不去，就不可能与中间列同一行。然后设置center的宽度为<span class="hljs-number">100%</span>(实现中间列内容自适应)，此时，<span class="hljs-attribute">left</span>和<span class="hljs-attribute">right</span>部分会跳到下一行<br>通过设置<span class="hljs-attribute">margin-left</span>为负值让<span class="hljs-attribute">left</span>和<span class="hljs-attribute">right</span>部分回到与center部分同一行<br>通过设置父容器的<span class="hljs-attribute">padding-left</span>和<span class="hljs-attribute">padding-right</span>，让左右两边留出间隙。<br>通过设置相对定位，让<span class="hljs-attribute">left</span>和<span class="hljs-attribute">right</span>部分移动到两边。<br><br><br>// 双飞翼布局<br>&lt;<span class="hljs-selector-tag">article</span> class="container"&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="center"&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="inner"&gt;双飞翼布局&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="<span class="hljs-attribute">left</span>"&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="<span class="hljs-attribute">right</span>"&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">article</span>&gt;<br><br>    <span class="hljs-selector-class">.container</span> {<br>        <span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>;//确保中间内容可以显示出来，两倍<span class="hljs-attribute">left</span>宽+<span class="hljs-attribute">right</span>宽<br>    }<br>    <span class="hljs-selector-class">.left</span> {<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>        <span class="hljs-attribute">background</span>: red;<br>        <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>    }<br>    <span class="hljs-selector-class">.center</span> {<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>        <span class="hljs-attribute">background</span>: yellow;<br>    }<br>    <span class="hljs-selector-class">.center</span> <span class="hljs-selector-class">.inner</span> {<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>; //新增部分<br>    }<br>    <span class="hljs-selector-class">.right</span> {<br>        <span class="hljs-attribute">float</span>: left;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>        <span class="hljs-attribute">background</span>: blue;<br>        <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>    }<br>三个部分都设定为左浮动，然后设置center的宽度为<span class="hljs-number">100%</span>，此时，<span class="hljs-attribute">left</span>和<span class="hljs-attribute">right</span>部分会跳到下一行；<br>通过设置<span class="hljs-attribute">margin-left</span>为负值让<span class="hljs-attribute">left</span>和<span class="hljs-attribute">right</span>部分回到与center部分同一行；<br>center部分增加一个内层<span class="hljs-selector-tag">div</span>，并设<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>；<br><br>多加一层 dom 树节点，增加渲染树生成的计算量。<br><br></code></pre></td></tr></tbody></table></figure><p>等高布局</p><p>等高布局是指子元素在父元素中高度相等的布局方式</p><p>利用正padding+负margin</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.container {<br>padding-left: 220px;<br>padding-right: 220px;<br>overflow: hidden; //把溢出背景切掉<br>}<br>.center,<br>.left,<br>.right {<br>padding-bottom: 10000px;<br>margin-bottom: -10000px;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>绘制三角形</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-selector-id">#one</span> {<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>     <span class="hljs-attribute">border-top</span>: <span class="hljs-number">100px</span> solid transparent;<br>     <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid transparent;<br>     <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid transparent;<br>     <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid black;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>选择器</p><ul><li>css 权重 和 超越<code>!important</code><ul><li>内联 &gt; (#) ID &gt;  类、伪类、属性选择 &gt;  标签、伪元素选择器 &gt; 通用选择器（*）、子选择器（&gt;）、相邻选择器（+）、同胞选择器（~）</li><li>!important &gt; style &gt; # &gt; . &gt; tag </li><li><code> background-color: orange !important;</code><ul><li>权重如何都取有<code>!important</code>的属性值。但是宽高有例外情况，由于宽高会被<code>max-width</code>/<code>min-width</code>覆盖，所以<code>!important</code>会失效。</li></ul></li></ul></li></ul></li><li><p>盒子</p><ul><li>margin外边距<ul><li><code>margin</code>属性并不会参与盒子宽度的计算，但通过设置<code>margin</code>为负值，却能改变元素水平方向的尺寸：</li></ul></li><li>border 边框<ul><li><code>border-style</code>属性的值有<code>none/solid/dashed/dotted/double</code></li></ul></li><li>padding  内边距</li><li>content 内容</li><li>盒子大小 <ul><li>w3c 盒模型(显示的大小) =  content(width/height) + padding + border <ul><li>元素的宽度计算为<code>content</code>的宽度。 <ul><li>width = content width</li></ul></li></ul></li><li>ie 盒模型(显示的大小) = width(height)<ul><li>元素的宽度计算为<code>border+padding+content</code>的宽度总和。<ul><li>width = border + padding +content</li></ul></li></ul></li></ul></li></ul></li><li><p>盒模式 box-sizing 规定容器元素的最终尺寸计算方式</p><ul><li><p><code>box-sizing: content-box|border-box|inherit:</code></p></li><li><p>box-sizing</p><ul><li>content-box 内容盒子 设置 width/height 设置的是content的宽高<ul><li>实际宽度和高度 = width[内容的宽度 content ] +  (padding + border) * 2</li></ul></li><li>border-box 边框盒子 设置 width/height  设置的是实际显示的宽高，content= width - padding <ul><li>实际宽度或高度 = width/height</li></ul></li></ul></li><li><p>内容的宽度或高度(content) vs 显示的宽度或高度(width hegiht)</p></li><li><p>content-box（向外膨胀，破坏DOM结构） (w3c标准盒模型)  默认值，设置 border、padding 会增加元素 width与 height 的尺寸，即 border 与 padding 相当于是元素的“殖民地”，元素的“土地”、尺寸会增加，为向外延伸。</p><ul><li>属性width,height只包含内容content，不包含border和padding。</li><li>实际显示宽度  =  width[内容的宽度 content ] +  (padding + border) * 2</li><li>实际显示高度 = height [内容的高度 content] +  (padding + border) * 2</li></ul></li><li><p>border-box （向内缩小）IE模型（IE盒模式、怪异模式）指定盒模型为 IE模型（怪异模式），设置 border、padding 不会影响元素 width 与 height 的尺寸，即 border 与 padding 由元素已设空间转变。即空间还是这个空间，只是将部分空余的地方，转变成了其他空间用法而已，为内部转变。</p><ul><li>width(实际显示宽度) =  width(的值)</li><li>height(实际显示高度)  =  height(的值)</li></ul></li><li><p>换句话说，就是w3c盒 设置的 width 和 height 不是实际的width 和 height ,而是content的width和height 要 加上 padding 和border，ie盒模型 设置盒子的width 和 height 就是 实际的宽度和高度</p><ul><li>w3c 盒 width/height （content的宽度和高度）</li><li>ie 盒 width/height (实际显示的宽度和高度)</li></ul></li><li><p>注意点</p><ul><li>设置<code>box-sizing:border-box</code> 当 padding 值大于 width/2 时 实际显示的宽度就会被撑开</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">:root {<br>  box-sizing: border-box;    <br>}<br>* {<br>  box-sizing: inherit;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>块级元素和内联元素<ul><li>块级元素 <code>display:block</code>：单独撑满一行的元素<ul><li>div、ul、li、table、p、h1</li></ul></li><li>内联元素<code>display:inline-block</code>：行内元素，指只占据它对应标签的边框所包含的空间的元素<ul><li>span、a、em、i、img、td</li></ul></li></ul></li><li>布局<ul><li>table</li><li>float</li><li>position</li><li>flex<ul><li>项目：</li><li>容器：</li></ul></li><li>guid</li></ul></li><li>布局</li><li>height min-height和max-height<ul><li>height  高度</li><li>min-height 最小高度（不超过最小高度）</li><li>max-height 最大高度（不小于最大高度）</li><li>min-height （最小 不能低于）vs height 谁大取谁</li><li>max-height（最大 不能小于） vs height   谁小取谁</li><li>min-height vs max-height 取min-height</li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">min-height height max-height<br>(min-height height)  <br>(height max-height) <br>height:200px<br>min-height:300px<br>// 实际取 min-height 300px<br>height:200px<br>max-height:300px<br>// 实际取  height 200px<br></code></pre></td></tr></tbody></table></figure><ul><li>line-height vertical-align</li><li>px em rem <ul><li>px 像素 </li><li>em 相对长度 </li><li>rem 相对单位（root em，根em） 对于需要适配各种移动设备，使用rem</li></ul></li></ul><p>水平</p><p>子 inline-block + 父 text-align</p><p>优缺点</p><ul><li>优点：兼容性好，甚至可以兼容ie6、ie7</li><li>缺点：child里的文字也会水平居中，可以在.child添加text-align:left;还原</li></ul><p>子 table + margin</p><ul><li>优点：只设置了child，ie8以上都支持</li><li>缺点：不支持ie6、ie7,将div换成table</li></ul><p>父 flex 子 margin:0 auto</p><ul><li>缺点：低版本浏览器(ie6 ie7 ie8)不支持</li></ul><p>竖直</p><p>父 table-cell vertical-align 通过将父框转化为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>），再通过设置属性，使表格单元格内容垂直居中以达到垂直居中。</p><p>水平+ 竖直</p><p>使用 inline-block+text-align  table-cell+vertical-align</p><ul><li>父 text-align  table-cell+vertical-align</li><li>子 inline-block</li></ul><p>多列布局</p><ul><li><p>定宽 + 自适应</p><ul><li>float+overflow:hidden</li><li>float+margin</li><li>float+margin 改良版 在1）的基础之上，通过向右框添加一个父框，再加上设置左、右父框属性使之产生BFC以去除bug。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.right-fix  float:right width:100% margin-left:-100px<br>  .right<br></code></pre></td></tr></tbody></table></figure><ul><li>table 通过将父框设置为表格，将左右边框转化为类似于同一行的td，从而达到多列布局 先将父框设置为display:table、width:100%、table-layout:fixed，再设置左右框display:table-cell，最后设置左框width、padding-right</li><li>flex</li></ul></li><li><p>两列定宽+ 一列自适应</p><ul><li>先将左、中框设置为float:left、width、margin-right，再设置右框overflow:hidden</li><li></li></ul></li><li><p>不定宽 + 自适应</p><ul><li>float +overflow<ul><li>原理：这种情况与两列定宽查不多。</li><li>用法：先将左框设置为float:left、margin-right，再设置右框overflow: hidden，最后设置左框中的内容width。</li></ul></li><li>table </li><li>原理：通过将父框改变为表格，将左右框转换为类似于同一行的td以达到多列布局，设置父框宽度100%，给左框子元素一个固定宽度从而达到自适应。</li><li>用法：先将父框设置为display: table、width: 100%，再设置左、右框display: table-cell，最后设置左框width: 0.1%、padding-right以及左框中的内容width</li><li>flex</li></ul></li><li><p>两列不定宽+ 一列自适应</p><ul><li><ul><li>先将左、中框设置为float:left、margin-right，再设置右框overflow:hidden，最后给左中框中的内容设置width。</li></ul></li></ul></li><li><p>等分布局</p><ul><li>float先将父框设置为margin-left: -*px，再设置子框float: left、width: 25%、padding-left、box-sizing: border-box</li><li>table 先将父框的修正框设置为margin-left: -*px，再设置父框display: table、width:100%、table-layout: fixed，设置子框display: table-cell、padding-left。</li><li>flex flex:1</li><li></li></ul></li><li><p>定宽+自适应 + 两块高度一样</p><ul><li>float </li><li>原理：通过过分加大左右子框的高度，辅助超出隐藏，以达到视觉上的等高。</li><li>用法：将父框设置overflow: hidden，再设置左右子框padding-bottom: 9999px、margin-bottom: -9999px，最后设置左框float: left、width、margin-right，右框overflow: hidden。</li><li>table</li><li>原理：将父框转化为tabel，将子框转化为tabel-cell布局，以达到定宽+自适应+两块高度一样高。</li><li>用法：先将父框设置为display:table、width:100%、table-layout:fixed，再设置左右框为display:table-cell，最后设置左框width、padding-right。</li><li>flex</li><li>display</li><li>原理：通过设置display中的CSS3的-webkit-box属性以达到定宽+自适应+两块高度一样高。</li><li>用法：将父框设置为display: -webkit-box、width: 100%，再设置左框width、margin-right，最后设置右框-webkit-box-flex: 1。</li></ul></li></ul><p>全屏布局</p><ul><li><h5 id="全屏布局的特点"><a href="#全屏布局的特点" class="headerlink" title="全屏布局的特点"></a>全屏布局的特点</h5></li><li><ul><li>滚动条不是全局滚动条，而是出现在内容区域里，往往是主内容区域</li><li>浏览器变大时，撑满窗</li><li>flex</li><li>position 将上下部分固定，中间部分使用定宽+自适应+两块高度一样高。</li></ul></li></ul><p>浏览器私有前缀</p><ul><li><p>兼容老版本的写法 新版本的浏览器无法添加</p></li><li><p>-moz- firefox -ms- ie  -webkit safari chome -o- Opera</p></li><li><p>精灵图 雪碧图 小的背景图片使用</p></li></ul><figure class="highlight js"><figcaption><span>主要使用 背景 background-position  精灵图都是负值 获取当前icon 的宽高 x y轴</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs js">   width height background-<span class="hljs-title function_">image</span>(<span class="hljs-string">'./'</span>) no-repeat -x -y ; 左上角是坐标 往左下走<br>- 常见网页布局<br><br>  - 对齐方式<br>    - 水平垂直居中<br>      - padding + text-<span class="hljs-attr">aligin</span>:center 行内元素<br>      - 父 table-cell + text-align：center + vertical-<span class="hljs-attr">align</span>:middle 子 inline-block<br>      - 绝对定位 transform margin-*  <span class="hljs-attr">margin</span>:auto<br>        - <span class="hljs-attr">pos</span>:a width left/top/right/<span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span>  <span class="hljs-attr">margin</span>:auto<br>        - <span class="hljs-attr">pos</span>:a transform  父 设置 <span class="hljs-attr">display</span>:relative 子  <span class="hljs-attr">position</span>:absolute; <span class="hljs-attr">top</span>:<span class="hljs-number">50</span>% <span class="hljs-attr">left</span>:<span class="hljs-number">50</span>% <span class="hljs-attr">transform</span>:<span class="hljs-title function_">translate</span>(-<span class="hljs-number">50</span>%,-<span class="hljs-number">50</span>%)<br>        - <span class="hljs-attr">pos</span>:a width height <span class="hljs-attr">left</span>:<span class="hljs-number">50</span>% <span class="hljs-attr">top</span>:<span class="hljs-number">50</span>% + margin-<span class="hljs-attr">left</span>:-<span class="hljs-number">0.5</span><span class="hljs-string">`*`</span>宽度  margin-<span class="hljs-attr">top</span>:-<span class="hljs-number">0.5</span><span class="hljs-string">`*`</span>高度<br>      - flex<br>        - 父 flex justify-<span class="hljs-attr">content</span>:center aligin-<span class="hljs-attr">items</span>:center<br>        - 父 flex 替换成 <span class="hljs-attr">display</span>: inline-flex | grid | inline-grid 也是可以的 子 margin auto<br>      - grid   父 grid place-<span class="hljs-attr">content</span>:center<br>    - 水平居中<br>      - 行内元素水平居中<br>        - 父 text-<span class="hljs-attr">aligin</span>:center  子 inline-block<br>      - 块级元素水平居中<br>        - 子元素含float：父 <span class="hljs-attr">width</span>:fit-content <span class="hljs-attr">margin</span>:<span class="hljs-number">0</span> auto 子 <span class="hljs-attr">float</span>:left<br>        - flex justify -<span class="hljs-attr">content</span>:center<br>        - <span class="hljs-attr">pos</span>:a transform/margin-left/margin<br>          - <span class="hljs-attr">pos</span>:a <span class="hljs-attr">left</span>:<span class="hljs-number">50</span>% + <span class="hljs-title function_">transform</span>(-<span class="hljs-number">50</span>%,<span class="hljs-number">0</span>)<br>          - <span class="hljs-attr">pos</span>:a width <span class="hljs-attr">left</span>:<span class="hljs-number">50</span>% + margin-<span class="hljs-attr">left</span>:-<span class="hljs-number">0.5</span>*宽度  <span class="hljs-attr">position</span>:absolute;<span class="hljs-attr">top</span>:<span class="hljs-number">50</span>%;<span class="hljs-attr">left</span>:<span class="hljs-number">50</span>%;margin-<span class="hljs-attr">top</span>:-height/<span class="hljs-number">2</span>;margin-<span class="hljs-attr">left</span>:-width/<span class="hljs-number">2</span>;<br>          - <span class="hljs-attr">pos</span>:a width left/<span class="hljs-attr">right</span>:<span class="hljs-number">0</span> + <span class="hljs-attr">margin</span>:<span class="hljs-number">0</span> auto<br>        - 固width+ <span class="hljs-attr">margin</span>:<span class="hljs-number">0</span> auto<br>      - 左右对齐<br>        - float left right<br>        - text-aligin left center right<br>        - <span class="hljs-attr">pos</span>:absolute <span class="hljs-attr">left</span>:<span class="hljs-number">0</span> <span class="hljs-attr">right</span>:<span class="hljs-number">0</span><br>    - 垂直居中<br>      - 行内元素 line-height = height 单行文本 父元素设置<br>      - 块级元素<br>        - padding<br>        - <span class="hljs-title function_">calc</span>()<br>        - inline-block<br>        - table-cell vertial-align<br>          - 父 display table  子  <span class="hljs-attr">display</span>: table-cell; vertical-<span class="hljs-attr">align</span>: middle;<br>          - 父  <span class="hljs-attr">display</span>:table-cell vertical-<span class="hljs-attr">align</span>: middle; 子  <span class="hljs-attr">display</span>: inline-block; vertical-<span class="hljs-attr">align</span>: middle;<br>        - 伪元素<br>        - flex align-<span class="hljs-attr">items</span>:center<br>        - <span class="hljs-attr">pos</span>:a<br>          - <span class="hljs-attr">pos</span>:a <span class="hljs-attr">top</span>:<span class="hljs-number">50</span>% <span class="hljs-attr">height</span>:高度 margin-<span class="hljs-attr">top</span>:-<span class="hljs-number">0.5</span>高度<br>          - <span class="hljs-attr">pos</span>:a <span class="hljs-attr">top</span>:<span class="hljs-number">50</span>% <span class="hljs-attr">transform</span>:<span class="hljs-title function_">translate</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">50</span>%)<br>          - <span class="hljs-attr">pos</span>:a top/<span class="hljs-attr">bottom</span>:<span class="hljs-number">0</span>  <span class="hljs-attr">margin</span>:auto <span class="hljs-number">0</span><br><br>  布局 float position flex grid<br><br>  - 多列布局<br><br>    - columns 多列布局<br><br>    - <span class="hljs-number">2</span>列布局<br><br>      - 定宽布局：一列定宽、一列自适应<br>        - grid-template-<span class="hljs-attr">columns</span>:100px auto /100px 1fr<br>        - 左侧 <span class="hljs-attr">float</span>:left，右侧 margin-left<br>        - 父 flex 左侧 width 100px 右侧 <span class="hljs-attr">flex</span>:<span class="hljs-number">1</span><br>      - 两响应式：两列自适应<br>        - 父 table  多列 <span class="hljs-attr">display</span>:table-cell<br>        - 左侧 <span class="hljs-attr">float</span>:left，右侧 <span class="hljs-attr">overflow</span>:hidden。<br>        - position<br>        - flex 父 flex 多列 <span class="hljs-attr">width</span>:auto 单列自适应 <span class="hljs-attr">flex</span>:<span class="hljs-number">1</span><br>          - 属性值 auto (<span class="hljs-number">1</span> <span class="hljs-number">1</span> auto) 和 none (<span class="hljs-number">0</span> <span class="hljs-number">0</span> auto)<br><br>    - <span class="hljs-number">3</span>列布局 圣杯(中左右) 双飞翼<br><br>      <span class="hljs-string">``</span><span class="hljs-string">`html</span><br><span class="hljs-string">      float</span><br><span class="hljs-string">      &lt;div class="container"&gt;</span><br><span class="hljs-string">        &lt;div class="header"&gt;header&lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class="wrapper clearfix"&gt;</span><br><span class="hljs-string">          &lt;div class="main col"&gt;main&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div class="left col"&gt;left&lt;/div&gt;</span><br><span class="hljs-string">          &lt;div class="right col"&gt;right&lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class="footer"&gt;footer&lt;/div&gt;</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">      &lt;style&gt;</span><br><span class="hljs-string">        .container {width: 500px; margin: 50px auto;}</span><br><span class="hljs-string">        .wrapper {padding: 0 100px 0 100px;}</span><br><span class="hljs-string">        .col {position: relative; float: left;} // 重点</span><br><span class="hljs-string">        .header,.footer {height: 50px;}</span><br><span class="hljs-string">        .main {width: 100%;height: 200px;}</span><br><span class="hljs-string">        .left {width: 100px; height: 200px; margin-left: -100%;left: -100px;}</span><br><span class="hljs-string">        .right {width: 100px; height: 200px; margin-left: -100px; right: -100px;}</span><br><span class="hljs-string">        .clearfix::after {content: ""; display: block; clear: both; visibility: hidden; height: 0; overflow: hidden;}</span><br><span class="hljs-string">      &lt;/style&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      flex</span><br><span class="hljs-string">      &lt;header&gt;&lt;/header&gt;</span><br><span class="hljs-string">      &lt;main&gt;</span><br><span class="hljs-string">        &lt;article&gt;&lt;/article&gt; &lt;!-- 主内容 --&gt;</span><br><span class="hljs-string">        &lt;nav&gt;&lt;/nav&gt;</span><br><span class="hljs-string">        &lt;aside&gt;&lt;/aside&gt;</span><br><span class="hljs-string">      &lt;/main&gt;</span><br><span class="hljs-string">      &lt;footer&gt;&lt;/footer&gt;</span><br><span class="hljs-string">      &lt;style&gt;</span><br><span class="hljs-string">      body {</span><br><span class="hljs-string">        width: 100vw;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        flex-direction: column;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      main {</span><br><span class="hljs-string">        flex: 1;</span><br><span class="hljs-string">        min-height: 0;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        align-items: stretch;</span><br><span class="hljs-string">        width: 100%;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      footer {</span><br><span class="hljs-string">        margin-top: auto;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      nav {</span><br><span class="hljs-string">        width: 220px;</span><br><span class="hljs-string">        order: -1;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      article {</span><br><span class="hljs-string">        flex: 1;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      aside {</span><br><span class="hljs-string">        width: 220px;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      &lt;/style&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      grid</span><br><span class="hljs-string">      &lt;body&gt;</span><br><span class="hljs-string">        &lt;header&gt;&lt;/header&gt;</span><br><span class="hljs-string">        &lt;main&gt;&lt;/main&gt;</span><br><span class="hljs-string">        &lt;nav&gt;&lt;/nav&gt;</span><br><span class="hljs-string">        &lt;aside&gt;&lt;/aside&gt;</span><br><span class="hljs-string">        &lt;footer&gt;&lt;/footer&gt;</span><br><span class="hljs-string">      &lt;/body&gt;</span><br><span class="hljs-string">      &lt;style&gt;</span><br><span class="hljs-string">        // 方法一</span><br><span class="hljs-string">        body {</span><br><span class="hljs-string">          display: grid;</span><br><span class="hljs-string">          // grid-template-row auto</span><br><span class="hljs-string">          grid-template: auto 1fr auto;</span><br><span class="hljs-string">            / 220px 1fr 220px;</span><br><span class="hljs-string">           grid-template: 220px 1fr 220px / 220px 1fr 220px;</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        header,footer {</span><br><span class="hljs-string">          grid-column: 1 / 4;</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        main,nav,aside{</span><br><span class="hljs-string">          grid-row:2 / 3</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        main {</span><br><span class="hljs-string">          //grid-area: 2/2/3/3;</span><br><span class="hljs-string">          //grid-row: 2 / 3;</span><br><span class="hljs-string">          grid-column: 2 / 3;</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        nav {</span><br><span class="hljs-string">          //grid-area: 1/2/2/3;</span><br><span class="hljs-string">          // grid-row: 2 / 3;</span><br><span class="hljs-string">          grid-column: 1 / 2;</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        aside {</span><br><span class="hljs-string">          //grid-area: 3/2/4/3;</span><br><span class="hljs-string">          // grid-row: 2 / 3;</span><br><span class="hljs-string">          grid-column: 3 / 4;</span><br><span class="hljs-string">        }</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // key code</span><br><span class="hljs-string">      .hg__header { grid-area: header;}</span><br><span class="hljs-string">      .hg__footer { grid-area: footer;}</span><br><span class="hljs-string">      .hg__main { grid-area: main;}</span><br><span class="hljs-string">      .hg__left { grid-area: left;}</span><br><span class="hljs-string">      .hg__right { grid-area: right;}</span><br><span class="hljs-string"></span><br><span class="hljs-string">      .hg {</span><br><span class="hljs-string">        display: grid;</span><br><span class="hljs-string">        grid-template-areas:  "header header header"</span><br><span class="hljs-string">                    "left main right"</span><br><span class="hljs-string">                    "footer footer footer";</span><br><span class="hljs-string">        // grid-template: 250px 1fr 300px / 100px  1fr 80px</span><br><span class="hljs-string">        grid-template-columns: 250px 1fr 300px;</span><br><span class="hljs-string">        grid-template-rows: 100px  1fr 80px;</span><br><span class="hljs-string">        min-height: 100vh;</span><br><span class="hljs-string">      }</span><br><span class="hljs-string">      &lt;/style&gt;</span><br></code></pre></td></tr></tbody></table></figure><pre><code>  - 圣杯布局: 1. 两列定宽、中间自适应 2. main排在第一位 中左右    - position 指定三列的位置 container 设置releative  main left   right    - float      - wrapper {padding: 0 100px 0 100px;}      - .col {position: relative; float: left;}      - left margin-left: -100%; left: -100px; right margin-left: -100px; right: -100px;}      - .clearfix::after {content: ""; display: block; clear: both; visibility: hidden; height: 0; overflow: hidden;}    - flex 三列布局 父 flex-direction: column flex  子 两列定宽度 中间 flex：1  左 order:-1    - grid      - header+main+nav+aside+footer        - 父 grid-template: auto 1fr auto / 200px 1fr 200px 子 header、footer grid-column: 1/4 、main，nav，aside grid-row 2/3 、main grid-column 2/3 nav 1/2 aside 3/4        - grid-tempalate-areas// grid-area  - 双飞翼布局 中(添加main-wrap)左右  col不需要position 和 main padding // main设置固定值  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span>header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrapper clearfix"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main col"</span>&gt;</span><br>      // 添加一层<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main-wrap"</span>&gt;</span>main<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left col"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right col"</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"footer"</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  // 不需要<span class="hljs-attribute">position</span> 和 <span class="hljs-attribute">padding</span></span><br><span class="language-css"><span class="hljs-selector-class">.col</span> {<span class="hljs-attribute">float</span>: left;}</span><br><span class="language-css"><span class="hljs-selector-class">.header</span> {<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;}</span><br><span class="language-css"><span class="hljs-selector-class">.main</span> {<span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;}</span><br><span class="language-css"><span class="hljs-selector-class">.main-wrap</span> {<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;}</span><br><span class="language-css"><span class="hljs-selector-class">.left</span> {<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;}</span><br><span class="language-css"><span class="hljs-selector-class">.right</span> {<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;}</span><br><span class="language-css"><span class="hljs-selector-class">.footer</span> {<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;}</span><br><span class="language-css">    </span><br><span class="language-css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> {<span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>; <span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">clear</span>: both; <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">overflow</span>: hidden;}</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>  - Sticky Footer    - flex main flex 1 0 auto    - grid  grid-template-rows: auto 1fr auto;- 12列布局  - grid grid-temp;ate-columns :repeat(12,1fr)- 均分列 对列做均分布局，最为常见的就是在移动端的底部Bar  - flex flex:1  - grid grid-template-columns: repeat(3, 1fr);  - 解决flex grid 缺陷 在Flex容器或Grid容器显式设置一个min-width（或min-inline-size）- 等布局  - 等高布局 高度一样    - 父 overflow:hidden 子 left和right padding-bottom: 9999px;margin-bottom: -9999px; left float:left right overflow:hidden    - table 父 display:table 子 table-cell    - flex flex aligin-items:stretch    - grid grid-template-columns:20vw 1fr 20vw  height:100%  - 等宽布局 宽度一样    - 父 margin-left:-px column float:left    - 父 display:table table-layout:fixed 子 table-cell    - flex colum:flex:1- 多列布局  - 多列定宽+单列自适应    - left float:left  width  right overflow:hidden    - 父 table table-layout:fixed 多列 display:table-cell    - 父 flex 多列 width 单列自适应 flex:1  - 多列不定宽，单列自适应    - 多 float left 单 overflow:hidden</code></pre><ul><li>多行布局<ul><li>行布局</li><li>三行布局</li><li>多行布局</li></ul></li></ul><p>media 媒体查询</p><p>设置多套的css</p><ul><li>basic.css mobile desktop</li></ul><p>响应式 自适应 流体网格</p><p>弹性图片</p><p>媒体类型  Media Type all screen print tv</p><p>px规格 0~320px ~550px ~768px ~960px</p><p>html 默认font-szie:16px</p><p>引用方法 link media=“screen” xml <code>&lt;style&gt;@import url(“.css”) print.css</code> @media screen{ }</p><p>orientation:portrait 竖屏 | landscape 横屏 @media only screen and (orientation:landscape)</p><p>媒体特征  Media Query</p><p>media 媒体查询 根据设备的尺寸，查询适配的样子</p><ul><li>@media 媒体类型 and（媒体特征 min-width：480px;） {}</li><li>@media screen and (min-width:600px) and (max-width:900px){}</li><li><link rel="stylesheet" media="screen" and(max-device-width:480px)="" href="ipone.css"></li><li>max、min-width 最大、小宽度 and 和 not 排除 only 指定某种特定的媒体类型  and 多个媒体使用  max-devide-width 设备屏幕的输出宽度Devide Width</li></ul><p>meta name=viewport</p><ul><li>content = width  height initial-scale 初始缩放比例 minimum-scale 允许用户缩放到的最小比例 maximum-scale 允许用户缩放到的最大比例 user-scalable 用户是否可以手动缩放</li></ul><p>浏览器兼容性</p><ul><li>-moz-(FireFox)  -webkit-(Chrome) -ms-(IE) -o-(Opera) -khtml-</li></ul><p>技巧</p><ul><li><p>css hack 浏览器厂商 用来增强自已的竞争</p></li><li><p>两端对齐 text-align:justify</p></li><li><p>文本溢出 text-overflow:ellipsis overflow:hidden</p></li><li><p>首行缩进 text-indent:2em</p></li><li><p>position:fixed 降级 父 transform fixed 会降级成absolute</p></li><li><p>背景图片可以响应式调整缩放大小</p><ul><li>bg-size:container/cover</li></ul></li><li><p>1px 细线</p><ul><li>box-shadow: inset 0px -1px 1px -1px #d4d6d7;</li><li>使用伪类 + transform</li></ul></li><li><p>平滑滚动 <code>html scroll-behavior:smooth !import;</code></p></li><li><p>自定义滚动条 </p><ul><li>-webkit-scrollbar</li><li>-webkit-scrollbar-thumb</li></ul><p>禁用用户选择</p><ul><li>user-select:none</li></ul><p>竖排文字</p><ul><li>writing-mode:tb-rl</li><li>transform:rotate(-180deg)</li></ul><p>固定到底部</p><ul><li>flex-grow:auto</li></ul><p>悬停放大图片</p><ul><li>固定的width宽和height高。然后我们必须给予这个元素overflow: hidden属性。让图片放大的时候不会超出这个div元素的宽高</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(syntax)微信小程序</title>
      <link href="/%E8%AF%AD%E6%B3%95%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.html"/>
      <url>/%E8%AF%AD%E6%B3%95%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><blockquote><p>开发文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信开放文档</a></p><p>Github</p><ul><li><a href="https://github.com/justjavac/awesome-wechat-weapp">justjavac/awesome-wechat-weapp: 微信小程序开发资源汇总 <span class="github-emoji"><span>💯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></a></li><li><a href="https://github.com/opendigg/awesome-github-wechat-weapp">opendigg/awesome-github-wechat-weapp: 微信小程序开源项目库汇总</a></li><li><a href="https://github.com/aben1188/awesome-wepy">aben1188/awesome-wepy: Awesome for wepy ! 微信小程序组件化开发框架wepy开发资源汇总</a></li><li><a href="https://github.com/EastWorld/wechat-app-mall">EastWorld/wechat-app-mall: 微信小程序商城，微信小程序微店</a></li></ul><p>教程</p><ul><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903670589423623">近两万字小程序攻略发布了</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903614847123463">微信小程序源码获取教程</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903588498522120">手把手教会你小程序登录鉴权</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903552687538190">从零开始一个微信小程序版知乎</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903875271458829">仿网易云音乐微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903630714519559">两天撸一个天气应用微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903616961052679">滴滴一夏， 小程序专车来了</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6995356720125968398">【微信小程序】小程序原生代码生成海报</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903661743636494">两周撸一个掘金微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903616956858376">微信小程序——商城篇</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903681175846925">小程序的全栈开发新时代</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6924089220172611592">简版掘金-上班摸鱼小程序上线了</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903862533373959">我写小程序像菜虚鲲——1、唱，跳，rap，篮球</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903606227828749">微信小程序开发–『狗蛋TV』</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903618768797703">『改良版青桔单车』微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903631179759623">基于mpvue的仿滴滴出行小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903619444244488">米8抢到没？不急，撸个小程序先😎</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844904012945326094">京喜首页（微信购物入口）跨端开发与优化实践</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6930838665404874766">开工啦-耗时4天写了一个小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6997644572629139492">仿得物微信小程序（动手就会🙌）</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903801221021704">给媳妇做一个记录心情的小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903775044370445">微信小程序websocket聊天室</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6886267464506671118">手把手教你写微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903640310743048">手把手教你搭建微信小程序服务器（HTTPS）</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6865920270218035214">小程序开发不得不爬的坑，我替你爬过了！</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903821332709383">从0开始搭建微信小程序(前后端)的全过程</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903665422041095">微信小程序实现商城案例（赋源码)</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903665363501063">微信小程序入门一篇就够了 豆瓣电影Top250</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903667682770957">mpvue微信小程序-仿网易云音乐</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903758250377230">手摸手聊聊小程序持续集成Jenkins</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903967739084807">[填坑手册]小程序PC版来了，如何做PC端的兼容？！</a></li><li><input disabled="" type="checkbox"> <a href="https://juejin.cn/book/6844733743266005006">微信小程序开发入门：从 0 到 1 实现天气小程序 - 三水清 - 掘金小册</a></li><li><input disabled="" type="checkbox"> <a href="https://github.com/xiehui999/SmallAppForQQ">xiehui999/SmallAppForQQ: 微信小程序(微信应用号)微信小程序官方demo,官方文档,开发工具，高仿手机QQ应用程序,持续更新中…</a></li></ul><p>视频</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://coding.imooc.com/learningpath/route?pathId=31">微信小程序从0基础到精通_学习路线_编程项目实战_实战学习路径_慕课网</a> </li><li><input disabled="" type="checkbox"> <a href="https://www.imooc.com/learn/974">微信小程序开发入门视频教程-慕课网</a></li><li><input disabled="" type="checkbox"> <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8F%B2">小程序简介 | 微信开放文档</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1nE41117BQ?from=search&amp;seid=10181070238783582949">黑马程序员Web前端教程_零基础玩转微信小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1sx411z77P?from=search&amp;seid=9370553712854171431">【微信小程序】从入门到入土课程</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1WQ4y1T7D8?from=search&amp;seid=9370553712854171431">2020最新微信小程序开发零基础入门+项目案例【新视觉实训】</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1i4411c7dU?from=search&amp;seid=9370553712854171431">微信小程序2019快速入门+四个实战小程序</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV12K411A7A2?from=search&amp;seid=9370553712854171431">尚硅谷2021版微信小程序开发（零基础小程序开发入门到精通）</a></li><li><input disabled="" type="checkbox"> <a href="https://coding.imooc.com/class/75.html">微信小程序开发入门与实战教程-慕课网实战</a></li><li><input disabled="" type="checkbox"> <a href="https://coding.imooc.com/class/373.html">微信小程序云开发_从0打造云音乐全栈小程序-慕课网</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV15b411P7e6?from=search&amp;seid=14286172847930360732">尚硅谷小程序框架Mpvue教程(mpvue小程序框架精讲)</a></li><li><input disabled="" type="checkbox"> <a href="https://www.bilibili.com/video/BV1BJ411W7pX?from=search&amp;seid=7278699364733577484">Uni-App从入门到实战-黑马程序员杭州校区出品</a></li><li><input disabled="" type="checkbox"> <a href="https://www.imooc.com/learn/1084">Taro多端框架开发外卖首页-慕课网</a></li><li><input disabled="" type="checkbox"> <a href="https://cloud.tencent.com/edu/paths/series/applet">小程序学习路径课 - 学习路径 - 腾讯产业互联网学堂</a></li></ul><p>项目</p><ul><li><a href="https://juejin.cn/post/6844903670589423623">近两万字小程序攻略发布了</a>、</li><li><a href="https://juejin.cn/post/6844903589148639239">仿美团外卖的全栈项目(vue+node+mongodb)带支付-&gt;大三求实习</a></li><li><a href="https://github.com/bailicangdu/vue2-elm">bailicangdu/vue2-elm: 基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin">PanJiaChen/vue-element-admin: A magical vue admin https://panjiachen.github.io/vue-element-admin</a></li><li><a href="https://blog.csdn.net/qq_42049445/article/details/94164330">Vue项目实战——仿每日优鲜（移动端网站）_五柳-CSDN博客_vue实战项目</a></li><li><a href="https://juejin.cn/post/6844903552687538190">从零开始一个微信小程序版知乎</a></li><li><a href="https://juejin.cn/post/6844903616961052679">滴滴一夏， 小程序专车来了</a></li><li><a href="https://juejin.cn/post/6844903616956858376">微信小程序——商城篇</a></li><li><a href="https://juejin.cn/post/6844903587097608200">美团小程序框架mpvue入门教程</a><a href="https://juejin.cn/post/6844903630714519559">两天撸一个天气应用微信小程序</a></li><li><a href="https://juejin.cn/post/6844903614847123463">微信小程序源码获取教程</a></li><li><a href="https://juejin.cn/post/6844903716756127751">你想要的全平台全栈开源项目 - Vue、React、小程序、Android原生、ReactNative、java后端</a></li><li><a href="https://juejin.cn/post/6844903757256327175">mpvue+小程序云开发，纯前端实现婚礼邀请函</a></li><li><a href="https://juejin.cn/post/6844903779154804744">Taro 多端开发的正确姿势：打造三端统一的网易严选（小程序、H5、React Native）</a></li><li><a href="https://juejin.cn/post/6844904016581754894">硬核！ 逛了4年Github ，一口气把我收藏的 Java 开源项目分享给你！</a></li></ul></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="小程序基础"><a href="#小程序基础" class="headerlink" title="小程序基础"></a>小程序基础</h3><p>微信⼩程序，简称⼩程序，英⽂名 Mini Program ，是⼀种不需要下载安装即可使⽤的应⽤，⽤⼾扫⼀扫或搜⼀下即可打开应⽤</p><p>协同工作和发布</p><ul><li>权限管理 ： 员工的权限边界划分</li><li>项目成员的组织结构 项目管理者（管理员）  ==&gt; 产品组（提需求） 设计组（出设计方案） 开发组（代码开发） 测试组（项目测试）</li><li>小程序开发流程 提出需求（产品组） =&gt; 设计（设计组） =&gt; 开发（开发组） =&gt; 体验（产品组和设计组） =&gt; 测试（测试组） =&gt; 发布（管理者）</li><li>成员管理的两个方面 小程序成员管理体现在管理员对小程序项目成员（运营者 开发者 数据分析者）以及体验成员的管理</li><li>不同项目成员的权限： 运营者 开发者（开发权限、体验者权限、登录（登录小程序管理后台）、开发设置（设置小程序服务器域名、消息推送以及扫描链接二维码打开小程序）、腾讯云管理（云开发设置）） 数据分析者</li></ul><p>软件开发过程中的不同版本</p><ul><li>开发版本 、体验测试、发布正式版（修复BUG）</li></ul><p>小程序版本</p><ul><li>开发版本 、体验版本、审核中的版本、线上版本</li></ul><p>发布和上线</p><ul><li>上传代码 -&gt; 提交审核 -&gt; 发布（上传按钮 版本号 项目备注） 在小程序管理后台：查看上传之后的版本 管理 版本管理 =&gt; 提交审核  =&gt; 发布</li></ul><p>小程序码 vs 普通二维码</p><ul><li>小程序管理后台 获取小程序码</li></ul><p>运营数据</p><ul><li>小程序后台</li><li>小程序数据助手（微信小程序）</li></ul><p>宿主环境 指的是程序运行所必须的依赖环境（Android iOS）</p><ul><li><p>微信是微信小程序的宿主环境 小程序宿主环境包含的内容</p><ul><li><p>通信模型（模式） 通信的主体</p><ul><li>渲染层（WXML模板 WXSS样式） 逻辑层 (JS脚本)   &lt; = &gt; Native （微信客户端） &lt; = &gt;  第三方客户端</li><li>小程序的通信模型分为两部分<ul><li>渲染层和逻辑层的通信  微信客户端转发</li><li>逻辑层和第三方服务器之间的通信  微信客户端转发</li></ul></li></ul></li><li><p>运行机制</p><ul><li>小程序启动过程<ul><li>代码包下载到本地 =&gt; 解析app.json全局配置文件 =&gt; app.js小程序入口文件（调用App()创建小程序实例）=&gt; 渲染首页 =&gt; 小程序启动完成</li></ul></li><li>页面渲染过程<ul><li>加载解析页面.json文件 =&gt; 加载页面的.wxml模板和.wxss样式 =&gt; 执行页面的.js文件，调用Page()创建实例 =&gt; 页面渲染完成</li></ul></li></ul></li></ul></li></ul><p>⼩程序框架的⽬标是通过尽可能简单、⾼效的⽅式让开发者可以在微信中开发具有原⽣ APP 体验的服务。⼩程序框架提供了⾃⼰的视图层描述语⾔ wxml 和 wxss，以及 javascript，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p><h3 id="安装环境部署"><a href="#安装环境部署" class="headerlink" title="安装环境部署"></a>安装环境部署</h3><ul><li>AppID：后期调⽤微信⼩程序的接⼝等功能，需要索取开发者的⼩程序中AppID ，所以在注册成功后，可登录，然后获取APPID。</li><li>注册账号 ==&gt; 获取APPID  ==&gt;  开发工具</li></ul><h3 id="小程序结构目录"><a href="#小程序结构目录" class="headerlink" title="小程序结构目录"></a>小程序结构目录</h3><p>小程序文件结构和传统web对比</p><table><thead><tr><th>结构</th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WX ML</td></tr><tr><td>样式</td><td>CSS</td><td>WX SS</td></tr><tr><td>逻辑</td><td>JavaScript</td><td>JavaScript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table><ul><li>传统web 是三层结构。⽽微信⼩程序 是四层结构，多了⼀层 配置.json</li></ul><p>目录结构</p><ul><li>pages 页面 utils app.js 入口文件 app.json 全局配置文件 app.wxss全局样式 .cofig.json 项目配置文件 sitemap.son  sitemap.json // 微信索引配置文件 配置小程序及其页面是否允许被微信索引</li><li>page/index js(脚本文件)/json(页面的配置文件)/wxml(页面的模本结构文件)/wxss(页面的样式表文件)</li><li>json 配置文件  4种  app.json project.config.json sitemap.json  每个页面文件夹的json配置文件</li></ul><p>基本配置目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 页面文件夹<br>pages/<br>--index/ // 首页<br>----index.js<br>----index.json<br>----index.wxml<br>----index.wxss<br>--logs<br>----logs.js<br>----logs.json<br>----logs.wxml<br>----logs.wxss<br>utils<br>----util.js // 工具性质模块 <br>app.js  // 项目的全局 入口文件<br>app.json // 全局配置文件<br>app.wxss  // 全局样式文件<br>project.config.json // 项目的配置文件如 appid<br>sitemap.json // 微信索引配置文件 配置小程序及其页面是否允许被微信索引<br></code></pre></td></tr></tbody></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>两种配置文件，一种是全局的app.json和页面⾃⼰的page.json</li><li>json文件中不能有注释</li></ul><p>全局配置文件 app.json</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//app.json  全局的配置文件 </span><br><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"pages"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span> <span class="hljs-comment">// ⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序⻚⾯定义在哪个⽬录。 小程序所有页面的路径（页面路径）</span><br>        <span class="hljs-string">"pages/index/index"</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 页面index</span><br>        <span class="hljs-string">"pages/logs/logs"</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"window"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span> <span class="hljs-comment">// 定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。 全局定义小程序所有页面的背景色、文字颜色等（窗口外观 界面表现 底部tab）</span><br>      <span class="hljs-comment">// backgroundTextStyle  navigationBar backgroundColor/ TitleText /TextStyle</span><br>        <span class="hljs-attr">"backgroundTextStyle"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"light"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"naviagtionBarBackgroundColor"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"#fff"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"navigationBarTitleText"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"WeChat"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"navigationBarTextStyle"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"black"</span> <br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-attr">"style"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"v2"</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 全局定义小程序组件使用的样式版本</span><br>   <span class="hljs-attr">"sitemapLocation"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"sitemap.json"</span> <span class="hljs-comment">// 指明sitemap.json文件的位置</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>页面配置文件 page.json：</p><p>其实用来表示页面目录下的page.json这类和⼩程序⻚⾯相关的配置。开发者可以独⽴定义每个⻚⾯的⼀些属性，如顶部颜⾊、是否允许下拉刷新等等。</p><p>⻚⾯的配置只能设置app.json中部分 window配置项的内容，⻚⾯中配置项会覆盖 app.json的window 中相同的配置项。</p><ul><li><p>页面 .json 配置文件</p></li><li><p>project.config.json 项目配置文件 小程序开发工具个性化配置</p></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">setting   编译相关设置<br>projectname 项目名称<br>appid 小程序的账号ID<br><span class="hljs-comment">// checkSiteMap false 关闭 sitemap.json 提示</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sitemap.json 配置小程序是否允许微信索引 小程序内搜索 PC网页的SEO<br>rules[<br> action:"allow", // disallow<br> "page":"*"<br>]<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜⾊，仅⽀持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>backgroundTextStyle</td><td>HexColor</td><td>#fffff</td><td>窗口背景色</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新。详⻅ Page.onPullDownRefresh</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>⻚⾯上拉触底事件触发时距⻚⾯底部距离，单位为px。 详⻅Page.onReachBottom</td></tr><tr><td>disableScroll</td><td>Boolean</td><td>false</td><td>设置为 true则⻚⾯整体不能上下滚动；只在⻚⾯配置中有<br>效，⽆法在 app。json中设置该项</td></tr></tbody></table><p>sitemap 配置</p><ul><li>sitemap.json 文件用于配置小程序及其页面是否允许被微信索引</li></ul><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>WXML (WeiXin Markup Language) 是框架设计的一套标准语言，结合基础组件、事件系统、可以构建出页面的结构</p><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><ul><li>花括号和引号之间如果有空格，将最终被解析成为字符串</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{ message }}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"item-{{id}}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> // 组件属性<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">"{{ flag ? true:false}} "</span>&gt;</span>Show<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> // 三元运算符<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> {{a + b}} + {{c}} + d <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> // 算数运算<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">"{{length &gt; 5}}"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> // 逻辑判断<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{"hello" + name}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> // 字符串运算<br><br>// 类似vue<br>Page({<br>data:{<br>message:'Hello Message',<br>id:1000,<br>name:'talk',<br>a:'100',<br>c:'1000'<br>}<br>})<br></code></pre></td></tr></tbody></table></figure><p>全局配置 app.json</p><ul><li>pages 页面存放路径</li><li>style</li><li>window  全局设置小程序窗口的外观<ul><li>navigationBar 导航区域 TitleText TextStyle  BackgroudColor</li><li>background 背景区域 Color（下来刷新时窗口的颜色）  TextStyle（下拉刷新的loading样式 dark/light默认值  不能设置其他值）</li><li><code>enablePullDownRefresh=true</code> 下拉刷新 每个小程序都会有</li><li>onReachBottomDistace=50   页面上拉触底事件触发时距页面底部的距离 单位50px默认  上拉触底是移动端的专有名词 通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为</li></ul></li><li>tabBar  底部tabBar效果 移动端常见的页面效果 实现多页面的快速切换<ul><li>底部tabBar 顶部tabBar</li><li>个数[2~5] 渲染顶部tabBar 不显示icon 显示文本</li><li>节点配置选项 postion:bottom/top borderStyle color selectColor backgroundColor list<ul><li>每个tab选项的配置 list<ul><li>pagePath text iconPath selectIconPath</li></ul></li></ul></li><li>tabBar的6个组成部分<ul><li>backgroundColor tabBar 背景颜色</li><li>borderStyle tabBar上边框的颜色</li><li>iconPath 未选中时的图片路径 selectedIconPath  选中时的图片路径</li><li>color 颜色 selectedColor  tab文字选中的颜色</li></ul></li></ul></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">"tabBar"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"list"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"pagePath"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"pages/index/index"</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"首页"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"iconPath"</span><span class="hljs-punctuation">:</span><span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">"selectedIconPath"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./assets/image/shouye-select.png"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><ul><li>style  是否启用新版的组件样式 v2 新 v1 旧</li></ul><p>页面配置  .json 配置文件 当前页面的窗口外观 页面效果进行配置</p><ul><li>冲突 页面配置覆盖全局配置</li><li>页面配置中常用的配置项<ul><li>navigationBar BackgroundColor/TextSytle(black/white)/TitleText/</li><li>background Color/TextStyle(dark/light)/ 下拉区域样式</li><li>enablePullDownRefresh=true/false 下拉刷新</li><li>onReachBottomDistance=100（50默认） 上拉触底</li></ul></li></ul><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><ul><li>wx:for<ul><li>wx:for-item  可以指定数组当前元素的变量名</li><li>wx:for-index 可以指定数组当前下标的变量名</li></ul></li><li>wx:key <ul><li>提高数组渲染的性能</li><li>绑定的值 <ul><li>string 类型，表示循环项中的唯一属性</li><li>保留<code>*this</code>，它的意思是 item 本⾝ ，*this 代表的必须是 唯⼀的字符串和数组。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">list:[{id:0,name:''},{id:1,name:''}]<br>wx:key="id"<br>list = [1,2,3,4,5,6]<br>wx:key="*this"<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">// wx:for<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{array}}"</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">“id”</span>&gt;</span>  // wx.key <br>{{index}}:{{item.message}}<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>   <br><br>Page({<br>data:{<br>array:[{<br>id:0,<br>message:'foo',<br>},{<br>    id:1,<br>  message:'bar'<br>}]<br>}<br>})<br></code></pre></td></tr></tbody></table></figure><p>block</p><ul><li>渲染一个包含多节点的结构块block最终不会变成真正的dom元素</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{[1,3,4,5]}}"</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">"*this"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{index}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span>    <br></code></pre></td></tr></tbody></table></figure><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><table><thead><tr><th>标签</th><th>功能</th></tr></thead><tbody><tr><td>wx:if</td><td>条件渲染</td></tr><tr><td>hidden</td><td>频繁切换</td></tr></tbody></table><ul><li><code>wx:if ="{{{condition}}}"</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">"{{false}}"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">"{{true}}"</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>hidden</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">"{{condition}}"</span>&gt;</span>True<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li>绑定事件通过bind关键字实现，<code>bindtap、input、change</code></li></ul><table><thead><tr><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>bindtap</td><td></td></tr><tr><td>bindinput</td><td>绑定输入</td></tr><tr><td>bindchange</td><td>绑定改变</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">"handleInput"</span> /&gt;</span><br>// 绑定参数时不能带参数.不能带括号 以下为错误写法<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">"handleInput(100)"</span> <span class="hljs-attr">data-item</span>=<span class="hljs-string">"100"</span>/&gt;</span><br>Page({<br>handleInput:fucniton(e){<br>console.log(e.currentTarget.dataset)<br>console.log(e.detail.item)<br>}<br>})<br></code></pre></td></tr></tbody></table></figure><h3 id="样式WXSS"><a href="#样式WXSS" class="headerlink" title="样式WXSS"></a>样式WXSS</h3><p>wxss  样式语言 类似css</p><ul><li>新增rpx尺寸单位  rpx 在不同大小的屏幕上程序会自动换算 rem css 手动换算</li><li>提供全局的样式（app.wxss 使用小程序页面）和局部样式（.wxss 当前小程序页面）</li><li>支持部分css选择器   <code># . element 并、后代 ::after ::before</code></li></ul><p>js</p><p>WXSS(Wexi Style Sheets) 是一套样式语言，用来描述WXML的组件样式</p><p>WXSS扩展的特性有</p><ul><li>响应式长度单位 rpx</li><li>样式导入</li></ul><p>尺寸单位</p><table><thead><tr><th>尺寸单位</th><th>功能</th></tr></thead><tbody><tr><td>rpx</td><td>自适应的屏幕宽度</td></tr><tr><td>px</td><td>像素</td></tr></tbody></table><p>rpx (responsive pixel) :可以根据屏幕宽度进行自适应。规定屏幕宽为750px。</p><p>在iphone6上、 750rpx = 375px = 750物理像素、1rpx = 0.5px = 1物理像素 </p><table><thead><tr><th>设备</th><th>rpx换算px（屏幕宽度/750）</th><th>px换算rpx(750/屏幕宽度)</th></tr></thead><tbody><tr><td>iphone5</td><td>1rpx = 0.42px</td><td>1px = 2.34rpx</td></tr><tr><td>iphone6</td><td>1rpx = 0.5px</td><td>1ps = 2rpx</td></tr><tr><td>iphone</td><td>1rpx = 0.552px</td><td>1px = 1.81rpx</td></tr></tbody></table><p>确定设计稿宽度pageWitdth </p><ul><li><code>750px = pageWidth px</code>, 因此 1 px = 750rpx / pageWith </li><li>在less⽂件中，只要把设计稿中的  px  =&gt; 750px/pageWidth rpx  即可。</li></ul><p>样式导入</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">"common.wxss"</span>;<br>// 不⽀持通配符 * 因此以下代码⽆效<br>*{<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">box-sizing</span>:border-box;<br>}<br><span class="hljs-selector-class">.box</span>{<br>    <br>}<br></code></pre></td></tr></tbody></table></figure><p>选择器</p><table><thead><tr><th>选择器</th><th>样式</th><th>样式</th></tr></thead><tbody><tr><td><code>.class</code></td><td></td><td>类选择器</td></tr><tr><td><code>#id</code></td><td></td><td>id选择器</td></tr><tr><td><code>element</code></td><td>view</td><td>view 组件</td></tr><tr><td><code>element element</code></td><td></td><td></td></tr><tr><td><code>nth-child(n)</code></td><td></td><td>选择某个索引的标签</td></tr><tr><td><code>::after</code></td><td></td><td>后面插入</td></tr><tr><td><code>::before</code></td><td></td><td>前面插入</td></tr></tbody></table><p>⼩程序中使⽤less</p><ul><li>原生小程序 不支持less 其他基于⼩程序的框架⼤体都⽀持，如wepy 、mpvue、taro等。但是仅仅因为⼀个less功能，⽽去引⼊⼀个框架，肯定是不可取的。因此可以⽤以下⽅式来实现<ul><li>安装vscode 插件 easy less</li></ul></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// vscode 设置 </span><br><span class="hljs-attr">"less.compile"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"outExt"</span><span class="hljs-punctuation">:</span><span class="hljs-string">".wxss"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>wxss 模板样式</p><ul><li><p>样式语言 类似css</p></li><li><p>rpx 尺寸单位 微信小程序独有的单位 解决屏适配的尺寸单位  + @import 样式导入</p><ul><li>rpx 不同设备屏幕的大小不一样 为了实现屏幕的自动适配 把所有设备的宽度等分为750份 （屏幕的总宽度为750rpx）相对不同屏幕的单位 等分单位<ul><li>小屏幕，1rpx代表的宽度较小 大屏幕 1rpx代表的宽度较大 (等比例缩小放大)</li></ul></li><li>小程序在不同设备运行是 会走动把rpx的样式单位换算成对应的像素单位来渲染</li><li>rpx vs px  rpx =&gt; px 屏幕宽度/750=px   px =&gt; rpx   750/屏幕宽度=rpx<ul><li>iphone6 屏幕宽度 375px 物理像素点 750个 等分为 750rpx<ul><li>750rpx = 375px = 750 物理像素   1rpx=0.5px(屏幕宽度) = 1物理像素  1px = 2rpx 换算单位</li></ul></li></ul></li></ul></li><li><p><code>@import "common.wxss" 样式导入</code></p></li><li><p>全局样式 app.wxss  全局样式 、  页面.wxss 局部样式 当前页面</p><ul><li>局部样式覆盖全局样式 、局部样式权重大于或等于全局样式的权重时，才会覆盖全局样式</li></ul></li></ul><h3 id="结构WXML"><a href="#结构WXML" class="headerlink" title="结构WXML"></a>结构WXML</h3><p>wxml  小程序 标签语言 构建小程序页面的结构 HTML</p><ul><li>标签名称不同 view text image navigator(a)</li><li>属性节点不同 <code>navigator url="/pages/home/home"</code></li><li>类似Vue中的模板语法<ul><li>数据绑定</li><li>列表绑定</li><li>条件渲染</li></ul></li></ul><table><thead><tr><th>布局组件</th><th>作用</th></tr></thead><tbody><tr><td>view</td><td>相当于div</td></tr><tr><td>scroll-view</td><td>（scroll-x/y 纵向滚动 横向滚动 可滚动的视图区域 常用来实现滚动列表）</td></tr><tr><td>text</td><td>文本标签、只能嵌套text</td></tr><tr><td>image</td><td>图片标签</td></tr><tr><td>swiper</td><td>内置轮播图组件<code>swiper和swiper-item组成</code></td></tr><tr><td>navigator</td><td>类似a链接</td></tr><tr><td>rich-text</td><td>富文本标签 相 v-html</td></tr><tr><td>button</td><td>按钮</td></tr><tr><td>icon</td><td>图标</td></tr><tr><td>radio</td><td>单选</td></tr><tr><td>checkbox</td><td>多选</td></tr><tr><td>map</td><td>地图组件</td></tr><tr><td>canvas</td><td>画布组件</td></tr><tr><td>video</td><td></td></tr></tbody></table><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><ul><li>基础内容<ul><li>text（span） 文本组件 长按选中 view(不行)<ul><li>selectable 长按选中</li></ul></li><li>rich-text 富文本组件 html字符串渲染为wxml结构</li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">nodes</span>=<span class="hljs-string">"&lt;h1 style='color:red'&gt;标签&lt;/h1&gt;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>表单组件<ul><li>button 按钮组件 <code>open-type属性</code><ul><li><code>type="primary/warn" size="mini" plain 镂空 </code></li></ul></li></ul></li><li>导航组件<ul><li>navigator（a） 页面导航组件</li></ul></li><li>媒体组件<ul><li>image（img） 图片组件 默认 300px 高 240px<ul><li><ul><li></li></ul></li></ul></li><li>video</li></ul></li></ul><p>类似div</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">"h-class"</span>&gt;</span>这是一段文本<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>Boolean</td><td>false</td><td>文本是否可选</td></tr><tr><td>decode</td><td>Boolean</td><td>false</td><td>是否解码</td></tr></tbody></table><ul><li>文本标签、只能嵌套text 、⻓按⽂字可以复制（只有该标签有这个功能）、可以对空格 回⻋ 进⾏编码</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">selectable</span>=<span class="hljs-string">"{{false}}"</span> <span class="hljs-attr">decode</span>=<span class="hljs-string">"{{false}}"</span>&gt;</span><br>空<span class="hljs-symbol">&amp;nbsp;</span>格<br><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><ul><li>图片标签，image组件默认宽度320px，高度 240px<ul><li><code>src="/image/" mode 指定裁剪和缩放模式</code><ul><li>mode scaleToFill 默认值 aspectFit 使图片长边能显示 aspectFill使图片短边能显示 widthFix 宽度不变 高度自动变化 heightFix</li></ul></li></ul></li></ul><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th></th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill‘</td><td>图⽚裁剪、缩放的模式</td></tr><tr><td>lazy-load</td><td>Boolean</td><td>false</td><td>图片懒加载</td></tr></tbody></table><p>mode 有效值</p><ul><li>mode 有 13 种模式，其中 4 种是缩放模式，9 种是裁剪模式。</li></ul><table><thead><tr><th>模式</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>缩放</td><td>scaleToFill、aspectFit、aspectFill、widthFix</td><td>不保持纵横⽐缩放图⽚，使图⽚的宽⾼完全拉伸⾄填满 image 元素、<br>保持纵横⽐缩放图⽚，使图⽚的⻓边能完全显⽰出来、<br>保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来、<br>宽度不变，⾼度⾃动变化，保持原图宽⾼⽐不变</td></tr><tr><td>裁剪</td><td>top、bottom 、center、left、right、top left 、top right 、bottom left 、bottom right</td><td>不缩放图⽚，只显⽰图⽚的顶部区域</td></tr></tbody></table><h4 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h4><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>indicator-dots</td><td>Boolean</td><td>false</td><td>是否显示⾯板指⽰点</td></tr><tr><td>indicator-color</td><td>Color</td><td>rgba()</td><td>指⽰点颜⾊</td></tr><tr><td>indicator-active-color</td><td>Color</td><td>#00000</td><td>当前选中的指⽰点颜⾊</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>autoplay</td><td>Boolean</td><td>false</td><td>是否自动切换</td></tr><tr><td>interval</td><td>Number</td><td>5000</td><td>自动切换时间间隔</td></tr><tr><td>circular</td><td>Boolean</td><td>false</td><td>是否循环轮播 是否采用衔接滑动</td></tr></tbody></table><h5 id="swiper-1"><a href="#swiper-1" class="headerlink" title="swiper"></a>swiper</h5><ul><li>滑块视图容器</li></ul><h5 id="swipter-item"><a href="#swipter-item" class="headerlink" title="swipter-item"></a>swipter-item</h5><ul><li>滑块</li><li>默认宽度和⾼度都是100%</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"className"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"idName"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span> <span class="hljs-attr">scroll-x</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span> &lt;/scroll-view<br><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"swiper-container"</span> <span class="hljs-attr">indicator-dots</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h4><ul><li>导航组件，类似超链接a标签</li></ul><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>String</td><td>self</td><td>在哪个目标上发生跳转,默认当前小程序，可选值self/miniProgram</td></tr><tr><td>url</td><td>String</td><td></td><td>当前小程序内的跳转链接</td></tr><tr><td>open-type</td><td>String</td><td>navigate</td><td>跳转方式</td></tr></tbody></table><p>open-type有效值</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>navigate</td><td>保留当前⻚⾯，跳转到应⽤内的某个⻚⾯，但是不能跳到 tabbar ⻚⾯</td></tr><tr><td>redirect</td><td>关闭当前⻚⾯，跳转到应⽤内的某个⻚⾯，但是不允许跳转到 tabbar ⻚⾯。</td></tr><tr><td>switchTab</td><td>跳转到 tabBar ⻚⾯，并关闭其他所有⾮ tabBar ⻚⾯</td></tr><tr><td>reLaunch</td><td>关闭所有⻚⾯，打开到应⽤内的某个⻚⾯</td></tr><tr><td>navigateBack</td><td>关闭当前⻚⾯，返回上⼀⻚⾯或多级⻚⾯。可通过 getCurrentPages() 获取当前的⻚⾯栈，决定需要返回⼏层</td></tr><tr><td>exit</td><td>退出⼩程序，target=miniProgram时⽣效</td></tr></tbody></table><h4 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a>rich-text</h4><ul><li>富文本标签</li></ul><p>可以将字符串解析成对应标签，类似vue中的v-html功能</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">nodes</span>=<span class="hljs-string">"{{nodes}}"</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">"tap"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">nodes</span>=<span class="hljs-string">"&lt;img src="</span><span class="hljs-attr">https:</span>//<span class="hljs-attr">www.baidu.com</span>/&gt;</span>" alt="" /&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span><br>Page({<br>data:{<br>// nodes[{name:'',attrs:{},children:[{}] }]<br>nodes:[{<br>name:'div',<br>attrs:{<br>class:'div-class',<br>style:'line-height:60px;color:red'<br>},<br>children:[{<br>type:'text',<br>text:'Hello Message!!!'<br>}]<br>}]<br>},<br>tap(){<br>console.log('tap')<br>}<br>}}<br></code></pre></td></tr></tbody></table></figure><ul><li>node属性</li></ul><p>nodes属性支持字符串和标签节点数组</p><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>必填</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>标签名 <code>name：’‘</code></td><td>string</td><td>是</td><td>支持部分受信任的HTML节点</td></tr><tr><td>attrs</td><td>属性<code>class:'' style:''</code></td><td>object</td><td>否</td><td>支持部分受信任的属性，遵循 Pascal 命名法</td></tr><tr><td>children</td><td>子节点列表<code>type text</code></td><td>array</td><td>否</td><td>结构和 nodes ⼀致</td></tr></tbody></table><p>文本节点：type=text</p><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>必填</th><th>备注</th></tr></thead><tbody><tr><td>text</td><td>文本</td><td>string</td><td>是</td><td>支持entities</td></tr></tbody></table><ul><li>nodes 不推荐使⽤ String 类型，性能会有所下降。</li><li>rich-text 组件内屏蔽所有节点的事件。</li><li>attrs 属性不⽀持 id ，⽀持 class 。</li><li>name 属性⼤⼩写不敏感。</li><li>如果使⽤了不受信任的 HTML 节点，该节点及其所有⼦节点将会被移除。</li><li>img 标签仅⽀持⽹络图⽚。</li></ul><h4 id="button"><a href="#button" class="headerlink" title="button"></a>button</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>string</td><td>default(默认) 、mini(小)</td><td>否</td><td>按钮的大小</td></tr><tr><td>type</td><td>string</td><td>default(白色)、wam(红色)、primary(绿色)</td><td>否</td><td>按钮的样式类型</td></tr><tr><td>plain</td><td>boolean</td><td>false</td><td>否</td><td>按钮是否镂空，背景⾊透明</td></tr><tr><td>disabled</td><td>boolean</td><td>false</td><td>否</td><td>是否禁用</td></tr><tr><td>loading</td><td>boolean</td><td>false</td><td>否</td><td>名称前是否带loading图标</td></tr><tr><td>form-type</td><td>string</td><td>submit(提交表单)、reset(重置表单)</td><td>否</td><td>⽤于 <code>组件，点击分别会触发</code> 组件的<br>submit/reset 事件</td></tr><tr><td>open-type</td><td>string</td><td></td><td>否</td><td>微信开发能力</td></tr></tbody></table><p>open-type的合法值</p><ul><li>open-type 的 contact 的实现流程</li></ul><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>contact</td><td>打开客服会话，如果⽤⼾在会话中点击消息卡⽚后返回⼩程序，可以从<br>bindcontact 回调中获得具体信息，具体说明</td></tr><tr><td>share</td><td>触发⽤⼾转发，使⽤前建议先阅读使⽤指引</td></tr><tr><td>getPhoneNumber</td><td>获取⽤⼾⼿机号，可以从bindgetphonenumber回调中获取到⽤⼾信息，<br>具体说明</td></tr><tr><td>getUserInfo</td><td>获取⽤⼾信息，可以从bindgetuserinfo回调中获取到⽤⼾信息</td></tr><tr><td>launchApp</td><td>打开APP，可以通过app-parameter属性设定向APP传的参数具体说明</td></tr><tr><td>openSetting</td><td>打开授权设置⻚</td></tr><tr><td>feedback</td><td>打开“意⻅反馈”⻚⾯，⽤⼾可提交反馈内容并上传⽇志，开发者可以登<br>录⼩程序管理后台后进⼊左侧菜单“客服反馈”⻚⾯获取到反馈内容</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"{{defaultSize}}"</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">"{{loading}}"</span> <span class="hljs-attr">plain</span>=<span class="hljs-string">"{plain}"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h4><ul><li>图标</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>string</td><td></td><td>是</td><td>icon的类型，有效值：success, success_no_circle,<br>info, warn, waiting, cancel, download, search,<br>clear</td></tr><tr><td>size</td><td>numberstring</td><td>23</td><td>否</td><td>icon的大小</td></tr><tr><td>color</td><td>string</td><td></td><td>否</td><td>icon的颜色，同css的color</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{iconSize}}"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"{{item}}"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{iconType}}"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"{{item}}"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"40"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{iconColor}}"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"40"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"{{item}}"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>Page({<br>    data: {<br>        iconSize: [20, 30, 40, 50, 60, 70],<br>        iconType: [<br>        'success', 'success_no_circle', 'info', 'warn', 'waiting', 'cancel',<br>        'download', 'search', 'clear'<br>        ],<br>        iconColor: [<br>        'red', 'orange', 'yellow', 'green', 'rgb(0,255,255)', 'blue', 'purple'<br>        ],<br>    }<br>})<br></code></pre></td></tr></tbody></table></figure><h4 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h4><p>单选按钮</p><ul><li>radio-group</li><li>radio</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">radio-group</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">radio</span>&gt;</span>选中<span class="hljs-tag">&lt;/<span class="hljs-name">radio</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">radio</span>&gt;</span>没有选中<span class="hljs-tag">&lt;/<span class="hljs-name">radio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">radio-group</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h4><ul><li>checkbox-group</li><li>checkbox</li></ul><p>多选按钮</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox-group</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">checkbox-group</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>模板与配置</p><p>wxml 模板语法</p><ul><li>数据绑定 data定义数据 <code>Page({ data:{ info:"messageInfo",arr:[{},{}] } })</code> wxml使用数据 双大括号 <code>{{ info }}</code> 插值表达式<ul><li>插值表达式：动态绑定内容 <code>{{ info }}</code> 动态绑定属性 <code>&lt;image src="{{imgSrc}}"&gt;</code>  运算（三元表达式、算术表达式）<code>{{ 100 + 200/ ? : }}</code></li></ul></li></ul><p>事件：事件时渲染层到逻辑层的通信方式 通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理</p><ul><li>常用事件 tap(手指触摸马上离开click)/bindtap/bind:tap input/bindinput/bind:input change/bindchange/bind:change<ul><li><code>bind*/bind:* </code> 绑定方式</li></ul></li><li>事件对象的属性 type 事件类型 timeStamp 页面打开触发事件所经过的毫秒数  target 触发事件的组件的一些属性值集合 currenTarget 当前组件的属性值集合 detail 额外的信息 touches changedTouches<ul><li>target vs currentTarget: target 触发该事件的源头组件 currentTarget 当前事件所绑定的组件（当前触发事件的组件）</li></ul></li><li><code>wxml bingtap="bindTapHandler" 绑定tap触摸事件</code> js <code>形参 event (e) 接收 bindTapHandler(e){ }</code></li><li>事件传参 不能一边绑定事件的同时为事件处理函数传递参数  <code>data-* 自定义属性传参 *代表的是参数的名字  &lt;button data-info="{{100}}"&gt; info 参数名字 100 参数的值</code> <code>获取事件参数 e.target.dataset.参数名</code></li><li>bindinput input事件响应文本框的输入事件 <code>&lt;input bindinput="inputHandler"&gt;&lt;/input&gt; 获取input事件的值 e.detail.value</code></li><li>input和data数据同步 <code>data:{ str:"Message" } this.setData({ str:e.detail.value })</code></li></ul><p>data 数据重新赋值</p><ul><li>this.setData(dataObject) 页面data中的数据重新赋值 <code>changeCount(){  this.setData({ num: this.data.num + 100  })  }</code></li></ul><p>w-if 条件渲染 vs hidden</p><ul><li><code>wx:if="{{ condition }} / true or false"</code> 判断是否渲染该代码块</li><li><code>wx:if={{ type = 1 }}  wx:elif={{ type = 1 }} wx:else</code> wx-if wx:elif wx-else</li><li><code>结合&lt;block&gt;使用wx-if &lt;block wx-if="{{ }}"&gt; &lt;/block&gt;</code> 一次性控制多个组件的展示和隐藏 block 将多个组件包装起来 没有任何效果 并不是一个组件 包裹性质的容器 不会在页面中做任何渲染</li><li>hidden  <code>hidden="{{ condition }} // true or false"</code> 控制元素的显示和隐藏</li><li>区别 wx-if 动态创建和移除元素的方式 控制条件复杂 切换效率高   hidden 切换样式（display:none/block）频繁切换使用 渲染效率高</li></ul><p>wx-for 列表渲染 可以根据指定的数组，循环渲染重复的组件结构</p><ul><li><code> wx-for={{array}} {{index}} 索引 {{item}} 当前循环项</code> 两个默认值</li><li>手动指定索引和当前项的变量名 重命名索引和Item项 （不常用）<ul><li>wx-for-index=“idx” 可以指定当前循环项的索引的变量名</li><li>wx-for-item=“itm” 可以指定当前项的变量名</li></ul></li><li>wx:key <code> wx:key="id"/"index"  id是数组的一个键名</code> 渲染出来的列表项指定唯一的key值 从而提高渲染效率 <code>vue中 :key="id"</code></li></ul><h3 id="过滤器WXS"><a href="#过滤器WXS" class="headerlink" title="过滤器WXS"></a>过滤器WXS</h3><p>WXS(WeiXin Script) <code>过滤器使用</code> 配合 Mustache 语法 <code>{{ }}</code> 使用</p><ul><li><p>是小程序独有的一套脚本语言 与WXML可以构建出页面的结构</p></li><li><p>WXML 无法调用页面js中的函数  WXML 可以调用WXS中定义的函数</p></li><li><p>作用: WXS的使用场景:过滤器</p></li><li><p>WXS vs JS 完全不同的两种语言</p><ul><li>WXS有自已的数据类型 number string boolean object function array date regexp</li><li>WXS不支持类似ES6及以上语法 不支持 let const 解构赋值 展开运算符 箭头函数 对象属性简写 支持 var function等</li><li>WXS遵循CommonJS规范 module requeire() module.exports对象</li></ul></li><li><p><code>&lt;wxs&gt;&lt;/wxs&gt;</code> 类似<code>&lt;script&gt;</code>标签 必须提供module属性 指定当前wxs的模块名称 方便在wxml中访问模块中的成员</p></li><li><p>外联wxs脚本 <code>.wxs</code>后缀名的文件内  module 模块名称 src 相对路径</p></li><li><p>隔离性 不能调用js函数和小程序的API</p></li><li><p>性能好 IOS设备上 WXS比JS快 2~20倍 Android没有差异</p></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html">// 内联<span class="hljs-tag">&lt;<span class="hljs-name">wxs</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{ m1.toUpper(username) }}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">module</span>=<span class="hljs-string">"m1"</span>&gt;</span> // module.方法()<br>module.exports.toUpper = function(str){<br>  return str.toUpperCase()<br>  }<br><span class="hljs-tag">&lt;/<span class="hljs-name">wxs</span>&gt;</span><br>  <br>  module.exports.splitPhone = function(str){<br>    if(str.length !== 11) return str<br>    var arr = str.split('')<br>    arr.splice(3,0,'-')<br>    arr.splice(8,0,'-')<br>    return arr.join('')<br>  }<br><br>// 外联wxs文件 tools.wxs<br>function toLower(str){<br>return str.toUpperCase()<br>}<br><br>module.exports = {<br>toLower: toLower<br>}<br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{ m2.toLower(username) }}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">module</span>=<span class="hljs-string">"m2"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../../tool.wxs"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wxs</span>&gt;</span>  <br></code></pre></td></tr></tbody></table></figure><p>API</p><ul><li>小程序API是宿主环境提供的 调用微信提供的能力 获取用户信息 本地存储 支付功能</li><li>小程序的3大分类<ul><li>事件监听 API <code>以on开头，用来监听某些事件的触发</code><ul><li><code>wx.onWindowResize(function callback) 监听窗户尺寸变化的事件</code></li></ul></li><li>同步 API <code>以Sync结尾的API</code> 都是同步API  同步API的执行结果 可以通过函数返回值直接获取<ul><li><code>wx.setStorageSync("key","vaklue") 向本地存储写入内容</code></li></ul></li><li>异步 API 类似jquery中国的$.ajax(option)函数 需要通过 success fail complete 接受调用<ul><li><code>wx.require() 发起网络请求 success 回调函数接受数据</code></li></ul></li></ul></li></ul><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><ul><li>小程序通过自定义组件的方式构建页面</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>({<br><span class="hljs-string">"pages"</span>:[ <span class="hljs-comment">// ⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序⻚⾯定义在哪个⽬录。</span><br>        <span class="hljs-string">"pages/index/index"</span>, <span class="hljs-comment">// 页面index</span><br>        <span class="hljs-string">"pages/logs/logs"</span><br>    ]<br>})<br></code></pre></td></tr></tbody></table></figure><h4 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h4><p>一个自定义组件(类似页面)由json,wxml ,wxss,js 4 个文件组成</p><p>声明组件 Component 4步曲</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// newComponent.json </span><br><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"component"</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// newComponent.wxml </span><br>&lt;view <span class="hljs-keyword">class</span>=<span class="hljs-string">"inner"</span>&gt;<br>{{innerText}}<br>&lt;slot&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">// newComponent<span class="hljs-selector-class">.wcss</span><br>// 不应该使用ID、属性、标签名选择器<br><span class="hljs-selector-class">.inner</span>{<br><span class="hljs-attribute">color</span>:red;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// newComponent.js 注册组件</span><br><span class="hljs-title class_">Component</span>({<br><span class="hljs-attr">properties</span>:{<br>        <span class="hljs-comment">// 这里定义了innerText属性，属性值可以在组件使用时指定</span><br><span class="hljs-attr">innerText</span>:{<br>   <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>           <span class="hljs-attr">value</span>:<span class="hljs-string">'defalut value'</span><br>},<br>        <span class="hljs-comment">// 组件内部数据</span><br>        data{<br>        <span class="hljs-attr">someData</span>:{}<br>    },<br>        <span class="hljs-comment">// 自定义方法  </span><br>        <span class="hljs-attr">methods</span>:{<br>          <span class="hljs-attr">customMethod</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}<br>        }  <br>}<br>})<br></code></pre></td></tr></tbody></table></figure><h4 id="页面引入自定义组件"><a href="#页面引入自定义组件" class="headerlink" title="页面引入自定义组件"></a>页面引入自定义组件</h4><ul><li>页面引入元素</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// index.json</span><br><span class="hljs-punctuation">{</span><br><span class="hljs-string">"usingComponents"</span>：<span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"my-header"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"/components/myHeader/myHeader"</span> <br><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h4 id="页面中使用自定义组件"><a href="#页面中使用自定义组件" class="headerlink" title="页面中使用自定义组件"></a>页面中使用自定义组件</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-header</span> <span class="hljs-attr">inner-text</span>=<span class="hljs-string">"Some text"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>用来替代slot的<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">my-header</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="定义段与⽰例⽅法"><a href="#定义段与⽰例⽅法" class="headerlink" title="定义段与⽰例⽅法"></a>定义段与⽰例⽅法</h4><p><code>Component</code>构造器可用于定义组件，调用Component 构造器时可以指定组件的属性、数据、方法等</p><h4 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h4><ul><li>父传子</li><li>子传父</li><li>子传子</li></ul><h4 id="组件-⾃定义组件传参"><a href="#组件-⾃定义组件传参" class="headerlink" title="组件-⾃定义组件传参"></a>组件-⾃定义组件传参</h4><ul><li>父组件 ==&gt; 通过属性的方法 ==&gt; 子组件 传递参数</li><li>子组件==&gt; 通过事件的方式 ==&gt; 父组件 传递参数</li></ul><p>父组件传递给子组件</p><ul><li>通过属性的方法 </li><li>父组件 中的 data 传递给 子组件<ul><li>父组件 <code>tabItems="{{tabs}}"</code> tabs 是data 中的数据</li><li>子组件 <code>tabItems</code> 接收数据</li></ul></li></ul><p>子组件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tabs"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_title"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"{{tabItems}}"</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">"{{item}}"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">"handleItemActive"</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">"{{index}}"</span>&gt;</span>{{item.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_content"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br>Component({<br>properties:{<br>tabItems:{<br>  type:Array<br>    value:[]<br>}<br>},<br>// 组件的初始数据<br>data:{<br><br>},<br>methods:{<br>handleItemActive(e){<br>this.triggerEvent('mytap','haha')<br>}<br>}<br>})<br><br></code></pre></td></tr></tbody></table></figure><p>父组件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tabs</span> <span class="hljs-attr">tabItem</span>=<span class="hljs-string">"{{tabs}}"</span> <span class="hljs-attr">bindmytap</span>=<span class="hljs-string">"onMytab"</span>&gt;</span><br>  内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">tabs</span>&gt;</span><br><br>data:{<br>tabs:[<br> { name:"体验问题" },<br>{name:"商品、商家投诉"}<br>],<br>    onMyTab(e){<br>    console.log(e.detail);<br>    },<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>标签名 是 中划线的⽅式</li><li>属性的⽅式 也是要中划线的⽅式</li><li>其他情况可以使⽤驼峰命名<ol><li>组件的⽂件名如 myHeader.js的等</li><li>组件内的要接收的属性名 如 innerText</li></ol></li></ul><p>自定义小程序组件 </p><ul><li>components/test目录 test文件</li><li>引用组件<ul><li>局部引用:组件只能在当前被引用的页面内使用  特定页面中用到<ul><li>.json  Page({ })<code>“usingComponents:{ "my-test":"/componets/test/test" }” </code></li><li><code>&lt;my-test&gt;&lt;/my-test&gt;</code></li></ul></li><li>全局引用:组件可以在每个小程序页面中使用 多个页面中经常用到<ul><li>app.json  App({ })<code>“usingComponents:{ "my-test":"/componets/test/test" }”</code></li></ul></li></ul></li><li>组件 vs 页面<ul><li>组件 .json 需要声明<code>“component”:true</code>属性 .js文件调用 <code>Component({})</code>函数  组件的事件处理函数需要定义到methods节点中<ul><li>data:{}\methods:{}</li></ul></li><li>页面 <code>Page({})</code>函数</li></ul></li><li>自定义组件样式 <ul><li>组件之间的样式相互不会影响 防止外界的样式影响组件内部的样式 防止组件的样式被外界样式破坏</li><li>app.wxss的全局样式对组件的样式无效</li><li>只有class选择器有样式隔离效果,<code>id 属性 标签</code>选择器不受样式隔离的影响(组件和引用组件的页面建议使用class,不要使用id\属性\标签)</li><li>修改组件的样式隔离选项<ul><li>默认 自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题 </li><li>外界能够控制组件内部的样式 可以通过 styleIsolation 修改组件的样式隔离选项 可选值 isolated 样式隔离 apply-shared 页面样式影响自定义组件(组件不影响页面)  shared (双向影响)<ul><li>.js <code>Component({ options:{ styleIsolation:"isolated" } })</code></li><li>.json <code>“styleIsolation:"isolated"”</code></li></ul></li></ul></li></ul></li><li>自定义组件 数据(data:{}) 方法(method:{}) 属性(properties:{}) 数据监听器(observers:{})  .js<ul><li>数据 data:{} 组件模块渲染和私有数据 定义data节点  <code>Component({  data:{ count:100 } })</code><ul><li>获取data <code>this.data.xxx</code></li><li>设置setData  <code>this.setData({ count:this.data.xxx })</code></li></ul></li><li>方法 methods:{}  <code>Component({ methods:{  addCount(){ }  } })</code><ul><li>下划线开头<code>_showCount(){}</code> 自定义方法建议以<code>_开头</code>  addCount(){} 事件处理函数</li></ul></li><li>属性(页面传递参数到组件) properties:{} 组件的对外属性 <code>用来接受外界传递到组件中的数据</code><ul><li><code>&lt;my-test max="100"&gt;&lt;/my-test&gt;</code> 传递参数 页面.wxml</li><li><code>Component({  properties:{ max:{ type:Number //属性值的数据类型 ,value:100 //默认值 }  //完整定义属性的方式(有默认值)   ,max:Number //简化定义属性(不需要默认值)  } }) </code> 接受参数 组件.js<ul><li>获取属性 <code>this.properties.xxx</code></li><li>setData 修改 properties的值  <code>this.setData({ count:this.data.xxx,max:this.properties.xxx })</code></li></ul></li></ul></li><li>数据监听器(变化的值) <code>observers:{ }</code> 用于监听和响应任何属性和数据字段的变化,从而执行特定的操作 类似 watch 侦听器 <ul><li>监听数据字段的变化 <code>Component({ observers:{ "字段A,字段B":function(字段A的新值,字段B的新值){}  }  })</code></li><li>监听对象属性的变化 数据监听器支持监听对象中的单个或多个属性的变化 <code>observers:{ '对象.属性A,对象.属性B':function(属性A的新值,属性B的新值){} }</code><ul><li>触发监听器:属性A赋值 使用setData this.data.对象.属性A 属性B赋值 this.data.对象.属性B 直接为对象赋值 this.data.对象</li><li><code>this.setData({'rgb.a':this.data.rgb.r + 5 &gt; 255 ? this.data.rgb.r + 5})</code> rgb.a 对象上的a值</li><li>对象监听的属性太多 可以使用通配符 <code>**</code> 来监听对象中所有属性的变化 <code>"obj.**":function(obj){ obj.x obj.y obj.z }</code></li></ul></li></ul></li><li>纯数据字段:那些不用于界面渲染的data字段(只在组件内使用) 提升页面更新的性能 页面中没有用到的都可以使用纯数据字段<ul><li>应用场景 data中的字段既不会展示在界面上 也不会传递给其他组件 只在组件内部使用 带有这种特性的data字段适合被设置为纯数据字段</li><li>使用规则 <code>Component({ options:{ pureDataPattern:/^_/ } })</code> 指定所有<code>_</code>开头的数据字段都是纯数据字段</li></ul></li><li>data vs properties<ul><li>用法相同,都是可读可写</li><li>data 存储组件的<code>私有数据</code></li><li>properties 存储外界存储到组件中的数据 <code>外界传递的数据</code></li></ul></li><li>组件的生命周期 lifetimes:{ … }<ul><li>created 创建 attached 进入页面节点树时执行 ready 视图层完成后执行 moved 被移动到节点树另一位置时执行  detached 从页面节点树移除是执行 error Object Error 组件方法抛出错误时执行</li><li>主要生命周期 <ul><li>created 刚被创建好的时候 不能调用setData 只能给组件的this添加一些自定义的属性字段</li><li>attached 组件完全初始化完毕、进入页面节点树后　this.data 被初始化 绝大多数的attached 会在这个时机执行(例如发请求获取初始数据)</li><li>detahced 离开页面节点树后 生命周期函数会被触发</li></ul></li><li>lifetimes节点<ul><li>小程序组件中，生命周期函数可以直接定义在Component构造器的第一级参数中，lifetimes字段进行声明</li><li>新<code>Component({  lifetimes:{ created(){},attached(){ } } })</code><ul><li>旧 不推荐使用 <code>Component({ created(){}, })</code> 同时存在新覆盖旧的</li></ul></li></ul></li></ul></li></ul></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">data n1 n2 sum  rgb<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span> r<span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span>g<span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">:</span><span class="hljs-number">0</span> <span class="hljs-punctuation">}</span><br>observers<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"n1,n2"</span><span class="hljs-punctuation">:</span>function(new1<span class="hljs-punctuation">,</span>new2)<span class="hljs-punctuation">{</span>  <span class="hljs-comment">// 监听字段 新值 / 旧值</span><br>    this.setData(<span class="hljs-punctuation">{</span> sum<span class="hljs-punctuation">:</span> new1+new2 <span class="hljs-punctuation">}</span>)<br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"rgb.r,rgb.g,rgb.b"</span><span class="hljs-punctuation">:</span>function(r<span class="hljs-punctuation">,</span>g<span class="hljs-punctuation">,</span>b)<span class="hljs-punctuation">{</span>  <span class="hljs-comment">// 监听字段 新值 / 旧值</span><br>    this.setData(<span class="hljs-punctuation">{</span> color<span class="hljs-punctuation">:</span>`$<span class="hljs-punctuation">{</span>r<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>$<span class="hljs-punctuation">{</span>g<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>$<span class="hljs-punctuation">{</span>b<span class="hljs-punctuation">}</span>` <span class="hljs-punctuation">}</span>)<br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"rgb.**"</span><span class="hljs-punctuation">:</span>function(obj)<span class="hljs-punctuation">{</span><br>    this.setData(<span class="hljs-punctuation">{</span> color<span class="hljs-punctuation">:</span>`$<span class="hljs-punctuation">{</span>obj.r<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>$<span class="hljs-punctuation">{</span>obj.g<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>$<span class="hljs-punctuation">{</span>obj.b<span class="hljs-punctuation">}</span>` <span class="hljs-punctuation">}</span>)<br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br><br>Component(<span class="hljs-punctuation">{</span> <br>  options<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span> pureDataPattern<span class="hljs-punctuation">:</span>/^_/ <span class="hljs-punctuation">}</span> <br>data<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>  a<span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 普通数据字段</span><br>    _b<span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 纯数据字段</span><br>  _rgb<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br>   r<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  g<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  b<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li>组件(Component)所在页面(Page)的生命周期 自定义组件的行为依赖于页面状态的变化 需要用到组件所在页面的生命周期 组件儿子监听页面爸爸的变化<ul><li>组件访问页面中生命周期(组件使用页面中的生命周期)： 一个页面可以有多个组件 组件只是页面中的一部分 </li><li>3个组件所在页面的生命周期<ul><li>show 组件所在页面被展示时执行</li><li>hide  隐藏</li><li>resize  尺寸变化</li></ul></li><li><code>pageLifetimes 节点</code> 组件所有页面的生命周期函数 需要定义在pageLifetimes节点中<ul><li><code>Component({ pageLifetimes:{ show(){},hide(){},resize(){} } })</code></li></ul></li></ul></li><li>插槽 在自定义组件的wxml结构中，可以提供一个<code>&lt;slot&gt;</code>节点（插槽） 用于承载组件使用者提供的wxml结构 实现不同页面共用一个组件 页面上不同的内容通过插槽动态渲染不同的<ul><li><code>&lt;slot&gt;&lt;/slot&gt;</code> 作为组件的封装者 在封装组件时 通过slot提供内容的 <code>占位符</code> <ul><li>具体渲染 <code>&lt;view&gt;&lt;/view&gt; &lt;text&gt;&lt;/text&gt;</code> 作为组件的 <code>使用者渲染具体节点</code> 在使用组件时 为<code>&lt;slot&gt;</code>占位符提供具体的内容节点</li></ul></li><li>单个插槽  默认每个自定义组件只允许使用一个<code>&lt;slot&gt;</code> 进行占位 单个插槽</li><li>多个插槽 name/slot  使用多个<code>&lt;slot&gt;&lt;/slot&gt;</code> 在组件中<code>.js</code>启用 <code>Component({ option:{ multipleSlots:true }  })</code> 组件定义时的选项中启用多个slot支持  name 与 slot<ul><li>定义多个插槽 .wxml中使用多个<code>&lt;slot name="xxx"&gt;</code>标签以 不同``name`区分不同插槽</li><li>使用多个插槽 使用带有多个插槽的自定义组件 <code>slot=“xxx”</code> 来将节点插入到不同的<code>&lt;slot&gt;</code>中</li></ul></li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">Component({ options:{ multipleSlots:true }  })<br><br>组件文件<br>// 组件封装者 中使用<span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>组件内部节点<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span> // 不确定的内容 占位符 单个插槽<br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"before"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"after"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br>页面文件<br>// 组件使用者 使用<br><span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span>&gt;</span>  //   component-tag-name 组件名字 usingComponents:{ "my-test":"/componets/test/test" } 注册组件<br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>插入到slot中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span>  // 发到slot上的内容<br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"before"</span>&gt;</span>TESTEETEE<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"after"</span>&gt;</span>TESTEETEE<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">component-tag-name</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>父子组件之前的通信（3种）<ul><li>属性绑定 <code>properties:{}</code> 父组件 =&gt; 子组件 指定属性设置数据  只能传递普通类型的数据 不能传递方法 仅能设置JSON兼容的数据 </li><li>事件绑定 子组件 =&gt; 父组件 可以传递任意类型数据<ul><li>父组件 父方法(e) e.detail.value  bind:子方法=”父方法”</li><li>子组件 this.triggerEvent</li></ul></li><li>获取子组件实例  子 =&gt; 父组件 父组件获取子组件实例<ul><li>父组件 this.selectComponent(// id或class选择器) 获取子组件实例对象 可以直接访问子组件的任意数据和方法 不能用标签选择器</li></ul></li><li>按钮 tap 事件的处理函数  传递参数 bindTap=“btnHandler” data-step=“1”  btnHandler(e){ e.target.dataset.step } // step属性</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 属性绑定 父 子</span><br><span class="hljs-comment">// 父</span><br>data <span class="hljs-attr">count</span>:<span class="hljs-number">100</span><br>&lt;my-test count=<span class="hljs-string">"{{ count }}"</span>&gt;&lt;/my-test&gt;<br><span class="hljs-comment">// 子 properties节点 声明对应属性并应用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>{{ count }}<span class="hljs-tag">&lt;/<span class="hljs-name">viewv</span>&gt;</span></span><br>properties：{<br><span class="hljs-attr">count</span>:<span class="hljs-title class_">Number</span> <span class="hljs-comment">// 声明类型</span><br>}<br><span class="hljs-comment">// 事件绑定 子 父</span><br><span class="hljs-comment">// 父</span><br><br>父组件.<span class="hljs-property">js</span>  父.<span class="hljs-property">js</span> e.<span class="hljs-property">detail</span> 获取子组件传递过来的数据 <br><span class="hljs-title function_">syncCount</span>(<span class="hljs-params">e</span>){<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">count</span>:e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>})<br>}<br>父.<span class="hljs-property">wxml</span> 自定义事件 bindSync/<span class="hljs-attr">bind</span>:sync<br>&lt;my-test <span class="hljs-attr">bind</span>:sync=<span class="hljs-string">"syncCount"</span>&gt;&lt;<span class="hljs-regexp">/my-test&gt; /</span><span class="hljs-regexp">/ bindSync bind:子=“父” /</span><span class="hljs-regexp">/ sync 子   syncCount 父</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">子组件.js this.triggerEvent("自定义事件名称",{ 参数对象 }) 将数据发送给对象</span><br><span class="hljs-regexp">methods:{</span><br><span class="hljs-regexp">add(){</span><br><span class="hljs-regexp">this.triggerEvent("sync",{ value:1000 })</span><br><span class="hljs-regexp">}</span><br><span class="hljs-regexp">}</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">获取实例</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 父</span><br><span class="hljs-regexp">&lt;my-test class="child"&gt;&lt;/my</span>-test&gt;<br><br><span class="hljs-title function_">getChild</span>(<span class="hljs-params"></span>){<br>   <span class="hljs-keyword">const</span> child =  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectComponent</span>(<span class="hljs-string">".child"</span>)<br>   child.<span class="hljs-title function_">setData</span>({ <span class="hljs-attr">count</span>: child.<span class="hljs-property">count</span> + <span class="hljs-number">1</span> })<br>   child.<span class="hljs-property">data</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>自定义组件中的behaviors  小程序中 用于实现<code>组件代码间共享</code>的特性 类型vue的 mixins  <code>组件中公共的代码behavior</code><ul><li>每个behavior可以包含一组属性、数据、生命周期函数和方法。组件引用它时，它的属性、数据和方法会被合并到组件中</li><li>每个组件中可以引用多个behavior，behavior也可以应用其他behavior</li><li>创建behavior <code>Behavior(Object object)</code>方法创建一个 <code>共享的behavior实例对象</code> 供所有的组件使用</li><li>导入并使用 require() 方法 导入需要的behavior 挂载后即可访问behavior中的数据和方法</li><li>所有可用节点 properties data methods behaviors created attached ready moved detached</li><li>同名字段的覆盖和组合规则 组件和它引用的behavior中可以包含同名的字段 <ul><li>同名 data 、properties 、methods</li></ul></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">/bbehavior/my-behavior.<span class="hljs-property">js</span><br><span class="hljs-comment">// 创建behavior</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Behavior</span>({<br>  <span class="hljs-attr">properties</span>:{}, <span class="hljs-comment">//属性节点</span><br>  <span class="hljs-attr">data</span>:{ <span class="hljs-attr">usename</span>:<span class="hljs-string">"zs"</span> },<br>  <span class="hljs-attr">methods</span>:{}<br>})<br><br><span class="hljs-comment">// 组件.js 导入使用</span><br><span class="hljs-keyword">const</span> myBahavior = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../../behaviors/my-behavior"</span>)<br><br><span class="hljs-title class_">Component</span>({<br>  <span class="hljs-attr">behaviors</span>:[myBehavior]<br>})<br></code></pre></td></tr></tbody></table></figure><p>使用npm包</p><ul><li>不支持 node内置库包 浏览器内置对象包（jquery） C++插件包(加密的包)</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>生命周期 是指一个对象从创建-&gt;运行-&gt;销毁的整个阶段 ，强调的是一个时间段<ul><li>小程序的启动 生命周期的开始 小程序的关闭 生命周期的结束</li></ul></li></ul><p>生命周期(时间段)</p><p>- </p><p>生命周期函数(时间点)</p><ul><li>概念：由小程序框架提供的内置函数，会伴随生命周期，自动按次序执行 </li><li>作用：允许在特定的时间点，执行某些特定的操作</li></ul><p>应用生命周期函数 App({ }) app.js ==Launch Show Hide==</p><ul><li><code>onLaunch(){}</code> 初始化完成 只初始化一次</li><li><code>onShow(option){ }</code> 启动或从后台进入前台显示</li><li><code>onHide(){}</code> 前台进入后台时</li></ul><p> 页面生命周期函数 Page({ }} page.js  ==Load Show Ready Hide Unload==</p><ul><li><code>onLoad(){ }</code> 页面加载 一个页面只调用一次</li><li><code>onShow(){ }</code> 显示</li><li><code>onReady(){ }</code> 页面初次渲染完成 一个页面只调用一次</li><li><code>onHide(){ }</code> 隐藏</li><li><code>onUnload(){ }</code> 卸载 一个页面只调用一次</li></ul><p>生命周期分为应用生命周期和页面生命周期</p><p>生命周期分类</p><ul><li>应用生命周期 小程序 启动 -&gt; 运行(包含各个页面的生命周期) -&gt; 销毁 的过程 范围大</li><li>页面生命周期 页面 加载 -&gt; 渲染 -&gt; 销毁 的过程  范围小</li></ul><h4 id="应用生命周期-5个"><a href="#应用生命周期-5个" class="headerlink" title="应用生命周期 5个"></a>应用生命周期 5个</h4><p>5个应用生命周期：onLaunch(初始化)、onshow(启动或切前台)、onHide(切后台)、onError(错误监听)、onPageNotFound(不存在监听函数) </p><table><thead><tr><th>属性</th><th>类型</th><th>默认</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>function</td><td></td><td></td><td>监听⼩程序初始化</td></tr><tr><td>onShow</td><td>function</td><td></td><td></td><td>监听⼩程序启动或切前台</td></tr><tr><td>onHide</td><td>function</td><td></td><td></td><td>监听⼩程序切后台</td></tr><tr><td>onError</td><td>function</td><td></td><td></td><td>错误监听函数</td></tr><tr><td>onPageNotFound</td><td>function</td><td></td><td></td><td>页面不存在监听函数</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.js 应用生命周期</span><br><span class="hljs-title class_">App</span>({<br>    <span class="hljs-attr">data</span>:{},<br>    <span class="hljs-title function_">onLaunch</span>(<span class="hljs-params"></span>){},<br><span class="hljs-title function_">onShow</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">onHide</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">onError</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-title function_">onPageNotFound</span>(<span class="hljs-params"></span>){}<br>})<br><br><span class="hljs-title class_">App</span>({<br>    <span class="hljs-attr">data</span>:{}<br>    <span class="hljs-attr">onLaunch</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){},<br><span class="hljs-attr">onShow</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onHide</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onError</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onPageNotFound</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){}<br>})<br></code></pre></td></tr></tbody></table></figure><h4 id="页面生命周期-12个"><a href="#页面生命周期-12个" class="headerlink" title="页面生命周期 12个"></a>页面生命周期 12个</h4><p> 12个页面生命周期：</p><ul><li>data(初始化数据)、onLoad(页面加载)、onShow(页面显示)、onReady(初次渲染)、onHide(页面隐藏)、onUnload(页面卸载)</li><li>onPullDownRefresh(上拉动作)、onReachBottom(上拉触底事件)、onShareAppMessage(右上角转发)、onPageScroll(滚动触发事件的处理函数)、onResize(页面存储触发、响应显示区域变化)、onTabitemTap(tab页)</li></ul><p><img src="/%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80.jpg" alt="微信小程序-基础"></p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object</td><td>页面的<code>初始数据</code></td></tr><tr><td>onLoad</td><td>funciton</td><td>生命周期回调-监听页面<code>加载</code></td></tr><tr><td>onShow</td><td>function</td><td>生命周期回调-监听页面<code>显示</code></td></tr><tr><td>onReady</td><td>function</td><td>生命周期回调-监听页面<code>初次渲染完成</code></td></tr><tr><td>onHide</td><td>function</td><td>生命周期回调-监听页面<code>隐藏</code></td></tr><tr><td>onUnload</td><td>function</td><td>生命周期回调-监听页面<code>卸载</code></td></tr><tr><td>onPullDownRefresh</td><td>function</td><td>监听用户<code>上拉动作</code></td></tr><tr><td>onReachBottom</td><td>function</td><td>页面<code>上拉触底事件</code>的处理函数</td></tr><tr><td>onShareAppMessage</td><td>function</td><td>用户点击右上角<code>转发</code></td></tr><tr><td>onPageScroll</td><td>function</td><td>页面<code>滚动</code>触发事件的处理函数</td></tr><tr><td>onResize</td><td>function</td><td>页面<code>尺寸改变</code>时触发，详见响应显示区域变化</td></tr><tr><td>onTabitemTap</td><td>function</td><td>当前是<code>tab页</code>，点击tab 时触发</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.js 页面生命周期</span><br><span class="hljs-title class_">Page</span>({<br>    <span class="hljs-attr">data</span>:{},<br>   <span class="hljs-attr">onLoad</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>){},<br>    <span class="hljs-attr">onReady</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onShow</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onHide</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onUnload</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){},<br>    <span class="hljs-attr">onPullDownRefresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {},<br>    <span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {},<br>    <span class="hljs-attr">onShareAppMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {},<br>    <span class="hljs-attr">onPageScroll</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {}, <br>    <span class="hljs-attr">onResize</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {}, <br>    <span class="hljs-attr">onTabitemTap</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {},          <br>})<br></code></pre></td></tr></tbody></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>视图与逻辑</p><ul><li><p>页面导航（跳转）指的是页面之间的相互跳转  浏览器实现页面跳转的方式：a location.href</p><ul><li><p>小程序中实现页面导航的两种方式</p><ul><li>声明式导航 wxml 在页面上声明<code>&lt;navigation&gt; </code> 导航组件 点击实现页面跳转<ul><li>导航到tabBar页面 <code>&lt;navigation url="/pages/message/message" open-type="switchTab"&gt;导航&lt;/navigator&gt;</code>  url 页面地址 open-type 跳转方式 (switchTab/navigator(可以省略) )</li><li>后退导航 <code>&lt;navigator open-type="navigatorBack" delta="1"&gt;&lt;/navigator&gt;</code> navigatorBack 后退导航 delta 数字 厚涂层级  上一个页面 delta 可以省略</li></ul></li><li>编程式导航 js 小程序的导航API<ul><li>导航到tabBar <code>wx.switchTab(Object.object)</code> Object参数对象 url success fail complete<ul><li><code>goTo(){ wx.switchTab({ url:"/pages/message/message" }) }</code></li></ul></li><li>非tabBar页面 <code>wx.navigatorTo(Object.object)</code> Object url sucess fail complete</li><li>后退导航 <code>wx.navigatorBack(Object.object)</code> Object data( number  默认1 回退页面数) sucess fail complete<ul><li><code>wx.navigatorBack()</code></li></ul></li></ul></li></ul></li><li><p>导航传参</p><ul><li><p>声明式导航传参</p><ul><li><code>&lt;navigator url="/page/info/info?name=zs&amp;age=20"&gt; 跳转到页面</code> url路径后面可以携带参数 <code>参数 路径 ?参数键 参数值 = 不同参数 &amp;</code></li></ul></li><li><p>编程式导航传参<code>wx.navigateTo(Object object)</code> 方法跳转页面 可以携带参数</p><ul><li><code>wx.navigateTo({ url:"/page/info/info?name=zs&amp;age=20" })</code></li></ul></li><li><p>onLoad事件中接收导航参数 onLoad <code>option 导航的参数</code></p><ul><li><code>onLoad:function(options){ console.log(options)  }</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>:{ query }<br><span class="hljs-attr">onLoad</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>){<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br>    <span class="hljs-attr">query</span>:options<br>  }}<br>}<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({ }) <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>自定义编译模式</p></li><li><p>启动页面 运行的页面 启动参数 传递到这个页面的参数 模式名称</p></li></ul><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>网络数据请求</p><ul><li>数据接口的请求<ul><li>只能请求HTTPS类型的接口  必须将接口的域名添加到信任列表中（详情 项目配置 request合法域名）</li><li>配置request合法域名 微信小程序后台 修改request合法域名 只支持https协议 不支持ip地址或localhost 域名必须ICP备案 服务器域名一个月最多修改5次</li></ul></li><li>发起GET请求<ul><li><code>wx.request({ })</code> 发起GET数据请求</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button bingtap=<span class="hljs-string">"getInfo"</span>&gt;<span class="hljs-variable constant_">GET</span>请求&lt;/button&gt;<br><br><span class="hljs-comment">// onLoad() 事件  生命周期函数 监听页面加载</span><br><span class="hljs-attr">onLoad</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>){<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInfo</span>()<br>}<br><br><span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-title function_">request</span>({<br>      <span class="hljs-attr">url</span>:<span class="hljs-string">"https://www.xxx.com/api/get"</span>, <span class="hljs-comment">// https协议</span><br>      <span class="hljs-attr">method</span>:<span class="hljs-string">"GET"</span>, <span class="hljs-comment">// method:"POST"</span><br>      <span class="hljs-attr">data</span>:{ <span class="hljs-attr">name</span>:<span class="hljs-string">"zs"</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span> },<br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>{  <span class="hljs-comment">// 请求成功后的回调</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// res.data</span><br>      }<br>    })<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>发起POST请求</p></li><li><p>页面刚加载时请求数据 自动请求一些初始化的数据 <code>onLoad事件</code> 调用获取数据的函数</p></li><li><p>跳过request合法域名校验（开发 调试下使用） 本地设置 不校验…HTTPS证书</p></li><li><p>跨域和AJAX 只存在基于浏览器的Web开发 小程序的宿主环境不是浏览器 而是微信客户端 小程序不存在跨域问题 小程序不能叫做发起AJAX请求，而是叫做发起网络数据请求</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面.js</span><br><span class="hljs-attr">data</span>:{<br>  <span class="hljs-attr">swiperlist</span>:[] <span class="hljs-comment">//xxxlist:[]</span><br>}<br><br><span class="hljs-title function_">onload</span>(<span class="hljs-params">options</span>){<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSwiperList</span>()<br>}<br><span class="hljs-comment">// 数据格式  [{id name url},{},{}]</span><br><span class="hljs-title function_">getSwiperList</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-title function_">request</span>({<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">''</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">"GET"</span>,<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>{<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br>        <span class="hljs-attr">swiperlist</span>:res.<span class="hljs-property">data</span> <span class="hljs-comment">// res.data {} {} {}</span><br>      })<br>    }<br>  })<br>}<br><br>&lt;view <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">"{{ swiprlist }}"</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">"id"</span> &gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>{{ item.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"{{ item.url }}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br> &lt;/view&gt;<br></code></pre></td></tr></tbody></table></figure><p>小程序的API进行Promise化 依赖于<code>miniprogram-api-promise</code> 第三方包</p><ul><li>小程序官方异步API基于回调函数实现的 回调地狱 可读性 维护性差</li><li>API Promise 化 通过额外的配置，将官方提供的、基于回调函数的异步API 改造为基于Promise的异步函数 提高代码的可读性 维护性 避免回调地狱的问题</li><li><code>npm i -save miniprogram-api-promise</code> 每次安装都要构建npm 删除mininprogram_npm 再构建</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">request</span>({<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">''</span>,<br>  <span class="hljs-attr">method</span>:<span class="hljs-string">''</span>,<br>  <span class="hljs-attr">data</span>:{},<br>  <span class="hljs-attr">success</span>:<span class="hljs-function">()=&gt;</span>{},<br>  <span class="hljs-attr">fail</span>:<span class="hljs-function">()=&gt;</span>{},<br>  <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>{}<br>})<br><br><span class="hljs-comment">// app.js</span><br><span class="hljs-keyword">import</span> { promisefyAll } <span class="hljs-keyword">from</span> <span class="hljs-string">'minprogram-api-promise'</span><br><span class="hljs-keyword">const</span> wxp = wx.<span class="hljs-property">p</span> = {}<br><span class="hljs-title function_">promisefyAll</span>(wx,wxp)<br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-keyword">const</span> { <span class="hljs-attr">data</span>:res } = <span class="hljs-keyword">await</span> wx.<span class="hljs-property">p</span>.<span class="hljs-title function_">request</span>({<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">'GET'</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">''</span>,<br>    <span class="hljs-attr">data</span>:{ <span class="hljs-attr">name</span>:zs,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span> }<br>  }),<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="MobX"><a href="#MobX" class="headerlink" title="MobX"></a>MobX</h3><p>MobX实现全局数据共享  <code>mobx-miniprogram</code> <code>mobx-miniprogram-bindings</code> 实现全局数据共享</p><ul><li>全局数据共享（又称 状态管理 store） 是为了解决组件之间数据共享的问题<ul><li>xxx:xxx </li><li>get xxx() 计算属性</li><li>函数:action(function(step){ } action(){}</li></ul></li><li>开发常用的全局数据共享方案有：Vuex、Redux、MobX</li><li>mobx-miniprogram 创建Store实例对象</li><li>mobx-miniprogram-bindings 把Store中的共享数据或方法，绑定到组件或页面中使用</li><li><code>npm install -–save mobx-miniprogram mobx-miniprogram-bindings </code>  安装后 重新构建npm</li><li>store 成员绑定到组件中</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建MobX 实例</span><br>/store/store.<span class="hljs-property">js</span>  创建store实例对象 <span class="hljs-title function_">observable</span>({ })<br><span class="hljs-keyword">import</span> { observable,action } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-ac'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">observable</span>({<br>  <span class="hljs-attr">numA</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">numB</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-comment">// 计算属性 get xxx(){}</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">sum</span>(){<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">numA</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">numB</span><br>  },<br>  <span class="hljs-comment">// action方法 修改store中的数据</span><br>  <span class="hljs-attr">updateNum1</span>:<span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">step</span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">numA</span> += step<br>  }),<br>  <span class="hljs-attr">updateNum2</span>:<span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">step</span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">numB</span> += step<br>  })<br>})<br><br><span class="hljs-comment">// store中的成员绑定到页面中 页面.js</span><br><span class="hljs-keyword">import</span> { createStoreBindings } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-miniprogram-bindings'</span><br><span class="hljs-keyword">import</span> { store } <span class="hljs-keyword">from</span> <span class="hljs-string">'../../store/store.js'</span><br><br><span class="hljs-title class_">Page</span>({<br>  <span class="hljs-comment">// this.storeBindings createStoreBindings({ })</span><br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storeBindings</span> = <span class="hljs-title function_">createStoreBindings</span>(<span class="hljs-variable language_">this</span>,{ <span class="hljs-comment">// this 实例</span><br>      store, <span class="hljs-comment">// 属性 方法</span><br>      <span class="hljs-attr">fields</span>:[<span class="hljs-string">"numA"</span>,<span class="hljs-string">"numB"</span>,<span class="hljs-string">"sum"</span>], <span class="hljs-comment">// 绑定到当前页面的字段</span><br>      <span class="hljs-attr">actions</span>:[<span class="hljs-string">"updateNum1"</span>,<span class="hljs-string">"updateNum2"</span>] <span class="hljs-comment">// aciton方法</span><br>    })<br>  },<br>  <span class="hljs-title function_">onUnload</span>(<span class="hljs-params"></span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storeBindings</span>.<span class="hljs-title function_">destroyStoreBindings</span>()<br>  }<br>})<br><br><span class="hljs-comment">// 子组件修改stote</span><br>获取 {{ numA }}<br><br><span class="hljs-comment">// action</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateNum1</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">stop</span>)<br><br><span class="hljs-comment">// store 绑定到组件</span><br><span class="hljs-keyword">import</span> { storeBindingsBehavior } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-miniprogram-bindings'</span><br><span class="hljs-keyword">import</span> { store } <span class="hljs-keyword">from</span> <span class="hljs-string">'../../store/store'</span><br><br><span class="hljs-title class_">Component</span>({<br>  <span class="hljs-attr">behaviors</span>:[storeBindingsBehavior],<br>  <span class="hljs-attr">storeBindings</span>:{<br>    store, <span class="hljs-comment">// 指定要绑定的store</span><br>    <span class="hljs-attr">fields</span>:{ <span class="hljs-comment">// 指定要绑定的字段数据</span><br>      <span class="hljs-attr">numA</span>:<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">numA</span>,<br>      <span class="hljs-attr">numB</span>:<span class="hljs-function">(<span class="hljs-params">store</span>) =&gt;</span> store.<span class="hljs-property">numB</span>,<br>      <span class="hljs-attr">sum</span>:<span class="hljs-string">"sum"</span><br>    },<br>    <span class="hljs-attr">actions</span>:{  <span class="hljs-comment">// 绑定方法</span><br>      <span class="hljs-attr">updateNum1</span>:<span class="hljs-string">"updateNum1"</span><br>    }<br>  }<br>})<br><br><br><span class="hljs-comment">// 使用</span><br>{{ numA }} {{ numB }} <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateNum1</span>() <span class="hljs-comment">//方法</span><br></code></pre></td></tr></tbody></table></figure><p>自定义tabBar</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">"tabBar":{<br>"custom":true,<br> "list":[] // 保存 兼容低版本<br>}<br><br>添加tabBar 代码文件<br><br>/根目录创建custom-tab-bar/index<br></code></pre></td></tr></tbody></table></figure><ul><li>wx-for 是在 子元素 生成重复内容的元素上 而不是父元素上的</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">json <br>{ <br><span class="hljs-attr">code</span>:<span class="hljs-number">200</span> <span class="hljs-comment">//状态码</span><br>  <span class="hljs-attr">data</span>:[{},{},{}] 数据格式<br>}<br><br>data <span class="hljs-attr">list</span>:[ { <span class="hljs-attr">name</span>:<span class="hljs-string">"zs"</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span> },{ <span class="hljs-attr">name</span>:<span class="hljs-string">"ls"</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span> },{ <span class="hljs-attr">name</span>:<span class="hljs-string">"wz"</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span> } ]<br><span class="hljs-attr">list</span>:[]<br><br>res.<span class="hljs-property">data</span> (res是一个{})  json.<span class="hljs-property">data</span> 是个一个对象<br><br><span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span> 遍历一个数组里面的对象<br>view <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">"{{ list }}"</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">"index"</span><br>{{ index }} {{ item.<span class="hljs-property">name</span> }} item.<span class="hljs-property">age</span>  <span class="hljs-comment">// item.name == list[x].name</span><br></code></pre></td></tr></tbody></table></figure><ul><li>var(—变量值,默认值)</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">info=<span class="hljs-string">"{item.info ? item.info :''}"</span><br></code></pre></td></tr></tbody></table></figure><ul><li>监听器 observers 监听一个值的改变 另一个值也改变</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">observers</span>:{<br> <span class="hljs-string">"num"</span>:<span class="hljs-title function_">funciton</span>(<span class="hljs-params">val</span>){<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({})<br> }<br>}<br><br><span class="hljs-title function_">onchage</span>(<span class="hljs-params">event</span>){<br>wx.<span class="hljs-title function_">switchTab</span>({<br><span class="hljs-attr">url</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>[event.<span class="hljs-property">detail</span>].<span class="hljs-property">pagePath</span><br>})<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>分包</p><ul><li>分包指的是把 一个完整的小程序项目 按照需求划分为不同的子包  在构建时打包成不同的分包，用户在使用时按需进行加载</li></ul><p>分包的好处</p><ul><li>优化小程序首次启动的下载时间 多团队共同开发时 可以更好的解耦协作</li></ul><p>分包前项目的构成</p><ul><li>分包前 小程序所有的页面和资源都会被打包到一起 项目体积大 首次启动下载时间长</li></ul><p>分包后项目构成</p><ul><li>分包后 1个主包 + 多个分包 <ul><li>主包 一般包含项目的启动页面或TabBar页面 以及所有分包都需要用到的一些公共资源</li><li>分包 只包含和当前分包有关的页面和私有资源</li></ul></li><li>分包的加载规则<ul><li>小程序启动时，默认会下载主包并启动主包内页面 <ul><li>tabBar 页面需要放到主包内</li></ul></li><li>当用户界面进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示<ul><li>非tabBar页面可以按照功能的不同，划分为不同的分包之后 进行按需下载</li></ul></li></ul></li></ul><p>分包的体积限制</p><ul><li>分包（主包+分包）不能超过 16M</li><li>单个分包、主包大小不能超过 2M</li></ul><p>使用分包</p><ul><li>配置方法 <code>app.json subpackages[{},{}]</code> 节点中声明分包的结构</li></ul><p>独立分包 <code>independent:true</code></p><ul><li>本质上也是分包 只不过比较特殊 可以独立于主包和其他分包而单独运行</li><li>应用场景 按需 具有一定功能独立性的页面配置到独立分包<ul><li>当小程序从普通的分包页面启动时 首先下载主包</li><li>独立分包不依赖主包运行 可以提升分包页面的启动速度</li></ul></li><li>引用原则<ul><li>独立分包和普通分包之间 是相互隔绝的 不能相互引用彼此的资源<ul><li>其他分包（主包、普通分包、其他独立分包）都无法引用 独立分包的私有资源</li><li>特别注意 独立分包 不能引用主包内的公共资源</li></ul></li></ul></li><li>分包预下载 进入小程序的某个页面 框架自动预下载可能需要的分包 提升进入后续分包页面时的启动速度</li><li>配置分包预下载 预下载分包的行为，会在进入指定的页面时触发 app.json中 使用 <code>preloadRule:{}</code>节点定义分包的预下载规则</li><li>分包预下载限制<ul><li>同一分包中的页面 共同的预下载大小限额2M</li></ul></li></ul><p>独立分包 vs 普通分包</p><ul><li>主要区别 是否依赖于主包才能运行</li><li>普通分包 必须依赖于主包才能运行</li><li>独立分包可以在不下载主包的情况下 独立运行</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">分包目录<br>app.<span class="hljs-property">js</span><br>app.<span class="hljs-property">json</span><br>app.<span class="hljs-property">wxss</span><br>pages<br>--- index<br>--- logo<br>packageA<br>--pages<br>----cat<br>----dog<br>packageB<br>--pages<br>----apple<br>----banner<br><br><span class="hljs-comment">//app.json</span><br><span class="hljs-title class_">App</span>({<br>  <span class="hljs-string">"pages"</span>:[ <span class="hljs-comment">// 主包的所有页面</span><br>    <span class="hljs-string">"pages/index"</span>,<br>    <span class="hljs-string">"pages/logs"</span><br>  ],<br>  <span class="hljs-comment">// 添加配置项 编译 自动生成</span><br>  <span class="hljs-string">"subpackages"</span>:[ <span class="hljs-comment">// 通过 subpackages 节点 声明分包结构</span><br>    {<br>      <span class="hljs-string">"root"</span>:<span class="hljs-string">"packageA"</span>, <span class="hljs-comment">// 第一个分包的根目录</span><br>    <span class="hljs-string">"pages"</span>:[<br>        <span class="hljs-string">"pages/cat/cat"</span>,<br>        <span class="hljs-string">"pages/dog/cat"</span><br>      ]<br>    },{<br>      <span class="hljs-string">"root"</span>:<span class="hljs-string">"packageB"</span>,  <span class="hljs-comment">// 第二个分包的根目录</span><br>      <span class="hljs-string">"name"</span>:<span class="hljs-string">"pack2"</span>, <span class="hljs-comment">// 分包添加别名</span><br>      <span class="hljs-string">"pages"</span>:[<br>        <span class="hljs-string">"pages/apple/apple"</span>,<br>        <span class="hljs-string">"pages/bannan/bannan"</span><br>      ],<br>      <span class="hljs-string">"independent"</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 独立分包</span><br>    }<br>  ],<br>  <span class="hljs-string">"preloadRule"</span>:{ <span class="hljs-comment">// 分包预下载规则</span><br>    <span class="hljs-string">"pages/contact/contact"</span>:{ <span class="hljs-comment">// 触发分包预下载的页面路径</span><br>      <span class="hljs-string">"network"</span>:<span class="hljs-string">"all"</span>, <span class="hljs-comment">// network 指定的网络模式下进行预下载  all 不限 wifi </span><br>      <span class="hljs-string">"packages"</span>:[<span class="hljs-string">"pagkageA"</span>]  <span class="hljs-comment">// packages 表示进入页面 预下载分包 通过root或name指定预下载那些分包</span><br>    },<br>    <br>    <span class="hljs-string">"pages/log/log"</span>:{ <span class="hljs-comment">// 触发分包预下载的页面路径</span><br>      <span class="hljs-string">"network"</span>:<span class="hljs-string">"wifi"</span>, <span class="hljs-comment">// network 指定的网络模式下进行预下载  all 不限 wifi </span><br>      <span class="hljs-string">"packages"</span>:[<span class="hljs-string">"pagkageB"</span>]  <span class="hljs-comment">// packages 表示进入页面 预下载分包 通过root或name指定预下载那些分包</span><br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><h3 id="常见功能"><a href="#常见功能" class="headerlink" title="常见功能"></a>常见功能</h3><p>下拉刷新</p><ul><li><p>下拉刷新 移动端专有名词 下拉滑动 重新加载页面数据的行为</p><ul><li>全局开启 app.json enablePullDownRefresh true</li><li>局部开启(推荐) 页面.json enablePullDownRefresh true<ul><li>backgroud/Color(16进制) TextStyle(dark/light)</li></ul></li><li>Page() 内的 onPullDownRefresh(){ } 函数 监听当前页面的下拉刷新事件</li><li>停止下拉刷新 处理完下拉刷新 loading 会一直显示 不会自动消失  手动隐藏 loading 效果 <code>wx.stopPullDownRefresh()</code> 停止当前页面的刷新效果<ul><li><code>onPullDownRefresh(){  wx.stopPullDownRefresh() }</code></li></ul></li></ul></li><li><p>上拉加载 上拉滑动 加载更多数据的行为</p><ul><li>监听页面上的上拉触底事件  页面.js <code>onReachBottom()</code> onReachBottom:function(){ }<ul><li>节流</li></ul></li><li>上拉触底距离 .json <code>onReachBottomDistance=50(默认)</code></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;view <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">"{{ colorList }}"</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">"index"</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"num-item"</span> style=<span class="hljs-string">"background-color: rgb({{ item }})"</span>&gt;<br>{{ item }}<br>&lt;/view&gt;<br><span class="hljs-title function_">getColor</span>(<span class="hljs-params"></span>){<br>wx.<span class="hljs-title function_">request</span>({<br><span class="hljs-attr">url</span>: <span class="hljs-string">'https://www.escook.cn/api/color'</span>,<br><span class="hljs-attr">method</span>:<span class="hljs-string">'get'</span>,<br><span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params"> { data: res } </span>) =&gt;</span>{<br>      <span class="hljs-comment">// var [a,b] = [1,2] {}:{}</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">colorList</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">colorList</span>, ...res.<span class="hljs-property">data</span>] <span class="hljs-comment">// 拼接数组 [...[1,2,3,4],...[23,4,5,5]]</span><br>        <span class="hljs-comment">//</span><br>})<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>}<br>})<br>},<br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>){<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getColor</span>()<br>},<br><br>  }<br>  <span class="hljs-title function_">onReachBottom</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getColor</span>()<br>  },<br><br><br> loading 提示框<br>wx.<span class="hljs-title function_">showLoading</span>({ <span class="hljs-attr">title</span>:<span class="hljs-string">"数据加载中....."</span> })<br><br>wx.<span class="hljs-title function_">request</span>({<br>  <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>{<br>    wx.<span class="hljs-title function_">hideLoading</span>()<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><ul><li>提示框 <code>wx.showLoading(Object object)/wx.hiddeLoading()</code> object title</li><li>上拉触底 节流操作</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// data 定义 isloading 节流阀</span><br><span class="hljs-attr">data</span>:{<br>  <span class="hljs-attr">isloading</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// true 正在进行数据请求 false 没有任何数据请求</span><br>}<br><br><span class="hljs-comment">// getColors() 方法修改节流阀的值</span><br><span class="hljs-title function_">getColors</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-title function_">request</span>({ <span class="hljs-comment">// complete 回调函数中重置为false</span><br>    <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>{<br>      wx.<span class="hljs-title function_">hideLoading</span>()<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br>        <span class="hljs-attr">isloading</span>:<span class="hljs-literal">false</span><br>      })<br>    }<br>  })<br>}<br><br><span class="hljs-comment">// onReachBottom 判断节流阀的值，从而对数据进行节流操作</span><br><span class="hljs-title function_">onReachBottom</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-keyword">if</span>(isloading == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-comment">// 阻止请求</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getColors</span>()  <span class="hljs-comment">// false 发起请求</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>navigator 传递参数<code>url</code>和获取参数 <code>onLoad(options){ options }</code></li><li>data中的<code>this.setData({ }) 设置 this.data.xxx.xxx 获取 </code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传递参数 把json中的数据作为参数 传递给 下一个组件动态生成页面</span><br>&lt;navigator url=<span class="hljs-string">"/pages/shoplist/shoplist?id={{ item.id }}&amp;title={{item.name}}"</span> <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">"{{ gridlist }}"</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">"id"</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"grid-item"</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"{{item.icon}}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>{{item.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br>&lt;/navigator&gt;<br><br><span class="hljs-attr">data</span>: {<br><span class="hljs-attr">query</span>:{}  <span class="hljs-comment">// 参数</span><br>},<br><span class="hljs-comment">// this.setData({ }) this.data.xxx.xxx </span><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">options</span>) {<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">query</span>:options<br>})<br>},<br><span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>) {<br>    wx.<span class="hljs-title function_">setNavigationBarTitle</span>({<br>      <span class="hljs-attr">title</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>    })<br> },  <br></code></pre></td></tr></tbody></table></figure><ul><li>wx.setNavigationBarTitle(Object object)  onReady使用</li><li>不同分页数据的获取</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: {<br>  <span class="hljs-attr">query</span>: {}, <br>  <span class="hljs-attr">showList</span>: [], 所有数据<br>  <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>, 当前页<br>  <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>, 页数<br>  <span class="hljs-attr">total</span>: <span class="hljs-number">0</span> 总页数<br>},<br>    <br><span class="hljs-title function_">getShowList</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-title function_">request</span>({<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">`https://www.escook.cn/categories/<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.data.query.id}</span>/shops`</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">"get"</span>,<br>    <span class="hljs-attr">data</span>:{<br>      <span class="hljs-attr">_page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">page</span>,<br><span class="hljs-attr">_limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">pageSize</span><br>    },<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>{<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">showList</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">showList</span>, ...res.<span class="hljs-property">data</span>],<br><span class="hljs-attr">total</span>: res.<span class="hljs-property">header</span>[<span class="hljs-string">"X-Total-Count"</span>] - <span class="hljs-number">0</span><br>})<br>    }<br>  })<br>}<br><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getShowList</span>()<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>数据渲染到页面</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;view wx:for="{{ showList }}" wx:key="id"&gt;<br>&lt;image src="{{ item.src }}"&gt;&lt;/image&gt;<br>&lt;text&gt; {{ item.address }} &lt;text&gt;<br>&lt;text&gt; {{ item.name }} &lt;text&gt;<br>&lt;text&gt; {{ item.phone }} &lt;text&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>loading 效果</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getShowList</span>(<span class="hljs-params"></span>) {<br>wx.<span class="hljs-title function_">showLoad</span>({<br><span class="hljs-attr">title</span>:<span class="hljs-string">"数据加载中..."</span><br>}),<br>wx.<span class="hljs-title function_">request</span>({<br><span class="hljs-attr">url</span>: <span class="hljs-string">`https://www.escook.cn/categories/<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.data.query.id}</span>/shops`</span>,<br><span class="hljs-attr">method</span>: <span class="hljs-string">"get"</span>,<br><span class="hljs-attr">data</span>: {<br><span class="hljs-attr">_page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">page</span>,<br><span class="hljs-attr">_limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">pageSize</span><br>},<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">showList</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">showList</span>, ...res.<span class="hljs-property">data</span>],<br><span class="hljs-attr">total</span>: res.<span class="hljs-property">header</span>[<span class="hljs-string">"X-Total-Count"</span>] - <span class="hljs-number">0</span><br>})<br>},<br><span class="hljs-attr">comlete</span>: <span class="hljs-function">() =&gt;</span> {<br>wx.<span class="hljs-title function_">hideLoading</span>()<br>       wx.<span class="hljs-property">stopPullDown</span><br>}<br>})<br>},<br></code></pre></td></tr></tbody></table></figure><ul><li>下拉触底 页码加1</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">"onReachBottomDistance":200<br><br>onReachBottom() {<br>this.setData({<br>page: this.data.page + 1<br>})<br>this.getShowList()<br>},<br></code></pre></td></tr></tbody></table></figure><ul><li>节流 <ul><li>data isloading 设置false </li><li>get数据方法 重置值 getShow (){} this.setData({isloading:true})  complete:()=&gt;{ this.setData({isloading:false})  }</li><li>onLoad if(this.data.isloading) return</li></ul></li><li>判断下一页数就上限<ul><li>判断下一页有没有数据 page * pageSize &gt;= total  页面值 * 每页显示多少条数据 &gt;= 总数据条数</li></ul></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if (this.data.page * this.data.pageSize &gt;= this.data.total) {<br>returnwx.showToast({<br>title:"数据加载完毕",<br>icon:"none"<br>})<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>上拉重置</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">onPullDownRefresh() {<br>this.setData({<br>page: 1,<br>showList: [],<br>total:0<br>}),<br>this.getShowList()<br>},<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js">{<br><span class="hljs-string">"usingComponents"</span>: {},<br><span class="hljs-string">"onReachBottomDistance"</span>: <span class="hljs-number">200</span>,<br><span class="hljs-string">"enablePullDownRefresh"</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">"backgroundColor"</span>: <span class="hljs-string">"#efefef"</span>,<br><span class="hljs-string">"backgroudnColor"</span>: <span class="hljs-string">"dark"</span><br>}<br><br><span class="hljs-attr">data</span>: {<br><span class="hljs-attr">query</span>: {},<br><span class="hljs-attr">showList</span>: [],<br><span class="hljs-attr">page</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<br><span class="hljs-attr">total</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">isloading</span>: <span class="hljs-literal">false</span><br>},<br> <br><span class="hljs-title function_">getShowList</span>(<span class="hljs-params">cb</span>) {<br>wx.<span class="hljs-title function_">showLoading</span>({<br><span class="hljs-attr">title</span>: <span class="hljs-string">"数据加载中..."</span><br>}),<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">isloading</span>: <span class="hljs-literal">true</span><br>}),<br>wx.<span class="hljs-title function_">request</span>({<br><span class="hljs-attr">url</span>: <span class="hljs-string">`https://www.escook.cn/categories/<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.data.query.id}</span>/shops`</span>,<br><span class="hljs-attr">method</span>: <span class="hljs-string">"get"</span>,<br><span class="hljs-attr">data</span>: {<br><span class="hljs-attr">_page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">page</span>,<br><span class="hljs-attr">_limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">pageSize</span><br>},<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">showList</span>: [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">showList</span>, ...res.<span class="hljs-property">data</span>],<br><span class="hljs-attr">total</span>: res.<span class="hljs-property">header</span>[<span class="hljs-string">"X-Total-Count"</span>] - <span class="hljs-number">0</span><br>})<br>},<br><span class="hljs-attr">complete</span>: <span class="hljs-function">() =&gt;</span> {<br>wx.<span class="hljs-title function_">hideLoading</span>()<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({ <span class="hljs-attr">isloading</span>: <span class="hljs-literal">false</span> })<br><span class="hljs-comment">// wx.stopPullDownRefresh()</span><br>          cb &amp;&amp; <span class="hljs-title function_">cb</span>() <span class="hljs-comment">// cb</span><br>}<br>})<br>},<br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params">options</span>) {<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">query</span>: options<br>})<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getShowList</span>()<br>},<br><span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>) {<br>wx.<span class="hljs-title function_">setNavigationBarTitle</span>({<br><span class="hljs-attr">title</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>,<br>})<br>},<br><span class="hljs-title function_">onPullDownRefresh</span>(<span class="hljs-params"></span>) {<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">page</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">showList</span>: [],<br><span class="hljs-attr">total</span>:<span class="hljs-number">0</span><br>}),<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getShowList</span>(<span class="hljs-function">()=&gt;</span>{<br>      wx.<span class="hljs-title function_">stopPullDownRefresh</span>()<br>    })<br>},<br><span class="hljs-title function_">onReachBottom</span>(<span class="hljs-params"></span>) {<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">page</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">pageSize</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">total</span>) {<br><span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>({<br><span class="hljs-attr">title</span>: <span class="hljs-string">"数据加载完毕"</span>,<br><span class="hljs-attr">icon</span>:<span class="hljs-string">"none"</span><br>})<br>}<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">isloading</span>) <span class="hljs-keyword">return</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br><span class="hljs-attr">page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">page</span> + <span class="hljs-number">1</span><br>})<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getShowList</span>()<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li><p>mpvue</p></li><li><p>taro</p></li></ul><h2 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>weui</td><td></td></tr><tr><td>iview</td><td></td></tr><tr><td>vant weapp</td><td></td></tr><tr><td>wux</td><td></td></tr></tbody></table><p>vant-weapp(组件库) <a href="https://vant-contrib.gitee.io/vant-weapp/#/home">介绍 - Vant Weapp</a></p><ul><li>安装npm(npm init npm init -y @vant/weapp -S –production) 构建npm(构建npm 使用npm模块) 修改app.json(style:v2删除)</li><li>使用vant组件 app.json <code>usingComponents</code>节点中引入需要的组件</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">app.json<br><span class="hljs-attr">"usingComponents"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><br> <span class="hljs-attr">"van-button"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"@vant/weapp/button/index"</span><br><span class="hljs-punctuation">}</span><br><br>&lt;van-button type=<span class="hljs-string">"primary"</span>&gt;&lt;/van-button&gt;<br></code></pre></td></tr></tbody></table></figure><ul><li>定制全局主题样式   <code>app.wxss</code><ul><li><a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less">vant-weapp/var.less at dev · youzan/vant-weapp</a></li></ul></li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span>{<br>  <span class="hljs-attr">--main-color</span>:red; /// <span class="hljs-attr">--main-bg-color</span>:blue<br>}<br><span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--main-color); // <br><br>// page页面标签<br>// 重新覆盖官方的css样式<br>page{<br>  <span class="hljs-attr">--button-danger-background-color</span>:<span class="hljs-number">#C00000</span>; // 修改自定义样式<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>postcss-px2units</td><td>将 px 单位转换为 rpx 单位，或者其他单位的 PostCSS插件</td></tr><tr><td>gulp-upload-qcloud</td><td>腾讯云 cos 静态资源上传 gulp 插件</td></tr><tr><td>qcloud-upload</td><td>基于 nodejs 腾讯云上传插件</td></tr><tr><td>weapp-<u>qrcodea</u></td><td>微信小程序 中，快速生成二维码</td></tr></tbody></table><ul><li>app.js 入口文件 <code>App()函数</code>  启动整个小程序</li><li>页面.js 页面入口文件 <code>Page()函数</code>  创建并运行页面</li><li>普通.js 普通的功能模块 封装公共的函数或属性给页面使用 <code>utils/utils.js</code>  <code>module.exports = { name:name } / require</code></li></ul><p>页面 vs 组件</p><ul><li>全局 <code>App({ })</code></li><li>页面 Pages <code>Page({ })</code></li><li>组件 Component  <code>页面内导入</code>  属性、数据、方法</li></ul><p>App.json</p><ul><li><code>pages:[]</code></li><li><code>tabBar:{ } </code> postion:bottom/top 、borderStyle、color 、selectColor backgroundColor 、list<ul><li><code>“list”:[ { pagePath text iconPath selectIconPath },{},{} ]</code></li></ul></li><li>window <ul><li>navigationBar(BackgroundColor,TextStyle,TitleText)  导航条</li></ul></li><li>enablePullDownRefresh:false 下拉刷新   <ul><li>background(TextStyle(dark/light),Color)  下拉窗口样式</li></ul></li><li>onReachBottomDistance=50  上拉触底</li></ul><p>指令</p><ul><li><p>wx:for=<code>{{ [{},{},{}] }}  </code>  遍历的是一个数组  + wx:key 提高数组渲染的性能</p><ul><li>wx:for-item  数组元素 <code>{{ item }} </code> 当前循环项</li><li>wx:for-index 数组下标<code>{{ index }} </code>索引</li><li>手动指定索引和当前项的变量名 重命名索引和Item项 （不常用）<ul><li>wx-for-index=“idx” 可以指定当前循环项的索引的变量名</li><li>wx-for-item=“itm” 可以指定当前项的变量名</li></ul></li><li>wx:key <code> wx:key="id"/"index"  id是数组的一个键名</code> 渲染出来的列表项指定唯一的key值 从而提高渲染效率 <code>vue中 :key="id"</code></li></ul></li><li><p>wx:if wx:elif wx:else  条件渲染 vs hidden</p><ul><li><code>hidden="{{ }}"</code> </li><li><code>wx:if="{{ condition }} / true or false"</code> 判断是否渲染该代码块</li><li><code>wx:if={{ type = 1 }}  wx:elif={{ type = 1 }} wx:else</code> wx-if wx:elif wx-else</li><li><code>结合&lt;block&gt;使用wx-if &lt;block wx-if="{{ }}"&gt; &lt;/block&gt;</code> 一次性控制多个组件的展示和隐藏 block 将多个组件包装起来 没有任何效果 并不是一个组件 包裹性质的容器 不会在页面中做任何渲染</li><li>hidden  <code>hidden="{{ condition }} // true or false"</code> 控制元素的显示和隐藏</li><li>区别 wx-if 动态创建和移除元素的方式 控制条件复杂 切换效率高   hidden 切换样式（display:none/block）频繁切换使用 渲染效率高</li></ul></li></ul><p>事件绑定 </p><ul><li><code>bind*/bind:* </code> <code>bind(tap|input|change) or bind:(tap|input|change) </code> <ul><li><code>input事件的值 e.detail.value</code></li></ul></li><li>重点 事件传参数 事件不能直接传递参数 <ul><li><code>data-变量="{{ xxx }}"</code></li><li><code>handleInput:fucniton(e){ e.currentTarget.dataset.变量 }</code></li></ul></li><li>target vs currentTarget: target 触发该事件的源头组件 currentTarget 当前事件所绑定的组件（当前触发事件的组件）</li></ul><p>wxml 结构</p><p>数据绑定</p><ul><li><code>data:{ info:"messaage" }  {{ info }}</code><ul><li><code>{{ 100 + 200/ ? : }} &lt;image src="{{imgSrc}}"&gt;</code></li></ul></li><li><code>this.setData({ num: this.data.num + 100  }) </code> 页面data 重新赋值</li></ul><p>组件</p><ul><li>view </li><li>text 文本   </li><li>rich-text  富文本组件 将字符串解析成对应标签，类似vue中的v-html功能 <code>&lt;rich-text nodes="&lt;img src="https://www.baidu.com/&gt;"</code></li><li>scrol-view scroll-x/y</li><li>input</li><li>button <code>type="primary/warn" size="mini" plain 镂空 open-type属性  disabled loading form-type open-type</code></li><li>image  图片  src mode 指定裁剪和缩放模式 (scaleToFill、aspectFit、aspectFill、widthFix)  lazy-load</li><li>icon <code>图标 </code> type size color  <code>&lt;icon type="success" size="40" color="{{item}}"/&gt;</code></li><li>swiper swiper-item<ul><li>indicator-dots、indicator-color、indicator-active-color</li><li>autoplay、interval、circular</li></ul></li><li>navigator <code>a 链接</code><ul><li>url target 在哪个目标上发生跳转,默认当前小程序 open-type(跳转方式 navigate  redirect switchTab reLaunch navigateBack)</li></ul></li><li>radio  <code>radio-group radio 单选按钮</code></li><li>checkbox <code>checkbox-group checkbox</code></li><li>map canvase </li><li>video</li></ul><p>wxss 样式</p><ul><li>rpx 响应式单位 自适应  iphone6 750rpx = 375px = 750物理像素、1rpx = 0.5px = 1物理像素   <code>2rpx = 1px</code></li><li>支持部分css选择器   <code># . element 并、后代 ::after ::before nth-child(n)</code></li><li><code>@import "common.wxss"</code></li></ul><p>wxs 过滤器</p><ul><li><code>&lt;wxs&gt;&lt;/wxs&gt;</code> 类似<code>&lt;script&gt;</code>标签 必须提供module属性 指定当前wxs的模块名称 方便在wxml中访问模块中的成员</li><li>WXML 无法调用页面js中的函数  WXML 可以调用WXS中定义的函数</li><li><code>&lt;wxs module="m1"&gt; module.exports.xxx = function(str){}  &lt;/wxs&gt;</code><ul><li><code>&lt;view&gt;{{ m1.xxx(str) }}&lt;/view&gt;</code></li></ul></li><li><code>&lt;wxs module="m2" src="../../tool.wxs"&gt;&lt;/wxs&gt; </code></li></ul><p>API</p><ul><li>事件监听 API <code>以on开头，用来监听某些事件的触发</code><ul><li><code>wx.onWindowResize(function callback) 监听窗户尺寸变化的事件</code></li></ul></li><li>同步 API <code>以Sync结尾的API</code> 都是同步API  同步API的执行结果 可以通过函数返回值直接获取<ul><li><code>wx.setStorageSync("key","vaklue") 向本地存储写入内容</code></li></ul></li><li>异步 API 类似jquery中国的$.ajax(option)函数 需要通过 success fail complete 接受调用<ul><li><code>wx.require() 发起网络请求 success 回调函数接受数据</code></li></ul></li></ul><p>自定义组件</p><ul><li>声明组件 <ul><li>新建组件  <code>components/test目录 test文件</code></li><li>全局/局部注册组件 <code>“usingComponets:{ "my-header":"/components/myHeader/myHeader"  }"</code></li><li>定义组件  <code>&lt;view&gt;Hello World&lt;/view&gt;</code>  HelloWorld组件</li><li>使用组件   <code>&lt;HelloWorld&gt;&lt;/HelloWorld&gt;</code></li></ul></li><li>自定义组件<ul><li><code>data:{} 数据</code></li><li><code>method:{} 方法</code></li><li><code>properties:{} 属性</code></li><li><code>observers:{} 数据监听器</code></li><li><code>纯数据字段</code></li></ul></li><li>自定义组件样式 <ul><li>组件样式互不影响、全局样式对组件无效、只有class选择器有影响推荐使用、id 属性 标签选择器不受样式隔离的影响</li><li>修改组件的样式隔离<ul><li>js <code>Component({ options:{ styleIsolation:"isolated" } })</code></li><li>.json <code>“styleIsolation:"isolated"”</code></li></ul></li></ul></li><li>自定义组件中的behaviors</li></ul><p>组件 vs 页面</p><ul><li>组件 .json 需要声明<code>“component”:true</code>属性 .js文件调用 <code>Component({})</code>函数  组件的事件处理函数需要定义到methods节点中<ul><li>data:{}\methods:{}</li></ul></li><li>页面 <code>Page({})</code>函数</li></ul><p>组件通信</p><ul><li>父传子   <ul><li>属性方法    父组件是包含子组件的</li></ul></li><li>子传父   <ul><li>事件绑定</li><li>获取子组件实例</li></ul></li></ul><p>生命周期</p><ul><li><p>组价生命周期</p><ul><li>组件生命周期</li><li>组件所在页面的生命周期</li></ul></li><li><p>应用生命周期函数 App({ }) app.js ==Launch Show Hide==</p><ul><li><code>onLaunch(){}</code> 初始化完成 只初始化一次</li><li><code>onShow(option){ }</code> 启动或从后台进入前台显示</li><li><code>onHide(){}</code> 前台进入后台时</li></ul><p>页面生命周期函数 Page({ }} page.js  ==Load Show Ready Hide Unload==</p><ul><li><code>onLoad(){ }</code> 页面加载 一个页面只调用一次</li><li><code>onShow(){ }</code> 显示</li><li><code>onReady(){ }</code> 页面初次渲染完成 一个页面只调用一次</li><li><code>onHide(){ }</code> 隐藏</li><li><code>onUnload(){ }</code> 卸载 一个页面只调用一次</li></ul></li></ul><p>网络请求 (小程序不存在跨域)</p><ul><li><code>wx.request({ })</code><ul><li><code>getInfo: wx.request({ url,method,data:{},success:(res)=&gt;{ } })   onLoad this.getInfo</code>   发起GET数据请求</li></ul></li><li><code>miniprogram-api-promise包</code><ul><li>官方异步API基于回调函数实现的 回调地狱 可读性 维护性差</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// wx.request({ })</span><br><span class="hljs-attr">data</span>:{<br>  <span class="hljs-attr">swiperList</span>:[]<br>}<br><br><span class="hljs-attr">onLoad</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">option</span>){<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInfo</span>()<br>}<br><br><span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-title function_">request</span>({<br>      <span class="hljs-attr">url</span>:<span class="hljs-string">"https://www.xxx.com/api/get"</span>, <span class="hljs-comment">// https协议</span><br>      <span class="hljs-attr">method</span>:<span class="hljs-string">"GET"</span>, <span class="hljs-comment">// method:"POST"</span><br>      <span class="hljs-attr">data</span>:{ <span class="hljs-attr">name</span>:<span class="hljs-string">"zs"</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span> },<br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>{  <span class="hljs-comment">// 请求成功后的回调</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// res.data</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br>          <span class="hljs-attr">swiperlist</span>:res.<span class="hljs-property">data</span> <span class="hljs-comment">// res.data {} {} {}</span><br>        })<br>      }<br>       <span class="hljs-attr">fail</span>:<span class="hljs-function">()=&gt;</span>{},<br>  <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>{}<br>    })<br>}<br><br>&lt;view <span class="hljs-attr">wx</span>:<span class="hljs-keyword">for</span>=<span class="hljs-string">"{{ swiprlist }}"</span> <span class="hljs-attr">wx</span>:key=<span class="hljs-string">"id"</span> &gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>{{ item.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"{{ item.url }}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br> &lt;/view&gt;<br><br><span class="hljs-comment">// miniprogram-api-promise</span><br></code></pre></td></tr></tbody></table></figure><h1 id="微信小程序云开发"><a href="#微信小程序云开发" class="headerlink" title="微信小程序云开发"></a>微信小程序云开发</h1><p>小程序云开发 tcb</p><p>云开发：云数据库、云函数、云存储（文件）、云调用</p><p>测试appid用不了</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">project.<span class="hljs-property">config</span>.<span class="hljs-property">json</span><br><span class="hljs-string">"cloudfunctionRoot"</span>: <span class="hljs-string">"cloudfunctions/"</span>, <span class="hljs-comment">// cloudfunctions 名称</span><br></code></pre></td></tr></tbody></table></figure><p>云数据库</p><ul><li><p>数据库增删改查 </p></li><li><p>数据库 </p><ul><li>集合 添加记录</li><li>权限设置</li></ul></li><li><p><code>input e.detail.value</code></p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数据库初始化 app.json</span><br><span class="hljs-attr">onLaunch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){<br>  wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">init</span>({<br>  <span class="hljs-attr">env</span>:<span class="hljs-string">""</span> <span class="hljs-comment">// 云开发环境ID</span><br>})<br>}<br><br><br><span class="hljs-title function_">addName</span>(<span class="hljs-params">event</span>){<br>  name = event.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>}<br><br><span class="hljs-comment">// clound.database() 数据库引入  conllection  手动新建collection</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DB</span> = wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">database</span>().<span class="hljs-title function_">conllection</span>(<span class="hljs-string">'list'</span>)<br><br><span class="hljs-title function_">addData</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-comment">// 数据库添加数据</span><br>  <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">add</span>({<br>      <span class="hljs-attr">data</span>:{<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"zs"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">100</span><br>      },<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){},<br>      <span class="hljs-title function_">fail</span>(<span class="hljs-params">error</span>){}<br>    })<br>}<br><br><span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>){<br>  <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">get</span>({<br>   <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){}<br>  })<br>}<br> <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){<br>        that.<span class="hljs-title function_">setData</span>({<br>          <span class="hljs-attr">arr</span>:res.<span class="hljs-property">data</span><br>        })<br>      }<br><br><br><span class="hljs-comment">//删除 要id</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">doc</span>(id).<span class="hljs-title function_">remove</span>({<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){},<br>  <span class="hljs-title function_">fail</span>(<span class="hljs-params">error</span>){}<br>})<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">doc</span>(id).<span class="hljs-title function_">update</span>({<br>  <span class="hljs-attr">data</span>:{<br>     <span class="hljs-attr">age</span>:age<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><p>云函数</p><ul><li>新建云函数 json package.js index.js<ul><li>创建云函数 上传并部署云函数</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> (event, context) =&gt; {<br>    <span class="hljs-keyword">let</span> a = event.<span class="hljs-property">a</span><br>    <span class="hljs-keyword">let</span> b = event.<span class="hljs-property">b</span><br>    <span class="hljs-keyword">return</span> a + b<br>}<br><br><span class="hljs-title class_">Page</span>({<br>  <span class="hljs-title function_">getSum</span>(<span class="hljs-params"></span>){<br>    wx.<span class="hljs-property">clound</span>.<span class="hljs-title function_">callFunction</span>({<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">"hello"</span>, <span class="hljs-comment">// 云函数目录</span><br>      <span class="hljs-attr">data</span>:{<br>      <span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<br>        <span class="hljs-attr">b</span>:<span class="hljs-number">200</span><br>    },<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      },<br>      <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>){<br>      }<br>    })<br>  }<br>})<br><br><span class="hljs-comment">// openid 登陆 微信身份证号</span><br>wx.<span class="hljs-property">clound</span>.<span class="hljs-title function_">callFunction</span>({<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">'getopenid'</span>,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>){<br>    res.<span class="hljs-property">result</span>.<span class="hljs-property">openid</span><br>  },<span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>){<br>    <br>  }<br>})<br><br></code></pre></td></tr></tbody></table></figure><p>使用云函数获取数据库的数据</p><ul><li>云函数获取数据库数据可以突破20条限制</li><li>云函数不受数据库数据表的权限控制</li><li>云函数可以实现的功能更多</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数据库获取数据</span><br>wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">database</span>().<span class="hljs-title function_">collection</span>(<span class="hljs-string">"users"</span>).<span class="hljs-title function_">get</span>({<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>){<br>    <br>  },<br>  <span class="hljs-title function_">fail</span>(<span class="hljs-params">res</span>){<br>    <br>  }<br>})<br><br><span class="hljs-comment">// 云函数获取数据 云函数中转 一个函数  每个目录一个函数</span><br><span class="hljs-keyword">export</span>.<span class="hljs-property">main</span> = <span class="hljs-keyword">async</span> (event,context) =&gt; {<br>  <span class="hljs-keyword">return</span> cloud.<span class="hljs-title function_">database</span>().<span class="hljs-title function_">collection</span>(<span class="hljs-string">"users"</span>).<span class="hljs-title function_">get</span>()<br>}<br></code></pre></td></tr></tbody></table></figure><p>云存储</p><ul><li>文件上传</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">uploadFile</span>({<br><span class="hljs-attr">cloundPath</span>:<span class="hljs-string">''</span> <span class="hljs-comment">// 上传到云端的路径</span><br><span class="hljs-attr">filePaht</span>:<span class="hljs-string">''</span>, <span class="hljs-comment">// 小程序临时文件路径</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> { res.<span class="hljs-property">fileID</span> },<br>  <span class="hljs-attr">fail</span>:<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>                                     <br>})<br><br><br>wx.<span class="hljs-title function_">chooseMedia</span>(<span class="hljs-title class_">Object</span> object)  拍摄或从手机相册中选择图片或视频。<br><br><br><span class="hljs-comment">// 云存储 下载地址 或 FileID</span><br>&lt;image src={{ imgsrc  }}&gt;&lt;/image&gt;<br><span class="hljs-comment">// 视频存储</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">vidsrc</span> }} <span class="hljs-attr">control</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><br><span class="hljs-attr">data</span>:{<br>  <span class="hljs-attr">imgsrc</span>:<span class="hljs-string">''</span><br>}<br><br><br><span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>){<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>  <span class="hljs-comment">// 放大作用域 这个this指整个page({})</span><br>wx.<span class="hljs-title function_">chooseMedia</span>({ <span class="hljs-comment">//异步方法 用this 指代括号内的作用域 </span><br>  <span class="hljs-attr">count</span>: <span class="hljs-number">9</span>,<br>  <span class="hljs-attr">mediaType</span>: [<span class="hljs-string">'image'</span>,<span class="hljs-string">'video'</span>],<br>  <span class="hljs-attr">sourceType</span>: [<span class="hljs-string">'album'</span>, <span class="hljs-string">'camera'</span>],<br>  <span class="hljs-attr">maxDuration</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">camera</span>: <span class="hljs-string">'back'</span>,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) {<br>    <span class="hljs-comment">//console.log(res.tempFiles.tempFilePath)</span><br>    <span class="hljs-comment">//console.log(res.tempFiles.size)</span><br>    that.<span class="hljs-title function_">upload</span>(res.<span class="hljs-property">tempFiles</span>.<span class="hljs-property">tempFilePath</span>[<span class="hljs-number">0</span>])<br>  }<br>})<br><br><span class="hljs-comment">// </span><br><span class="hljs-title function_">upload</span>(<span class="hljs-params">fileurl</span>){<br>  wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">uploadFile</span>({<br>    <span class="hljs-comment">// 时间戳 new Date().getTime() </span><br><span class="hljs-attr">cloundPath</span>:  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-property">getTime</span> + <span class="hljs-string">'.png'</span> <span class="hljs-comment">// 上传到云端的路 +'.png'  // pdf.其他后缀</span><br><span class="hljs-attr">filePaht</span>:<span class="hljs-string">'fileurl'</span>, <span class="hljs-comment">// res.tempFilePath  '' 小程序临时文件路径 // 其他文件 res.temFiles[0].path</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>({<br>    <span class="hljs-attr">imgUrl</span>:<span class="hljs-attr">res</span>:fileID<br>  })<br>  },  <span class="hljs-comment">// fileID 图片地址</span><br>  <span class="hljs-attr">fail</span>:<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>                                     <br>})<br>}<br><br><span class="hljs-comment">// 上传其他文件</span><br>wx.<span class="hljs-title function_">chooseMessageFile</span>({<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">'all'</span>, <span class="hljs-comment">// all image</span><br>  success (res) {<br>    <span class="hljs-comment">// tempFilePath可以作为 img 标签的 src 属性显示图片</span><br>    <span class="hljs-keyword">const</span> tempFilePaths = res.<span class="hljs-property">tempFiles</span><br>  }<br>})<br><br><span class="hljs-comment">// 下载并打开excel</span><br>wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">downloadFile</span>({<br>  <span class="hljs-comment">// 示例 url，并非真实存在</span><br>  <span class="hljs-attr">fileID</span>: <span class="hljs-string">'a7xzcb'</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) {<br>    <span class="hljs-keyword">const</span> filePath = res.<span class="hljs-property">tempFilePath</span><br>    wx.<span class="hljs-title function_">openDocument</span>({<br>      <span class="hljs-attr">filePath</span>: filePath,<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) {<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'打开文档成功'</span>)<br>      }<br>    })<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure><p>7-2 微信小程序哔哩哔哩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
