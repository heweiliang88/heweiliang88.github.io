<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从你的全世界路过</title>
  
  <subtitle>世界很暗，但是你来了</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-17T08:46:11.997Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>记住</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(tool)Mac使用</title>
    <link href="http://example.com/2022/10/17/Mac/"/>
    <id>http://example.com/2022/10/17/Mac/</id>
    <published>2022-10-17T08:46:11.997Z</published>
    <updated>2022-10-17T08:46:11.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Mac快捷键"><a href="#Mac快捷键" class="headerlink" title="Mac快捷键"></a>Mac快捷键</h2><ul><li>截图  Command - [control] - shift - 4 - [Space]</li><li>Command +  H（Hide） M(Small)  Option + /H  Tab   ` <ul><li>Command + control + F 全屏   Command + option +m  最小化当前程序的所有窗口</li></ul></li><li>复制 无格式  Command＋Shift＋V</li><li>剪贴  Command+C  Command＋Option＋V</li><li>删除   Command + Backspace   Command + Delete  删除  清空废纸篓  Command + shift + Backspace  Command + Delete + Shift  清空垃圾桶</li><li>复制路径 Command</li><li>Command  + D 复制   J 显示   上  返回上一级目录 下  进入一层/打开所选项   [ ]  前进回退   . 设置</li><li>Shift – Command –  +  . 隐藏文件   A (应用程序 App)   H (用户)  C(电脑)  D(桌面)  F(最近文件)   G （前往文件夹）  L  (下载)</li><li>撤销 Command   Z</li><li>sudo killall -HUP mDNSResponder</li><li>ipconfig /flushdns</li><li>Mac 壁纸 <code>/System/Library/Desktop Pictures</code></li></ul><p>Mac工具</p><ul><li>brew</li><li>curl</li><li>mtr📕</li></ul><p>安装软件</p><ul><li>macOS 不允许未知来源开发者的应用<ul><li><code>sudo spctl --master-disable</code>  安全性与隐私”   允许“任何来源</li><li>用 Finder 找到应用程序，用右键菜单打开</li></ul></li></ul><h2 id="Mac环境变量设置"><a href="#Mac环境变量设置" class="headerlink" title="Mac环境变量设置"></a>Mac环境变量设置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">zsh --vesion<br>cat /etc/shells <br></code></pre></td></tr></tbody></table></figure><p>bash</p><ul><li><code>/etc/profile  &gt; /etc/paths 全局  &gt;  ~/.bash_profile 用户  &gt;  ~/.bash_login  &gt;  ~/.profile ~/.bashrc</code><ul><li><code>/etc/profile 与 /etc/paths 系统级别环境变量</code><ul><li><code>/etc/paths</code>  全局配置</li><li><code>/etc/profile </code>  全局（公有）配置</li></ul></li><li><code>~/.bash_profile  &gt;  ~/.bash_login  &gt;  ~/.profile  &gt; ~/.bashrc 用户级别环境变量</code><ul><li>``~/.echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile` 当前用户生效  要重启  /.bash_profile文件存在，则后面的几个文件就会被忽略不读了</li><li>``~/.profile`  为系统的每个用户设置环境信息（登陆时执行）</li><li><code> ~/.bashrc</code>  修改这个文件不用重启，重新打开一个bash即可生效</li></ul></li></ul></li><li>用法<ul><li>设置命令别名</li><li>设置自定义指令操作</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;<br>// 全局配置<br><span class="hljs-built_in">touch</span> /etc/paths.d/xxxfile<br>vim xxxfile<br>/usr/local/xxx/bin  //启动路径<br>// 系统文件<br>vim ~/.bash_profile   //  ./.profile <br><span class="hljs-built_in">source</span> .bash_profile<br>// 别名 设置常用缩写  <br><span class="hljs-built_in">alias</span> xx = <span class="hljs-string">'xxxx'</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> // 查看Path<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">'PATH="$PATH:./node_modules/.bin"'</span> &gt;&gt; ~/.bash_profile<br><br>// mac .bash_profile <br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">'ls -l'</span> <span class="hljs-comment"># 别名</span><br><span class="hljs-built_in">export</span> PATH=/opt/local/bin:/opt/local/sbin:<span class="hljs-variable">$PATH</span> <span class="hljs-comment"># 设置path</span><br><br>// 用Typora打开Hexo博客文章<br><span class="hljs-built_in">alias</span> note=<span class="hljs-string">'cd /Users/administrator/Workspace/Blog/source/_posts'</span><br><span class="hljs-built_in">alias</span> typora=<span class="hljs-string">'note &amp;&amp; open -a /Applications/Typora.app'</span><br>// 上传Blog文章<br><span class="hljs-built_in">alias</span> push=<span class="hljs-string">'cd /Users/administrator/Workspace/Blog &amp;&amp; npm run git</span><br></code></pre></td></tr></tbody></table></figure><p>zsh</p><ul><li>安装了<code>oh my zsh</code>后， <code>.bash_profile</code> 文件中的环境变量就无法起到作用</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br>// 添加<br><span class="hljs-built_in">source</span> ~/.bash_profile<br>// zsh中配置<br></code></pre></td></tr></tbody></table></figure><ul><li>oh my zsh<ul><li>z 是oh-my-zsh默认就装好的，会记录输入过的路径名，z+某个目录直接跳转到该目录</li></ul></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 主体<br>ZSH_THEME=<span class="hljs-string">"random"</span><br><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/themes &amp;&amp; <span class="hljs-built_in">ls</span><br>plugins=() 插件<br><br>plugins=(<br>git<br>autojump<br>zsh-autosuggestions // 自动补全<br>zsh-syntax-highlighting  // 高亮<br>zsh-z<br>)<br></code></pre></td></tr></tbody></table></figure><ul><li>oh my zsh 插件</li></ul><blockquote><p><a href="https://www.mintimate.cn/2021/02/05/configZsh/">Linux/Mac如何配置zsh并使用Oh-my-zsh？让你的终端更加好用 - 雨月空间站</a></p><p><a href="https://asmcn.icopy.site/awesome/awesome-zsh-plugins/">ZSH 插件 - 超赞合集 awesome list chinese</a></p></blockquote><p>Google</p><blockquote><p><a href="https://github.com/biaochenxuying/blog/issues/58">提升 google 使用效率的 30个快捷键、16个扩展插件与 11个前端调试方法 · Issue #58 · biaochenxuying/blog</a></p></blockquote><p>Linux</p><ul><li><p>ls  <code>-w</code> 显示中文，<code>-l</code> 详细信息， <code>-a</code> 包括隐藏文件</p></li><li><p><code>&gt; &gt;&gt; </code></p><ul><li><code>&gt;</code> 是定向输出到文件，如果文件不存在，就创建文件；如果文件存在，就将其清空；一般我们备份清理日志文件的时候，就是这种方法：先备份日志，再用<code>&gt;</code>，将日志文件清空（文件大小变成0字节）</li><li><code>&gt;&gt;</code> 这个是将输出内容追加到目标文件中。如果文件不存在，就创建文件；如果文件存在，则将新的内容追加到那个文件的末尾，该文件中的原有内容不受影响。</li></ul></li><li><p>cp   cp 参数 源文件 目标文件  参数R表示对目录进行递归操作</p></li><li><p>rm 参数 文件 rm -rf 文件夹</p></li><li><p>mv 移动</p></li><li><p>chmod 参数 权限  文件  (#add  ch代表change)   文件权限</p><ul><li>chmod -R 755  /System/Library/Extensions  R 表示递归，755表示各用户的权限</li></ul></li><li><p>chown 参数  用户:组 文件  文件所有者</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>(syntax)axios</title>
    <link href="http://example.com/2022/10/17/axios/"/>
    <id>http://example.com/2022/10/17/axios/</id>
    <published>2022-10-17T08:46:11.997Z</published>
    <updated>2022-10-17T08:46:11.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="superfast"><a href="#superfast" class="headerlink" title="superfast"></a>superfast</h3><p>基于Promise的HTTP库 可以用在浏览器和Node.js</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">// axios<br>npm i axios <br>yarn add axios<br></code></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// vue-axios<br>npm install --save axios vue-axios<br><br>import Vue from <span class="hljs-string">'vue'</span><br>import axios from <span class="hljs-string">'axios'</span><br>import VueAxios from <span class="hljs-string">'vue-axios'</span><br>Vue.use(VueAxios, axios)<br>// Vue.axios == axios == this.axios == this.<span class="hljs-variable">$http</span><br>axios/Vue.axios/this.axios/this.<span class="hljs-variable">$http</span>.get(<span class="hljs-string">'xxx'</span>).<span class="hljs-keyword">then</span>(()=&gt;{}).catch(()=&gt;{})<br></code></pre></td></tr></tbody></table></figure><blockquote><p>API</p><ul><li>axios.xxx 请求方法的别名<ul><li>.then((response) =&gt; {}) 数据处理部分</li><li>.catch((error) =&gt;{}) 错误处理部分</li><li>请求方法别名 <code>axios.xxx</code><ul><li>request(config) 请求方法提供了别名、可以直接使用别名来发起请求</li><li>get、delete、head、option(url[, config])</li><li>post、put、patch(url[, data[, config]])</li></ul></li><li>并发 <ul><li>all([fuc(),fuc()]) [] 数组</li><li>spread(callback) 回调函数</li></ul></li><li>创建实例 create()</li></ul></li><li>axios({config})<ul><li>config: <ul><li>method url data:{ key:value }  params:{}  timeout: 1000  responseType:’xxx’ proxy:{}  auth: { } // <code>Authorization</code> 头</li></ul></li><li>.then((response) =&gt; {}) 数据处理部分</li><li>.catch((error) =&gt;{}) 错误处理部分</li></ul></li></ul><p>功能</p><ul><li>默认值 axios/instance.defaults.xxx = xx  create({ baseURL:xxx })<ul><li>baseURL headers.common[‘Authorization’]= AUTH_TOKEN headers.post[‘Content-Type’] = ‘application/x-www-form-urlencoded’</li></ul></li><li>超时 xxx.defaults.timeout = 1000  create({ timeout:1000 })</li><li>拦截器 <ul><li>添加拦截  axios/xxx.interceptors.request/response.use()  const xxx = axios.create()</li><li>移除拦截  axios.interceptors.request.eject(Interceptor)</li></ul></li><li>错误处理   if (error.response == 200) {} else if(){ }  validateStatus:(status) =&gt;{ return status &lt; 500 }</li><li>取消请求  axios.CancelToken.source()   cancelToken: source.token  source.cancel(‘xxx’);</li><li>JSON解析  ES6：qs.stringify(data)  Node：querystring.stringify({ foo: ‘bar’ }</li></ul></blockquote><h3 id="axios-xxx"><a href="#axios-xxx" class="headerlink" title="axios.xxx"></a>axios.xxx</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//GET GET方法传递参数 URL （/user?ID=12345） 和  params :{ } 传递参数 (传递参数的两种方式)</span><br>v-<span class="hljs-keyword">for</span>=msg  {{ msg.<span class="hljs-property">item</span> }}<br><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>){ <span class="hljs-attr">msg</span>:[] }<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>){<br>  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'url'</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> { <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = response.<span class="hljs-property">data</span> })<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> { error })<br>}<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/user?ID=12345'</span>).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/user'</span>, {<br>    <span class="hljs-attr">params</span>: {<br>      <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>    }<br>}).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>){}).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>){})<br><span class="hljs-comment">//POST</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">''</span>).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">'/user'</span>,{ <span class="hljs-attr">firstName</span>:<span class="hljs-string">''</span>,<span class="hljs-attr">lastName</span>:<span class="hljs-string">''</span> }).<span class="hljs-title function_">then</span>().<span class="hljs-title function_">catch</span>()<br><span class="hljs-comment">// 并发 axios.all</span><br>axios.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">fuc1</span>(),<span class="hljs-title function_">fuc2</span>()]).<span class="hljs-title function_">then</span>()<br></code></pre></td></tr></tbody></table></figure><h3 id="axios-1"><a href="#axios-1" class="headerlink" title="axios({})"></a>axios({})</h3><ul><li><code>axios({methods、url、data}).then().catch()</code></li><li><code>axios({ })  或 axios('')</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建实例</span><br>axios.<span class="hljs-title function_">create</span>([config])<br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>({<br>baseURL = <span class="hljs-string">''</span>,<br><span class="hljs-attr">timeout</span>:<span class="hljs-number">1000</span>,  <span class="hljs-comment">// 超时时间</span><br><span class="hljs-attr">headers</span>: {<span class="hljs-string">'X-Custom-Header'</span>: <span class="hljs-string">'foobar'</span>} <span class="hljs-comment">//头信息</span><br>}<br><span class="hljs-comment">// post                              </span><br><span class="hljs-title function_">axios</span>({methods、url、data})<br><span class="hljs-title function_">axios</span>({<br><span class="hljs-attr">methods</span>:<span class="hljs-string">'post'</span>,<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">'/user/12344'</span>,<br>  <span class="hljs-attr">data</span>:{<br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">''</span>,<br>    <span class="hljs-title class_">LastName</span>:<span class="hljs-string">''</span><br>  }<br>})<br><span class="hljs-comment">// get</span><br><span class="hljs-title function_">axios</span>({<br>  <span class="hljs-attr">method</span>:<span class="hljs-string">'get'</span>,<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">'http://bit.ly/2mTM3nY'</span>,<br>  <span class="hljs-attr">responseType</span>:<span class="hljs-string">'stream'</span><br>}).<span class="hljs-title function_">then</span>()<br><span class="hljs-comment">// 发送 GET 请求（默认的方法）</span><br><span class="hljs-title function_">axios</span>(<span class="hljs-string">'/user/12345'</span>);<br></code></pre></td></tr></tbody></table></figure><p>响应数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br><span class="hljs-comment">// data 由服务器提供的响应 数据</span><br>    data<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// status HTTP 状态码</span><br>    status<span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//  statusTest 来自服务器响应的HTTP状态信息</span><br>    statusText<span class="hljs-punctuation">:</span><span class="hljs-string">"OK"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// headers 服务器响应的头信息</span><br>    headers<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><br>    <span class="hljs-comment">// config 是为请求提供的配置信息</span><br>    config<span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>配置默认值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全局默认值</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">'https://api.example.com'</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">'Authorization'</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'application/x-www-form-urlencoded'</span>;<br><span class="hljs-comment">// 自定义默认值</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>({<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">'https://api.example.com'</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span><br>});<br>instance.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">'Authorization'</span>] = <span class="hljs-variable constant_">AUTH_TOKEN</span>;<br><span class="hljs-comment">// 配置指定时间</span><br><span class="hljs-keyword">var</span> instance = axios.<span class="hljs-title function_">create</span>()<br>instance.<span class="hljs-property">default</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">1000</span><br>instance.<span class="hljs-title function_">get</span>(<span class="hljs-string">'/longRequest'</span>, {<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>});<br></code></pre></td></tr></tbody></table></figure><p>拦截器</p><ul><li>添加和移除</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加拦截  axios/xxx.interceptors.request/response.use()</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) {<br>    <span class="hljs-keyword">return</span> config;<br>  }, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  });<br><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) {<br>    <span class="hljs-keyword">return</span> response;<br>  }, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  });<br><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>();<br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {});<br><br><span class="hljs-comment">// 移除拦截  axios.interceptors.request.eject(Interceptor)</span><br><span class="hljs-keyword">const</span> myInterceptor = axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {<span class="hljs-comment">/*...*/</span>});<br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">eject</span>(myInterceptor);<br></code></pre></td></tr></tbody></table></figure><p>错误处理</p><ul><li>处理状态码</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">''</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span>{<br> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>) {}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(){} <span class="hljs-keyword">else</span>{ }<br>   <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) {  <span class="hljs-keyword">return</span> status &lt; <span class="hljs-number">500</span>; }<span class="hljs-comment">// 状态码范围</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>取消</p><ul><li><em>cancel token</em> 取消请求</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CancelToken</span> = axios.<span class="hljs-property">CancelToken</span>;<br><span class="hljs-keyword">const</span> source = <span class="hljs-title class_">CancelToken</span>.<span class="hljs-title function_">source</span>();<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">''</span>,{ <span class="hljs-attr">cancelToken</span>: source.<span class="hljs-property">token</span> })<br>source.<span class="hljs-title function_">cancel</span>(<span class="hljs-string">'Operation canceled by the user.'</span>);<br></code></pre></td></tr></tbody></table></figure><p>JSON解析</p><ul><li>ES</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span>;<br><span class="hljs-keyword">const</span> options = <br><span class="hljs-title function_">axios</span>({<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,<br>  <span class="hljs-attr">headers</span>: { <span class="hljs-string">'content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span> },<br>  <span class="hljs-attr">data</span>: qs.<span class="hljs-title function_">stringify</span>({ <span class="hljs-string">'bar'</span>: <span class="hljs-number">123</span> }),<br>  url,<br>});<br></code></pre></td></tr></tbody></table></figure><ul><li>Node</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">'querystring'</span>);  <br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">'http://something.com/'</span>, querystring.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">foo</span>: <span class="hljs-string">'bar'</span> }));<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="axios" scheme="http://example.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>(bug)Bug</title>
    <link href="http://example.com/2022/10/17/bug/"/>
    <id>http://example.com/2022/10/17/bug/</id>
    <published>2022-10-17T08:46:11.997Z</published>
    <updated>2022-10-17T08:46:11.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li>在<code>.git</code>项目下不同目录存在多个<code>.git版本库</code> 会出现上传不了该目录的文件和<code>git commit </code>无法提交 ==Error Changes not staged for commit:==</li><li><code>Git</code>主分支从 <code>master</code> 变为 <code>main</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="bug" scheme="http://example.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>(syntax)vite</title>
    <link href="http://example.com/2022/10/17/vite/"/>
    <id>http://example.com/2022/10/17/vite/</id>
    <published>2022-10-17T08:46:11.997Z</published>
    <updated>2022-10-17T08:46:11.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><blockquote><p><a href="https://cn.vitejs.dev/guide/why.html">Vite 官方中文文档</a></p></blockquote><blockquote><ul><li>安装<ul><li>vue create =&gt; npm create vite</li><li><code>npm create vite@latest</code></li><li><code>pnpm create vite my-vue-app --template vue</code></li></ul></li><li>配置syntax<ul><li>vite<a href="https://cn.vitejs.dev/config/">配置 Vite | Vite 官方中文文档</a></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-vue'</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()]<br>})<br></code></pre></td></tr></tbody></table></figure></blockquote><ul><li><p>web开发构建工具</p><ul><li>一个开发服务器 基于原生ES模块 模块热更新(HMR)</li><li>一套构建指令 Rollup打包 预配置的 输出用于生产环境的高度优化过的静态资源</li></ul></li><li><p>现实问题：缓慢的服务器启动[将应用中的模块区分为 **依赖** <a href="https://esbuild.github.io/">esbuild</a> <a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html">预构建依赖</a>。和 <strong>源码</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ESM</a> {ES Module} 两类，改进了开发服务器启动时间] 缓慢的更新(打包器支持了动态模块热替换（HMR）)</p></li></ul><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest  // npm init vite-app &lt;project-name&gt;<br>yarn create vite  // yarn create vite-app &lt;project-name&gt;<br>pnpm create vite<br><span class="hljs-comment"># npm 6.x</span><br>npm create vite@latest my-vue-app --template vue<br><span class="hljs-comment"># npm 7+, extra double-dash is needed:</span><br>npm create vite@latest my-vue-app -- --template vue<br><span class="hljs-comment"># yarn</span><br>yarn create vite my-vue-app --template vue<br><span class="hljs-comment"># pnpm</span><br>pnpm create vite my-vue-app --template vue<br>// 上面vue替代 vanilla，vanilla-ts，vue，vue-ts，react，react-ts，preact，preact-ts，lit，lit-ts，svelte，svelte-ts<br>// 社区模板<br>npx degit user/project my-project<br><br>npx vite // npx vite build<br><span class="hljs-string">"scripts"</span>: {<br>    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"vite"</span>, // 启动开发服务器，别名：`vite dev`，`vite serve`<br>    <span class="hljs-string">"build"</span>: <span class="hljs-string">"vite build"</span>, // 为生产环境构建产物<br>    <span class="hljs-string">"preview"</span>: <span class="hljs-string">"vite preview"</span> // 本地预览生产构建产物<br>}<br></code></pre></td></tr></tbody></table></figure><p>vite.config.js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> { defineConfig, loadEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(<span class="hljs-function">(<span class="hljs-params">{ command, mode }</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 根据当前工作目录中的 `mode` 加载 .env 文件</span><br>  <span class="hljs-comment">// 设置第三个参数为 '' 来加载所有环境变量，而不管是否有 `VITE_` 前缀。</span><br>  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">loadEnv</span>(mode, process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">''</span>)<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-comment">// vite 配置</span><br>    <span class="hljs-attr">define</span>: {<br>      <span class="hljs-attr">__APP_ENV__</span>: env.<span class="hljs-property">APP_ENV</span><br>    }<br>  }<br>})<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="语法" scheme="http://example.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>(syntax)vue-cli</title>
    <link href="http://example.com/2022/10/17/vue-cli/"/>
    <id>http://example.com/2022/10/17/vue-cli/</id>
    <published>2022-10-17T08:46:11.997Z</published>
    <updated>2022-10-17T08:46:11.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://cli.vuejs.org/zh/guide/">介绍 | Vue CLI</a></p></blockquote><blockquote><p>@vue/cli两部分组成</p><ul><li>vue-cli 安装 <ul><li><code>npm install -g @vue/cli </code></li><li><code> vue create &lt;project-name&gt;</code></li></ul></li><li>Preset + 插件(第三方包)<ul><li>preset 预设 <code>vim ~/.vuerc</code>  远程/本地 Preset  <code>vue create --preset username/repo my-project</code></li><li>插件 内建 <code>vue add vuex</code> 社区<code>npm i vuex --save-dev</code><ul><li>区别  @vue/cli-plugin-vuex包 vs vuex包</li><li>vue add 会生成文件</li></ul></li></ul></li><li>vue.config.js 文件  <a href="https://cli.vuejs.org/zh/config/">配置参考 | Vue CLI</a></li></ul></blockquote><p>概念</p><ul><li>Vue CLI 是一个基于<code>Vue.js 进行快速开发的完整系统</code>(脚手架工具)</li><li>@vue/cli(新版本) 和 vue-cli(旧版本)</li><li><code>三个系统的组件（部分）组成  CLI 、CLI 服务、CLI 插件</code><ul><li>CLI：   (@vue/cli)   全局安装npm包  <code>提供vue命令</code></li><li>CLI 服务：（@vue/cli-service ） 一个<code>开发环境依赖</code>   一个npm包  局部安装在每个<code>@vue/cli</code><ul><li>@vue/cli-service-global 快速开发的原型 单独运行vue文件 <code>@vue/cli</code> + <code>@vue/cli-service-global</code></li></ul></li><li>CLI 插件：（插件就是安装的第三方包npm 如axios elementUI这些） 向你的 Vue 项目提供可选功能的 npm 包   <code>npm依赖包</code><ul><li><code>@vue/cli-plugin-</code> (内建插件 官方)</li><li><code>vue-cli-plugin-</code> (社区插件 第三方)</li></ul></li></ul></li><li><code>@vue/cli</code> 的全局配置，例如你惯用的包管理器和你本地保存的 preset <code>.vuerc</code> 的 JSON 文件 vue config 可复用的 preset</li></ul><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 创建项目<br>vue create my-project <br>vue ui<br>vue init webpack my-project<br>vue creat --<span class="hljs-built_in">help</span><br><br><br>// 安装vue/cli脚手架<br>npm i -g @vue/cli  // npm install -g @vue/cli@next<br>yarn global add @vue/cli  // yarn global add @vue/cli@next<br>// vue/cli脚手架版本<br>vue -version<br>// 更新vue-cli<br>npm update -g @vue/cli<br>yarn global upgrade --latest @vue/cli<br><br>// 快速原型开发<br>npm install -g @vue/cli-service-global<br>vue serve -h -o -c -p 8081 *.vue   //  vue serve开发环境 npm run serve  <br>vue serve MyComponent.vue<br>yarn serve<br>npx vue-cli-service serve<br>vue -d dist *.vue   // vue build npm run build  <br>vue build -t -n -d -h  <br>vue build MyComponent.vue // MyJavaScript.js<br>vue inspect<br><br>npx vue-cli-service <span class="hljs-built_in">help</span><br>// 插件 @vue/cli-plugin-<br>vue add eslint<br>npm i eslint<br>npm i -g elint 全局环境<br>// Preset 一个 Vue CLI preset 是一个包含创建新项目所需预定义选项和插件的 JSON 对象，让用户无需在命令提示中选择它们。<br>// CLI 服务<br><br>npm install vuex --save  // 生产环境(`dependencies`)   npm install vuex<br>npm install scss-loader --save-dev  // 开发环境 (`devDependencies`)  <br></code></pre></td></tr></tbody></table></figure><p>package.json</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">{<br>  <span class="hljs-string">"vuePlugins"</span>: { }<br>}<br></code></pre></td></tr></tbody></table></figure><p>vue.config.js 配置文件  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module.export={ }</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span> = {<br>  <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">'production'</span> ? <span class="hljs-string">'/public/'</span> : <span class="hljs-string">'./'</span>,<br> <span class="hljs-attr">outputDir</span>: <span class="hljs-string">'dist'</span>,<br>  <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">"assets"</span>,<br>    <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br> <span class="hljs-attr">pages</span>: {  <br>        <span class="hljs-attr">index</span>: {<br>            <span class="hljs-attr">entry</span>: <span class="hljs-string">'src/index/main.js'</span>,    <br>            <span class="hljs-attr">template</span>: <span class="hljs-string">'public/index.html'</span>,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.html'</span>,       <br>            <span class="hljs-attr">title</span>: <span class="hljs-string">'Index Page'</span>,   <br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">'chunk-vendors'</span>, <span class="hljs-string">'chunk-common'</span>, <span class="hljs-string">'index'</span>]<br>        }, <br>     <span class="hljs-attr">subpage</span>: <span class="hljs-string">'src/subpage/main.js'</span><br>    },<br>    <span class="hljs-attr">devServer</span>: {<br>          <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>,<br>          <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>          <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">hotOnly</span>: <span class="hljs-literal">false</span>, <br>          <span class="hljs-attr">proxy</span>: { <br>              [process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: {<br>                  <span class="hljs-attr">target</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_URL</span>,<br>                  <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>                  <span class="hljs-attr">pathRewrite</span>: {<br>                    [<span class="hljs-string">"^"</span> + process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: <span class="hljs-string">""</span><br>                  }<br>               }<br>              <span class="hljs-string">'/api'</span>: {<br>                  <span class="hljs-attr">target</span>: <span class="hljs-string">'http://47.100.47.3/'</span>,  <br>                  <span class="hljs-attr">ws</span>:<span class="hljs-literal">true</span>,<br>                  <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <br>              },<br>              <span class="hljs-string">'/foo'</span>:{<br>                  <span class="hljs-attr">target</span>:<span class="hljs-string">'&lt;other_url&gt;'</span><br>              }<br>          },<br>      }<br>}<br><span class="hljs-comment">// defineConfig({ })</span><br><span class="hljs-keyword">const</span> { defineConfig } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'@vue/cli-service'</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-comment">// 选项</span><br>})<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// const port = 8080; // 端口号</span><br><span class="hljs-comment">// const IS_PRODUCTION = process.env.NODE_ENV == "production"; // 正式环境</span><br><span class="hljs-comment">// const CompressionPlugin = require("compression-webpack-plugin");</span><br><span class="hljs-comment">// const UglifyJsWebpackPlugin = require("uglifyjs-webpack-plugin");</span><br><span class="hljs-comment">/** key 是import 的包名，value 是CDN 为我们提供的全局变量名 */</span><br><span class="hljs-comment">// const externals = {</span><br><span class="hljs-comment">//  "ali-oss": "OSS"</span><br><span class="hljs-comment">// };</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">export</span> = {<br>    <span class="hljs-comment">// 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath</span><br>    <span class="hljs-comment">// baseUrl: process.env.NODE_ENV === 'production' ? './' : '/'</span><br>    <span class="hljs-comment">// 项目中的public目录一般是部署在域名的根部，如果要用到public目录下的资源，需要配置publicPath。</span><br>    <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">'production'</span> ? <span class="hljs-string">'/public/'</span> : <span class="hljs-string">'./'</span>,<br>    <span class="hljs-comment">// 输出文件目录：在npm run build时，生成文件的目录名称  生产环境构建文件的目录</span><br>    <span class="hljs-attr">outputDir</span>: <span class="hljs-string">'dist'</span>,<br>    <span class="hljs-comment">// 放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br>    <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">"assets"</span>,<br>    <span class="hljs-comment">// indexPath: 'test/home.html', // build之后生成的index.html的路径</span><br>    <span class="hljs-comment">// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度</span><br>    <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存，你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span><br>    <span class="hljs-attr">filenameHashing</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 代码保存时进行eslint检测</span><br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// webpack-dev-server 相关配置</span><br>    <span class="hljs-comment">//在 multi-page 模式下构建应用。每个“page”应该有一个对应的 JavaScript 入口文件。其值应该是一个对象，对象的 key 是入口的名字，value 是：</span><br>     <span class="hljs-attr">pages</span>: {  <span class="hljs-comment">// 构建多页应用</span><br>        <span class="hljs-attr">index</span>: {<br>            <span class="hljs-comment">// page 的入口</span><br>            <span class="hljs-attr">entry</span>: <span class="hljs-string">'src/index/main.js'</span>,<br>            <span class="hljs-comment">// 模板来源</span><br>            <span class="hljs-attr">template</span>: <span class="hljs-string">'public/index.html'</span>,<br>            <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">'index.html'</span>,<br>            <span class="hljs-comment">// 当使用 title 选项时，</span><br>            <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>            <span class="hljs-attr">title</span>: <span class="hljs-string">'Index Page'</span>,<br>            <span class="hljs-comment">// 在这个页面中包含的块，默认情况下会包含</span><br>            <span class="hljs-comment">// 提取出来的通用 chunk 和 vendor chunk。</span><br>            <span class="hljs-attr">chunks</span>: [<span class="hljs-string">'chunk-vendors'</span>, <span class="hljs-string">'chunk-common'</span>, <span class="hljs-string">'index'</span>]<br>        },<br>        <span class="hljs-comment">// 当使用只有入口的字符串格式时，</span><br>        <span class="hljs-comment">// 模板会被推导为 `public/subpage.html`</span><br>        <span class="hljs-comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span><br>        <span class="hljs-comment">// 输出文件名会被推导为 `subpage.html`。</span><br>        <span class="hljs-attr">subpage</span>: <span class="hljs-string">'src/subpage/main.js'</span><br>    },<br>    <span class="hljs-attr">devServer</span>: {<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<span class="hljs-comment">// 端口</span><br>        <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">hotOnly</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 热更新   </span><br>        <span class="hljs-attr">proxy</span>: {  <span class="hljs-comment">// 使用代理 解决跨域问题</span><br>            [process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: {<br>                <span class="hljs-attr">target</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_URL</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">pathRewrite</span>: {<br>                  [<span class="hljs-string">"^"</span> + process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>]: <span class="hljs-string">""</span><br>                }<br>             }<br>            <span class="hljs-string">'/api'</span>: {<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">'http://47.100.47.3/'</span>,  <span class="hljs-comment">// 目标代理服务器地址</span><br>                <span class="hljs-attr">ws</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启代理，本地创建一个虚拟服务器 允许跨域</span><br>            },<br>            <span class="hljs-string">'/foo'</span>:{<br>                <span class="hljs-attr">target</span>:<span class="hljs-string">'&lt;other_url&gt;'</span><br>            }<br>        },<br>    },<br>}<br></code></pre></td></tr></tbody></table></figure><p>vue文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">// vue文件 组件使用三步 使用组件 导入组件 组件注册<br>&lt;template&gt;<br>  &lt;h2 class="red"&gt;Hello {{ msg }}&lt;/h2&gt;<br>&lt;hello&gt;&lt;/hello&gt; // 使用组件<br>&lt;/template&gt;<br>&lt;script&gt;<br>import hello from './componets/HelloWorld.vue'  // 导入组件<br>export default{<br>    name: 'World',<br>  components:{<br>      HelloWorld // 注册组件<br>    }, <br>    props:{  // props 参数 和 data 参数 <br>        msg:{<br>            type: String,  // 数据类型 String 是大写的<br>            default: "test msg"  //默认值<br>        }<br>    },<br>    methods:{<br>    },<br>    data(){<br>       return{<br>          msg:'test msg'<br>      }<br>    },<br>  watch:{},<br>  computed:{}<br>}<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="语法" scheme="http://example.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
